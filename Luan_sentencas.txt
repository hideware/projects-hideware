um algoritmo é formalmente uma seqüência finita de passos que levam a execução de uma  tarefa. 
podemos  pensar  em  algoritmo  como  uma  receita,  uma  seqüência  de  instruções  que  dão  cabo  de  uma  meta  específica
o algoritmo pode ser usado como uma ferramenta genérica para representar a solução de tarefas independente do desejo de automatizá-las
um algoritmo é uma receita para um processo computacional e consiste de uma série de operações primitivas, interconectadas devidamente, sobre um conjunto de objetos
algoritmo pode ter vários níveis de abstrações de acordo com a necessidade de representar ou encapsular detalhes inerentes às linguagens de programação
um algoritmo é uma abstração da realidade
um algoritmo é formalmente uma seqüência finita de passos que levam a execução de uma  tarefa
m algoritmo é um procedimento computacional bem definido que toma como parâmetro de entrada um valor ou um conjunto de valores e que produz como saída um valor  ou um conjunto de valores 
uma seqüência de passos computacionais que transformam um input num output 
algoritmo é uma ferramenta que permite resolver um problema computacional específico
um algoritmo é a descrição de um padrão de comportamento, expresso em termos de um repertório bem definido e finito de ações primitivas, as quais damos por certo que podem ser executadas
um algoritmo, para ser assim definido, precisa um.  ter início e fim dois.  ser descrito em termos de ações não ambíguas e bem definidas três.  que as ações sigam uma seqüência ordenada
os algoritmos são descritos em uma linguagem chamada pseudo-código
os algoritmos são independentes das linguagens de programação
o algoritmo deve ser fácil de se interpretar e fácil de codificar.
ele deve ser o intermediário entre a linguagem falada e a linguagem de programação
existem  várias  pseudolinguagens  de  programação  como  mostra  a  referência  dois  que  utiliza  o  portugol português mais algol maispascal 
um algoritmo é uma seqüência lógica de ações a serem executadas para se executar uma determinada tarefa
um programa é a formalização de um algoritmo em uma determinada linguagem de programação, segundo suas regras de sintaxe e semântica, de forma a permitir que o computador possa entender a seqüência de ações
existem  diversas  linguagens  de  programação,  cada  uma  com  suas  características  específicas e com níveis de complexidade e objetivos diferentes linguagem de máquina única compreendida pelo computador. específica de cada computador. · linguagens de baixo nível ex. assembly · linguagens de alto nível utiliza instruções próximas da linguagem humana de forma a facilitar o raciocínio
dentificadores representam  os  nomes  escolhidos  para  rotular  as  variáveis,  procedimentos e funções
constante  constant  uma constante  const , como sugere o nome, é um ﻿identificador que armazena um valor fixo e imutável, durante a execução de um algoritmo ou programa
podemos associá-lo a uma posição de memória  endereço  que tem um conteúdo fixo
este conteúdo poderá ser um número  real ou inteiro , uma cadeia de caracteres texto ou um valor lógico será definido abaixo 
variável  variable  uma variável  var  é um identificador que, como sugere o nome, possui o conteúdo variável durante a execução de um algoritmo ou programa
podemos associar uma variável a uma posição da memória  endereço 
poderemos armazenar  guardar  neste endereço qualquer valor do conjunto de valores de um tipo básico associado a ela.
uma variável pode assumir vários valores diferentes ao longo da execução do programa, mas, em um determinado momento, possui apenas um valor
inteiro int, short int ou long int qualquer número inteiro, negativo, nulo ou positivo.
real float ou double qualquer número real, negativo, nulo ou positivo
caracter char qualquer conjunto de caracteres alfanuméricos.
texto ou cadeia de caracteres string uma variável deste tipo poderá armazenar uma cadeia de caracteres de qualquer tamanho
lógico boolean tipo especial de variável que armazena apenas os valores v e f, onde v ﻿representa verdadeiro e falso
palavras reservadas são palavras que terão uso específico no nosso pseudo-código e que não deverão ser ﻿usadas como identificadores, para não causar confusão na interpretação
comando simplesé uma instrução simples
comando composto um grupo de comandos simples que executam alguma tarefa
no algoritmo é preciso representar a troca de informações que ocorrerá entre o mundo da máquina e o nosso mundo, para isso, devemos utilizar comandos de entrada e saída
para que possamos obter dados do meio exterior para uso do computador memória principal , estes têm de vir através dos dispositivos de entrada
o diagrama tradicional é uma forma padronizada para representar os passos lógicos de um determinado processamento
com o diagrama podemos definir uma seqüência de símbolos, com significado bem definido, portanto, sua principal função é a de facilitar a visualização dos passos de um processamento
ao criar as constantes e variáveis, utilizar nomes significativos e comentar, se necessário for;
utilizar identação  três espaços como sugestão , para mostrar a estrutura lógica e seqüência de comandos, quando usando o nosso pseudo-código. com o dns não é preciso
utilizar, opcionalmente, um dicionário de dados que especifique formalmente o conteúdo de cada constante e variável de todo algoritmo ou programa
utilizar parênteses para evitar ambigüidade nas expressões
seqüência grupo de comandos em que são executados um após o outro.
também chamada de estrutura de decisão ou de processamento condicional, a estrutura de seleção é utilizada quando a execução de um comando  ou uma seqüência de comandos  depende de um teste anterior  uma ou mais comparações 
a seleção pode ser simples ou composta
seleção simples ﻿quando a execução de um comando ou de uma seqüência de comandos depender de uma condição verdadeira, e não há comandos a executar se a condição for falsa
seleção composta quando se executa um comando  ou seqüência de comando  se uma condição é verdadeira, e se executa um outro comando ou seqüência de comandos se a condição é falsa
a estrutura de seleção permite o aninhamento, ou seja, o comando a ser executado dentro de uma seleção  por exemplo, no  senão  pode ser uma outra seleção
uma boa identação será fundamental para o entendimento de algoritmo quando utilizando pseudo-código
laço enquanto while a estrutura de repetição enquanto é utilizada quando um conjunto de comandos deve ser executado repetidamente, enquanto uma determinada condição  expressão lógica  permanecer verdadeira
a estrutura de seleção, ela permite o aninhamento de repetições, ou seja, a existência de uma estrutura de repetição dentro de outra
escape do laço-abandone exit   comando abandone força uma saída de um laço de repetição
sinalizador  flags  o sinalizador ou flag é um valor que, quando lido, sinaliza a saída de um laço, o fim de um programa, o fim de uma lista de dados, ou o fim de um arquivo
desenvolver o algoritmo em diferentes fases de detalhamento crescente, do geral ao particular, por refinamentos sucessivos desenvolvimento top-down ou de cima para baixo 
decompor o algoritmo em módulos funcionais, organizados de preferência em um sistema hierárquico
um  procedimento  é  uma  seqüência  de  comandos  precedida  por  uma  seqüência  de  declarações que possui um identificador  nome do procedimento , uma lista de parâmetros opcional e pode realizar qualquer tipo de processamento que o programador ou analista deseje
funções são as estruturas que permitem ao usuário separar seus programas em blocos
para fazermos programas grandes e complexos temos de construí-lo - bloco a bloco
uma  função  é  um  módulo  que  tem  por  objetivo  calcular  e  retornar  ao  algoritmo,  procedimento ou função  chamador  um valor.
a chamada de uma função para execução é feita apenas citando-se o seu identificador no meio de uma expressão
o tipo-de-retorno é o tipo de variável que a função vai retornar.
default é o tipo inteiro int , ou seja, uma função para qual não declaramos o tipo de retorno é considerada como retornando um inteiro.
quando se chega a uma declaração retorna  return  a função é encerrada imediatamente e, se o valor de retorno é informado, a função retorna este valor
ma função pode ter mais de uma declaração retorna return
o escopo é o conjunto de regras que determinam o uso e a validade de variáveis nas diversas partes do programa
ariáveis locais. estas são aquelas que só têm validade dentro do bloco no qual são declaradas
podemos declarar variáveis dentro de qualquer bloco
um bloco começa quando abrimos uma chave e termina quando fechamos a chave
a declaração de variáveis locais é a primeira coisa que devemos colocar num bloco
a característica que torna as variáveis locais tão importantes é justamente a de serem exclusivas do bloco
variáveis globais são declaradas, como já sabemos, fora de todas as funções do programa
elas são conhecidas e podem ser alteradas por todas as funções do programa
quando uma ﻿função tem uma variável local com o mesmo nome de uma variável global a função dará preferência à variável local
existem casos em que um procedimento ou função chama a si próprio. diz-se então que o procedimento ou função é recursivo
um procedimento nada mais é que um algoritmo hierarquicamente subordinado a um outro algoritmo
a pesquisa binária é um método que também só se aplica a vetores previamente ordenados
o propósito dos algoritmos de ordenação é o de facilitar e acelerar a busca posterior de um elemento no vetor
os algoritmos de ordenação são utilizados normalmente uma vez em cada execução do programa, ou poucas vezes, se comparados com os de pesquisa, por isso o uso de métodos elementares e demorados não é tão problemático como nas pesquisas
os algoritmos de ordenação poderão ser utilizados muitas vezes na solução de diferentes problemas e também vamos defini-los como um procedimento do mesmo algoritmo principal
na informática, o algoritmo é o projeto do programa , ou seja, antes de se fazer um programa software na linguagem de programação desejada pascal, c, delphi, etc. deve-se fazer o algoritmo do programa
um programa, é um algoritmo escrito numa forma compreensível pelo computador através de uma linguagem de programação , onde todas as ações a serem executadas devem ser especificadas nos mínimos detalhes e de acordo com as regras de sintaxeum da linguagem escolhida.
sintaxe segundo o dicionário aurélio, é a parte da gramática que estuda a disposição das palavras na frase e a das frases no discurso, bem como a relação lógica das frases entre si
cada linguagem de programação tem a sua sintaxe instruções, comandos, etc  que deve ser seguida corretamente para que o programafuncione. 
o conjunto de palavras e regras que definem o formato das sentenças válidas chama-se de sintaxe da linguagem.
um algoritmo não é a solução de um problema, pois, se assim fosse, cada problema teria um único algoritmo.
um algoritmo é um  caminho  para a solução de um problema e, em geral, existem muitos caminhos que levam a uma solução satisfatória, ou seja, para resolver o mesmo problema pode-se obter vários algoritmos diferentes
os fluxogramas ou diagramas de fluxo, são uma representação gráfica que utilizam formas geométricas padronizadas ligadas por setas de fluxo, para indicar as diversas ações  instruções  e decisões que devem ser seguidas para resolver o problema em questão
o português estruturado, é uma forma especial de linguagem bem mais restrita que a língua portuguesa  e  com  significados  bem  definidos  para  todos  os  termos  utilizados  nas  instruções comandos 
o  português  estruturado  na  verdade  é  uma simplificação extrema da língua portuguesa, limitada a pouquíssimas palavras e estruturas que têm significado pré-definido, pois deve-se seguir um padrão
a sintaxe do português estruturado não precisa ser seguida tão rigorosamente quanto a sintaxe de uma linguagem de programação, já que o algoritmo não será executado como um programa 
são chamadas de constantes, as informações  dados  que não variam com o tempo, ou seja, permanecem sempre com o mesmo conteúdo, é um valor fixo  invariável 
uma variável, é um espaço da memória do computador que reservamos  para guardar informações  dados 
as variáveis, podem conter valores diferentes a cada instante de tempo, ou seja, seu conteúdo pode variar de acordo com as instruções do algoritmo
as variáveis são referenciadas através de um nome  identificador  criado por você durante o desenvolvimento do algoritmo.
o conteúdo de uma variável pode ser alterado, consultado ou apagado quantas vezes forem necessárias durante o algoritmo
ao alterar o conteúdo da variável, a informação anterior é perdida, ou seja, sempre  vale  a última informação armazenada na variável
uma variável armazena apenas um conteúdo de cada vez
ma variável pode ser vista como uma caixa com um rótulo  nome  colado nela, que em um dado momento guarda um determinado objeto.
atribuição é uma notação utilizada para atribuir um valor a uma variável, ou seja, para armazenar um determinado conteúdo em uma variável
a operação de atribuição, normalmente, é representada por uma seta apontando para a esquerda, mas existem outros símbolos para representar a atribuição, depende da forma de representação do algoritmo
a instrução escrever é utilizada quando deseja-se mostrar informações na tela do computador, ou seja, é um comando de saída de dados.
sa-se a instrução escrever, quando necessita - se mostrar algum dado para o usuário do algoritmo
anto no diagrama de chapin quanto em português estruturado representa-se a saída de dados através da palavra escrever ou escreva 
em fluxogramas a representação da saída de dados é feita através de uma forma geométrica específic
sa-se a instrução ler, quando necessita-se que o usuário do algoritmo digite algum dado 
a instrução ler é utilizada quando deseja-se obter informações do teclado do computador, ou seja, é um comando de entrada de dados.
a  estrutura  de  seleção  aninhada  normalmente  é  utilizada  quando  estivermos  fazendo  várias comparações testes sempre com a mesma variável.
operações  relacionais  são  as comparações  permitidas  entres  valores,  variáveis,  expressões  e constantes
os operadores lógicos permitem que mais de uma condição seja testada em uma única expressão, ou seja, pode-se fazer mais de uma comparação  teste ao mesmo tempo
existem três estruturas básicas para a construção de algoritmos, que são algoritmos seqüenciais, algoritmos com seleção e algoritmos com repetição
uma  estrutura  de  repetição  permite  que  uma  seqüência  de  instruções  comandos  seja executada várias vezes, até que uma condição teste seja satisfeita, ou seja, repete-se um conjunto de instruções sem que seja necessário escrevê-las várias vezes
as estruturas de repetição, assim como a de decisão  seleção , envolvem a avaliação de uma condição  teste 
existem três tipos de estruturas de repetição repita - até, enquanto - faça e para-até-faça, ﻿cada uma com suas peculiaridades e apropriada para cada problema, normalmente é possível resolver um mesmo problema usando qualquer uma das estruturas de repetição, mas, na maioria das situações, haverá uma mais adequada
na estrutura repita - até as instruções a serem repetidas são executadas, no mínimo uma vez, já que o teste a condição fica no final da repetição.
na estrutura enquanto - faça as instruções a serem repetidas podem não ser executadas nenhuma vez, pois o teste fica no início da repetição, então a execução das instruções  que estão  dentro  da repetição  depende do teste
a estrutura de repetição para - até - faça é um pouco diferente das outras duas repita - até e enquanto - faça , pois possui uma variável de controle, ou seja, com esta estrutura é possível executar um conjunto de instruções um número determinado de vezes.
em algoritmos com estruturas de repetição repita, enquanto ou para é comum surgir a necessidade de utilizar variáveis do tipo contador e/ou acumulador.
um contador é utilizado para contar o número de vezes que um evento uma instrução ocorre, ou seja, contar a quantidade de vezes que uma instrução é executada
um contador é uma variável  qualquer  que recebe ela mesma mais um valor  uma constante , no caso do exemplo acima, a variável x está recebendo o valor dela mesma mais um.
um acumulador, também conhecido como somador, é utilizado para obter somatórios 
um acumulador  somador  é uma variável  qualquer  que recebe ela mesma mais uma outra variável, no caso do exemplo acima, a variável x está recebendo o valor dela mesma mais o valor da variável y.
normalmente inicializa - se as variáveis que serão utilizadas como contador ou como acumulador com o valor zero, mas pode - se inicializá-las com o valor que desejarmos de acordo com a necessidade
em muitos algoritmos surge a necessidade de determinarmos qual o maior ou o menor valor dentro de ﻿um conjunto de valores e, para isto, não existe uma estrutura especial
quando sabe - se os limites dos valores possíveis, ou seja, por exemplo com as notas sabemos que os valores serão de zero a um, então sabe-se quais são os valores limites o valor mínimo e o valor máximo , não teremos nota menor que zero e nem nota maior que umzero.
um vetor como uma variável dividida em vários  pedaços , em várias  casinhas , onde cada pedaço desses é identificado através de um número, referente à posição de uma determinada informação no vetor em questão.
número de cada posição do vetor é chamado de índice.
vetor é um conjunto de variáveis, onde cada uma pode armazenar uma informação diferente, mas todas compartilham o mesmo nome
um algoritmo é uma sequência finita de ações executáveis que visam obter uma solução para um determinado tipo de problema
algoritmos são procedimentos precisos, não ambíguos, mecânicos, eficientes e corretos
um algoritmo não representa, necessariamente, um programa de computador, e sim os passos necessários para realizar uma tarefa.
um computador é uma máquina que manipula dados a partir de uma lista de instruções
os computadores podem ser mecânicos  computador analógico  ou eletrônicos﻿ computadores digitais 
um algoritmo pode ser definido como uma sequência finita de passos instruções para resolver um determinado problema
sempre que desenvolvemos um algoritmo estamos estabelecendo um padrão de comportamento que deverá ser seguido uma norma de execução de ações para alcançar o resultado de um problema
um algortimo quando programado num computador é constituído pelo - das três partes, sendo elas um. entrada de dados; dois. processamento de dados; três. saída de dados
na parte de entrada, são fornecidas as informações necessárias para que o algoritmo possa ser executado
na parte do processamento são avaliadas todas as expressões algébricas, relacionais e lógicas, assim como todas as estruturas de controle existentes no algoritmo condição e/ou repetição 
na parte de saída, todos os resultados do processamento ou parte deles são envia-dos para um ou mais dispositivos de saída, como monitor, impressora, ou até mesmoa própria memória do computador
os fluxogramas são uma apresentação do algoritmo em formato gráfico
ada ação ousituação é representada por uma caixa
tomadas de decisões são indicadas por caixas especiais, possibilitando ao fluxo de ações tomar caminhos distintos
qualquer tipo de informação que deva ser transferida, processada ou armazenadadeve estar na forma de uma linguagem
a linguagem é imprescindível para o processo de comunicação
duas máquinas trocam informação por uma linguagem, que neste caso mais técnico e restrito, se chama protocolo
um computador armazena suas instruções em código de máquina.
ara que um ser humano possa programar, armazenar e buscar informações num computador, é necessário que saiba instruí - um na sua linguagem de máquina ou numa linguagem intermediária uma linguagem de programação que possa ser facilmentetraduzida para o computador
além do fato de o computador necessitar que lhe instruam com ações bem específicas,estas ações devem ser passadas para o computador numa linguagem que ele possa entendê-las, chamada linguagem de máquina.
esta linguagem é composta somente por números, representados de forma binária, que, sob o ponto de vista do computador, representam as operações e os operandos que serão usados no processamento doprograma
compilação o programa em linguagem de programação é transformado em instruções em linguagem de máquina que o processador pode executar 
para facilitar a tarefa de programar um computador, foram criadas várias linguagens de programação
estas linguagens são um maneira de tentar escrever as tarefas que o computador vai realizar de maneira mais parecida com a linguagem natural.
embora ainda seja muitas vezes complexo em comparação com a linguagem natural, um programa escrito em uma linguagem de programação é muito mais fácil de ser implementado, compreendido e modificado
as linguagens de programação são um meio termo entre a linguagem de máquinae a linguagem natural
este modo são classificadas de acordo com o nível entre alinguagem natural ou de máquina que ocupam
as linguagens muito parecidas com linguagem de máquina são chamadas de linguagens de baixo nível e suas instruções parecem-se muito com aquelas que serão executadas pelo processador
as linguagens de alto nível são as que guardam mais semelhanças com a linguagem natural
exemplo de linguagens de baixo nível é a linguagem de montagem assembly. exemplos de linguagens de alto-nível são pascal, c, fortran, java, perl, python, lisp, php, entreoutras
o processador não pode executar o código numa linguagem de programa﻿ção, esta deve ser traduzida em código de máquina antes de ser executada
este processo é chamado de textbfcompilação responsável por converter os comandos da lingugem de programação nas instruções em código de máquina que o processador poderá utilizar.
um programa escrito em linguagem de máquina, como contém instruções específicas de um processador, só poderá ser utilizado naquele processador ou em similares
ma linguagem de programação, como contém somente instruçõesabstratas do que fazer, pode ser compilado para qualquer código de máquina.
ao invés de escrever um programa em código de máquina para cada famíliade processdores, escreve-se o mesmo código numa linguagem de programação e estáé compilada por um compilador específico daquela arquitetura
o pseudocódigo é uma maneira intermediária entre a linguagem natural e uma linguagem de programação de representar um algoritmo
o pseudocódigo não requer todo a rigidez sintática necessária numa linguagem de programação, permitindo que o aprendiz sedetenha na lógica do algoritmos e não no formalismo da sua representação
pseudocódigo pode ser traduzido para uma linguagem de programação
todo programa em c inicia sua execução na função main , que é obrigatória
para que certas funções sejam acessíveis, é necessário incluir a bilbiotecastdlib.h
todas as linhas que contém instruções devem terminar com ponto-e-vírgula
os blocos de instruções são delimitados por chaves
blocos de comentários são delimitados por/*e*/
linhas de comentários são iniciadas por duas barras//
um único algorismo binário é chama do bit, uma sequência de oito bits é um byte e uma sequência de umseis bits é uma palavra
lógica utilizada para realizar a conversão de números entre diferentes bases é similar a lógica que usamos para representar um número no sistema decimal, ou seja, osalgarismos irão representar diferentes quantidades dependendo da sua posição no número em questão
os dados em um computador devem ser armazenados de acordo com o tipo de informação que se deseja representar e com o tipo de operação que será realizada comeles
a representação correta e adequada de uma informação permite otimizar os recursos computacionais disponíveis, além de acelerar o processamento
inteiro são os números pertencentes ao conjunto dos inteiros, isto é, que não possuem parte fracionária. podem ser positivos, nulos ou negativos
real são os números pertencentes ao conjunto dos reais, isto é, que podem possuir parte fracionária
caractere são os valores pertencentes ao conjunto de todos os caracteres numéricos, alfabéticos e especiais esse conjunto tambémé conhecido como conjunto de caracteresalfanuméricos
lógico tipo lógico é utilizado para representar informações que só podem assumirdois valores, o valor verdadeiro v ou o valor falso f 
um dado é uma constante quando seu valor não se altera ao longo do tempo em que o algoritmo é executado, ou seja, permanece o mesmo desde o início até o final da execução
um dado que pode ter seu valor alterado durante a execução do programa é tido como uma variável
o uso de algoritmos é quase tão antigo quanto a matemática. 
com grande vigor, como uma forma de indicar o caminho para a solução dos mais variados problemas
algoritmo não é a solução do problema, pois, se assim fosse, cada problema teria um único algoritmo. 
algoritmo é o caminho para a solução de um problema, e em geral, os caminhos que levam a uma solução são muitos
algoritmos não se aprendem copiando algoritmos estudando algoritmos algoritmos só se aprendem construindo algoritmos testando algoritmos
à especificação da seqüência ordenada de passos que deve ser seguida para a realização de um tarefa, garantindo a sua repetibilidade, dá-se o nome de algoritmo
algoritmo é um conjunto finito de regras, bem definidas, para a solução de um problema em um tempo finito e com um número finito de passos
um algoritmo é qualquer procedimento computacional bem definido que toma algum valor ou conjunto de valores como entrada e produz algum valor ou conjunto de valores como saída.
um algoritmo deve sempre possuir pelo menos um resultado, normalmente chamado de saída
todas as operações especificadas no algoritmo devem ser suficientemente básicas para que possam ser executadas de maneira exata e num tempo finito.
na prática não é importante ter-se apenas um algoritmo, mas sim, um bom algoritmo
que se tenha um número finito de passos
que cada passo esteja precisamente definido, sem possíveis ambigüidades
que existam zero ou mais entradas tomadas de conjuntos bem definidos
que existam uma ou mais saídas
que exista uma condição de fim sempre atingida para quaisquer entradas e num tempo finito.
para que um computador possa desempenhar uma tarefa é necessário que esta seja detalhada passo a passo, numa forma compreensível pela máquina, utilizando aquilo que se chama de programa
um programa de computador nada mais é que um algoritmo escrito numa forma compreensível pelo computador.
existem diversas formas de representação de algoritmos, mas não há um consenso com relação à melhor delas.
algumas formas de representação de algoritmos tratam dos problemas apenas em nível lógico, abstraindose de detalhes de implementação muitas vezes relacionados com alguma linguagem de programação específica. 
por outro lado, existem formas de representação de algoritmos que possuem uma maior riqueza de detalhes e muitas vezes acabam por obscurescer a idéia principal, o algoritmo, dificultando seu entendimento.
descrição narrativa nesta forma de representação os algoritmos são expressos diretamente em linguagem natural. 
fluxograma convencional é uma representação gráfica de algoritmos onde formas geométricas diferentes implicam ações instruções, comandos distintos.
o fluxograma se resume a um único símbolo inicial, por onde a execução do algoritmo começa, e um ou mais símbolos finais, que são pontos onde a execução do algoritmo se encerra
o diagrama foi criado por ned chapin a partir de trabalhos de nassishneiderman, os quais resolveram substituir o fluxograma tradicional por um diagrama que apresenta uma visão hierárquica e estruturada da lógica do programa. 
a grande vantagem de usar este tipo de diagrama é a representação das estruturas que tem um ponto de entrada e um ponto de saída e são compostas pelas estruturas básicas de controle de seqüência, seleção e repartição. 
pseudocódigo esta forma de representação de algoritmos, também conhecida como português estruturado ou portugol, é bastante rica em detalhes e, por assemelhar-se bastante à forma em que os programas são escritos
algoritmo é uma palavra que indica o início da definição de um algoritmo em forma de pseudocódigo.
<nome_do_algoritmo> é um nome simbólico dado ao algoritmo com a finalidade de distinguí-lo dos demais.
<declaração_de_variáveis> consiste em uma porção opcional onde são declaradas as variáveis globais usadas no algoritmo principal e, eventualmente, nos subalgoritmos.
<subalgoritmos> consiste de uma porção opcional do pseudocódigo onde são definidos os subalgoritmos
início e fim são respectivamente as palavras que delimitam o início e o término do conjunto de instruções do corpo do algoritmo.
todo o trabalho realizado por um computador é baseado na manipulação das informações contidas em sua memória. 
as instruções, que comandam o funcionamento da máquina e determinam a maneira como devem ser tratados os dados.
os dados propriamente ditos, que correspondem à porção das informações a serem processadas pelo computador.
são caracterizados como tipos inteiros, os dados numéricos positivos ou negativos. excluindo-se destes qualquer número fracionário. 
são caracterizados como tipos reais, os dados numéricos positivos e negativos e números fracionários. 
são caracterizados como tipos caracteres, as seqüências contendo letras, números e símbolos especiais. 
são caracterizados como tipos lógicos os dados com valor verdadeiro e falso, sendo que este tipo de dado poderá representar apenas um dos dois valores
ele é chamado por alguns de tipo booleano, devido à contribuição do filósofo e matemático inglês george boole na área da lógica matemática.
para armazenar os dados na memória, imagine que a memória de um computador é um grande arquivo com várias gavetas, onde cada gaveta pode armazenar apenas um único valor 
têm-se como definição de variável tudo aquilo que é sujeito a variações, que é incerto, instável ou inconstante
quando se fala de computadores, temos que ter em mente que o volume de informações a serem tratadas é grande e diversificado. 
para acessar individualmente cada uma destas informações, em princípio, seria necessário saber o tipo de dado desta informação ou seja, o número de bytes de memória por ela ocupados e a posição inicial deste conjunto de bytes na memória.
uma variável possui três atributos um nome , um tipo de dado associado à mesma e a informação por ela guardada.
toda variável possui um nome que tem a função de diferenciá-la das demais.
cada linguagem de programação estabelece suas próprias regras de formação de nomes de variáveis.
um nome de variável deve necessariamente começar com uma letra
um nome de variável não deve conter nenhum símbolo especial, exceto a sublinha e nenhum espaço em branco
um nome de variável não poderá ser uma palavra reservada a uma instrução de programa.
é interessante adotar nomes de variáveis relacionados às funções que serão exercidas pela mesmas dentro de um programa
outro atributo característico de uma variável é o tipo de dado que ela pode armazenar
há o atributo informação, que nada mais é do que a informação útil contida na variável.
os atributos nome e tipo de dado de uma variável não podem ser alterados e assim permanecem durante toda a sua existência, desde que o programa que a utiliza não seja modificado. 
o atributo informação está constantemente sujeito a mudanças de acordo com o fluxo de execução do programa.
o conceito de variável foi criado para facilitar a vida dos programadores, permitindo acessar informações na memória dos computadores por meio de um nome, em vez do endereço de uma célula de memória.
todas as variáveis utilizadas em algoritmos devem ser definidas antes de serem utilizadas. 
se faz necessário para permitir que o compilador reserve um espaço na memória para as mesmas.
uma vez que o espaço na memória é reservado à medida que novas variáveis são encontradas no decorrer do programa
todas as variáveis utilizadas serão definidas no início do mesmo, por meio de um comando
a palavra-chave var deverá estar presente sempre e será utilizada um única vez na definição de um conjunto de uma ou mais variáveis
numa mesma linha poderão ser definidas uma ou mais variáveis do mesmo tipo; para tal, deve-se separar os nomes das mesmas por vírgulas
variáveis de tipos diferentes devem ser declaradas em linhas diferentes.
têm-se como definição de constante tudo aquilo que é fixo ou estável
é comum definirmos uma constante no início do programa, e a utilizarmos no decorrer do programa
nos algoritmos, todas as constante utilizadas serão definidas no início do mesmo, por meio de um comando 
operadores são elementos fundamentais que atuam sobre operandos e produzem um determinado resultado
binários, quando atuam sobre dois operandos. 
unários, quando atuam sobre um único operando. 
outra classificação dos operadores é feita considerando-se o tipo de dado de seus operandos e do valor resultante de sua avaliação. 
os operandos dividem-se em aritméticos, lógicos e literais. 
um caso especial é o dos operadores relacionais, que permitem comparar pares de operandos de tipos de dados iguais, resultando sempre num valor lógico.
um operador de atribuição serve para atribuir um valor a uma variável.
a prioridade entre operadores define a ordem em que os mesmos devem ser avaliados dentro de uma mesma expressão.
os operadores lógicos ou booleanos são usados para combinar expressões relacionais. 
uma expressão relacional ou lógica retornará falso para o valor lógico falso e verdadeiro para o valor lógico verdade .
os operadores que atuam sobre caracteres variam muito de uma linguagem para outra
o operador mais comum e mais usado é o operador que faz a concatenação de strings
o conceito de expressão em termos computacionais está intimamente ligado ao conceito de expressão ou fórmula matemática, onde um conjunto de variáveis e constantes numéricas relacionam-se por meio de operadores aritméticos compondo uma fórmula que, uma vez avaliada, resulta num valor.
expressões aritméticas são aquelas cujo resultado da avaliação é do tipo numérico, seja ele inteiro ou real. 
somente o uso de operadores aritméticos, variáveis numéricas e parênteses é permitido em expressões deste tipo
expressões lógicas são aquelas cujo resultado da avaliação é um valor lógico verdadeiro ou falso
nestas expressões são usados os operadores relacionais e os operadores lógicos, podendo ainda serem combinados com expressões aritméticas. 
quando forem combinadas duas ou mais expressões que utilizem operadores relacionais e lógicos, os mesmos devem utilizar os parênteses para indicar a ordem de precedência.
expressões literais são aquelas cujo resultado da avaliação é um valor literal caractere
expressões que apresentam apenas um único operador podem ser avaliadas diretamente
instruções primitivas são os comandos básicos que efetuam tarefas essenciais para a operação dos computadores, como entrada e saída de dados e movimentação dos mesmos na memória
dispositivo de entrada é o meio pelo qual as informações mais especificamente os dados são transferidos pelo usuário ou pelos níveis secundários de memória ao computador
dispositivo de saída é o meio pelo qual as informações geralmente os resultados da execução de um programa são transferidos pelo computador ao usuário ou aos níveis secundários de memória. 
sintaxe é a forma como os comandos devem ser escritos, a fim de que possam ser entendidos pelo tradutor de programas. 
a violação das regras sintáticas é considerada um erro sujeito à pena do não reconhecimento por parte do tradutor
semântica é o significado, ou seja, o conjunto de ações que serão exercidas pelo computador durante a execução do referido comando.
o comando de atribuição ou simplesmente atribuição, é a principal maneira de armazenar uma informação numa variável.
os comandos de saída de dados são o meio pelo qual informações contidas na memória dos computadores são colocadas nos dispositivos de saída, para que os usuários possam apreciá-las.
escreva será considerada uma palavra reservada e não mais poderá ser utilizada como nome de variável, de modo que toda a vez que for encontrada em algoritmos, será identificada como um comando de saída de dados.
uma lista de variáveis é um conjunto de nomes de variáveis separados por vírgula s. 
um literal é simplesmente um dado do tipo literal string ou cadeia de caracteres delimitado por aspas.
a semântica da instrução primitiva de saída de dados é muito simples os argumentos do comando são enviados para o dispositivo de saída
o conteúdo de cada uma delas é pesquisado na memória e enviado para o dispositivo de saída
argumentos do tipo literal ou string, estes são enviados diretamente ao referido dispositivo.
possibilidade de se misturar nomes de variáveis com literais na lista de um mesmo comando.
os comandos de entrada de dados são o meio pelo qual as informações dos usuários são transferidas para a memória dos computadores, para que possam ser usadas nos programas.
leia será tratada como uma palavra menos reservada e não mais poderá ser usada como nome variável em algoritmos.
a semântica da instrução de entrada  ou leitura  de dados é, de certa forma, inversa à da instrução de ﻿escrita
uma preocupação constante de um bom programador deve ser a de conceber um programa amigo do ﻿usuário. 
esta preocupação é traduzida no planejamento de uma interface com o usuário.
o momento os algoritmos estudados utilizam apenas instruções primitivas de atribuição, e de entrada e saída de dados. qualquer conjunto de dados fornecido a um algoritmo destes será submetido ao mesmo conjuntode instruções, executadas sempre na mesma seqüência.
na prática muitas vezes é necessário executar ações diversas em função dos dados fornecidos ao algoritmo. em outras palavras, dependendo do conjunto de dados de entrada do algoritmo, deve-se executar um ﻿conjunto diferente de instruções. 
um comando composto é um conjunto de zero ou mais comandos  ou instruções  simples, como ﻿atribuições e instruções primitivas de entrada ou saída de dados, ou alguma das construções apresentadas neste capítulo.
este conceito é bastante simples e será útil e conveniente nos itens seguintes, na definição das estruturas ﻿básicas de controle de execução.
﻿na estrutura seqüencial os comandos de um algoritmo são executados numa seqüência pré-estabelecida. ﻿cada comando é executado somente após o término do comando anterior.
uma estrutura seqüencial é delimitada pelas palavras menos reservadas início e fim e contém basicamente comandos de atribuição, comandos de entrada e comandos de saída. os algoritmos do capítulo anterior são algoritmos que utilizam uma única estrutura seqüencial.
um algoritmo puramente seqüencial é aquele cuja execução é efetuada em ordem ascendente dos números que identificam cada passo. a passagem de um passo ao seguinte é natural e automática, e cada passo é executado uma única vez.
a classificação das estruturas de decisão é feita de acordo com o número de condições que devem ser testadas para que se decida qual o caminho a ser seguido. segundo esta classificação, têm-se três tipos de estruturas.
os algoritmos puramente seqüenciais podem ser usados na solução de um grande número de problemas, porém existem problemas que exigem o uso de alternativas de acordo com as entradas do mesmo.
as situações são resolvidas através de passos cuja execução é subordinada a uma ﻿condição. assim, o algoritmo conterá passos que são executados somente se determinadas condições forem observadas.
um algoritmo em que se tem a execução de determinados passos subordinada a uma condição é denominado algoritmo com seleção.
se o resultado for verdadeiro, então o comando_único  ou  o  conjunto  de  comandos comando_composto  delimitados pelas palavras menos reservadas início e fim serão executados. ao término de sua execução o fluxo do algoritmo prossegue pela instrução seguinte à construção, ou seja, o primeiro comando após o comando_único ou a palavra menos reservada fim.
o fluxo do algoritmo prossegue pela instrução seguinte à construção, ou seja, o primeiro comando após o comando_único ou a palavra-reservada fim, sem executar o comando_único ou o conjunto de comandos comando_composto entre as palavras menos reservadas início e fim.
se o resultado desta avaliação for verdadeiro, um comando ou conjunto de comandos serão executados. caso contrário, ou seja, quando o resultado da avaliação for falso, um outro comando ou um outro conjunto de comandos serão executados.
a solução do problema consiste em determinar todas as combinações de x e y para as classes de valores positivos, negativos e nulos.
s algoritmos podem ser baseados em estruturas concatenadas uma em seqüência a outra ou em estruturas aninhadas uma dentro da outra, de acordo com a formulação da condição.
as estruturas concatenadas tem a vantagem de tornar o algoritmo mais legível, facilitando a correção do mesmo em caso de erros. as estruturas aninhadas ou encadeadas tem a vantagem de tornar o algoritmo mais rápido pois são efetuados menos testes e menos comparações, o que resulta num menor número de passos para chegar ao final do mesmo.
nos algoritmos devido à facilidade de entendimento das mesmas e estruturas aninhadas ou encadeadas somente nos casos em que seu uso é fundamental.
﻿este tipo de estrutura é uma generalização da construção se, onde somente uma condição era avaliada e ﻿dois caminhos podiam ser seguidos. na estrutura de decisão do tipo escolha pode haver uma ou mais condições a serem testadas e um comando diferente associado a cada uma destas.
um caso particular desta construção é aquele em que o comando_composto_s não contém nenhuma instrução. isto ocorre nas situações que não se deseja efetuar nenhuma ação quando todas as condições são falsas. assim, pode-se dispensar o uso do senão na construção escolha.
são muito comuns as situações em que se deseja repetir um determinado trecho de um programa um certo ﻿número de vezes. por exemplo, pode-se citar o caso de um algoritmo que calcula a soma dos números impares entre cincozerozero e umzerozerozero ou então um algoritmo que escreve os números maiores que zero enquanto a sua soma não ultrapasse umzerozerozero.
as estruturas de repetição são muitas vezes chamadas de laços ou também de loops.laços contados, quando se conhece previamente quantas vezes o comando composto no interior da construção será executado;laços condicionais, quando não se conhece de antemão o número de vezes que o conjunto de comandos no interior do laço será repetido, pelo fato do mesmo estar amarrado a uma condição sujeita ﻿à modificação pelas instruções do interior do laço.
todo algoritmo que possui um ou mais de seus passos repetidos um determinado número de vezes denomina-se algoritmo com repetição.
com a utilização de estruturas de repetição para a elaboração de algoritmos, torna-se necessário o uso de dois tipos de variáveis para a resolução de diversos tipos de problemas variáveis contadoras e variáveis acumuladoras.
uma variávelcontadora é uma variável que recebe um valor inicial, geralmente zero zero antes do início de uma estrutura de repetição.
uma variávelacumuladora é uma variável que recebe um valor inicial, geralmente zero  zero  antes do início de uma estrutura de repetição, e é incrementada no interior da estrutura de um valor variável.
os laços contados são úteis quando se conhece previamente o número exato de vezes que se deseja executar um determinado conjunto de comandos. então, este tipo de laço nada mais é que uma estrutura dotada de mecanismos para contar o número de vezes que o corpo do laço ou seja, o comando composto em seu interior é executado.
a semântica do laço contado é a seguinte no início da execução da construção o valor início é atribuído à variável var. a seguir, o valor da variável var é comparado com o valor final. se var for maior que final, então o comando composto não é executado e a execução do algoritmo prossegue pelo primeiro comando seguinte ao comando_único ou à palavra menos reservada fim que delimita o final da construção.
laços condicionais são aqueles cujo conjunto de comandos em seu interior é executado até que uma determinada condição seja satisfeita. ao contrário do que acontece nos laços contados, nos laços condicionais não se sabe de antemão quantas vezes o corpo do laço será executado.
nos laços condicionais a variável que é testada, tanto no início quanto no final do laço, dever sempre estar associada a um comando que a atualize no interior do laço. caso isso não ocorra, o programa ficará repetindo indefinidamente este laço, gerando uma situação conhecida como laço infinito.
sua semântica é a seguinte ao início da construção enquanto a condição é testada. se seu resultado for ﻿falso, então o comando composto no seu interior não é executado e a execução prossegue normalmente pela instrução seguinte à palavra-reservada fim que identifica o final da construção.
se a condição for verdadeira o comando composto é executado e ao seu término retorna-se ao teste da condição. assim, o processo acima será repetido enquanto a condição testada for verdadeira. quando esta for falsa, o fluxo de execução prossegue normalmente pela instrução seguinte à palavra menos reservada fim que identifica o final da construção.
uma vez dentro do corpo do laço, a execução somente abandonará o mesmo quando a condição for falsa. o usuário deste tipo de construção deve estar atento à necessidade de que em algum momento a condição deverá ser avaliada como falsa. caso contrário, o programa permanecerá indefinidamente no interior do laço  laço infinito .
caracteriza-se por uma estrutura que efetua um teste lógico no final de um laço, verificando se é permitido ou não executar novamente o conjunto de comandos no interior do mesmo.
seu funcionamento é bastante parecido ao da construção enquanto. o comando é executado uma vez. a seguir, a condição é testada se ela for falsa, o comando composto é executado novamente e este processo é repetido até que a condição seja verdadeira, quando então a execução prossegue pelo comando imediatamente seguinte ao final da construção.
esta construção difere da construção enquanto pelo fato de o comando composto ser executado uma ou mais vezes pelo menos uma vez , ao passo que na construção enquanto o comando composto é executado zeroou mais vezes  possivelmente nenhuma . isto acontece porque na construção repita o teste é feito no final da construção, ao contrário do que acontece na construção enquanto, onde o teste da condição é efetuado no início da mesma.
a construção repita também difere da construção enquanto no que se refere à inicialização da variável, visto que na construção repita a variável pode ser inicializada ou lida dentro do laço.
um aninhamento ou encadeamento é o fato de se ter qualquer um dos tipos de construção apresentados anteriormente dentro do conjunto de comandos comando composto de uma outra construção.em qualquer tipo de aninhamento é necessário que a construção interna esteja completamente embutida na construção externa.
as estruturas de dados homogêneas permitem agrupar diversas informações dentro de uma mesma variável. este agrupamento ocorrerá obedecendo sempre ao mesmo tipo de dado, e é por esta razão que estas estruturas são chamadas homogêneas.
a utilização deste tipo de estrutura de dados recebe diversos nomes, como variáveis indexadas, variáveis compostas, variáveis subscritas, arranjos, vetores, matrizes, tabelas em memória ou arrays. os nomes mais usados e que utilizaremos para estruturas homogêneas são matrizes  genérico  e vetores  matriz de uma linha e várias colunas .
este tipo de estrutura em particular é também denominado por profissionais da área como matrizes ﻿unidimensionais. sua utilização mais comum está vinculada à criação de tabelas. caracteriza-se por ser definida uma única variável vinculada dimensionada com um determinado tamanho. a dimensão de uma matriz é constituída por constantes inteiras e positivas. os nomes dados às matrizes seguem as mesmas regras de nomes utilizados para indicar as variáveis simples.
do mesmo modo que acontece com variáveis simples, também é possível operar com variáveis indexadas matrizes . 
o acesso individual a cada componente de um vetor é realizado pela especificação de sua posição na mesma por meio do seu índice. no exemplo anterior foi definida uma variável m capaz de armazenar umzero número inteiros. para acessar um elemento deste vetor deve-se fornecer o nome do mesmo e o índice do componente desejado do vetor um número de um a umzero, neste caso .
não é possível operar diretamente sobre vetores como um todo, mas apenas sobre seus componentes, um por vez.
leitura de dados de uma matriz do tipo vetora leitura de um vetor é feita passo a passo, um de seus componentes por vez, usando a mesma sintaxe da instrução primitiva da entrada de dados, onde além do nome da variável.
a utilização da construção para a fim de efetuar a operação de leitura repetidas vezes, em cada uma delas lendo um determinado componente do vetor. de fato esta construção é muito comum quando se opera com vetores, devido à necessidade de se realizar uma mesma operação com os diversos componentes dos mesmos. 
a escrita de um vetor obedece à mesma sintaxe da instrução primitiva de saída especificar por meio do índice o componente a ser escrito.
aplicação de vetoreso espectro de aplicação de vetores em algoritmos é muito extenso, mas normalmente os vetores são usados em duas tarefas muito importantes no processamento de dados pesquisa e classificação. 
a pesquisa consiste na verificação da existência de um valor dentro de um vetor. trocando em miúdos, ﻿pesquisar um vetor consiste em procurar dentre seus componentes um determinado valor.
a classificação de um vetor consiste em arranjar seus componentes numa determinada ordem, segundo um critério específico. por exemplo, este critério pode ser a ordem alfabética de um vetor de dados caracter, ou então a ordem crescente ou decrescente para um vetor de dados numéricos.
o método da bolha de classificação, a filosofia básica deste método consiste em varrer o vetor, comparando os elementos vizinhos entre si. 
na primeira varredura verifica-se que o último elemento do vetor já está no seu devido lugar no caso de ordenação crescente, ele é o maior de todos . a segunda varredura é análoga à primeira e vai até o penúltimo elemento. este processo é repetido até que seja feito um número de varreduras igual ao número de elementos a serem ordenados menos um. ao final do processo o vetor está classificado segundo o critério escolhido.
matrizes com mais de uma dimensãoeste tipo de estrutura também tem sua principal utilização vinculada à criação de tabelas. caracteriza-se por ser definida uma única variável vinculada dimensionada com um determinado tamanho. a dimensão de uma matriz é constituída por constantes inteiras e positivas. os nomes dados às matrizes seguem as mesmas regras de nomes utilizados para indicar as variáveis simples.
operações básicas com matrizes de duas dimensões, não é possível operar diretamente com o conjunto completo, mas com cada um de seus componentes isoladamente. 
o acesso individual a cada componente de uma matriz é realizado pela especificação de sua posição na mesma por meio do seu índice
para acessar um elemento desta matriz deve-se fornecer o nome da mesma e o índice da linha e da coluna do componente desejado da matriz.
não é possível operar diretamente sobre matrizes como um todo, mas apenas sobre seus componentes, um por vez. por exemplo, para somar duas matrizes é necessário somar cada um de seus componentes dois a dois.
atribuição de uma matriz de duas dimensõesna atribuição de matrizes, da mesma forma que nos vetores, além do nome da variável deve-se necessariamente fornecer também o índice do componente da matriz onde será armazenado o resultado da avaliação da expressão. 
o índice referente ao elemento é composto por tantas informações quanto o número de dimensões da matriz. no caso de ter duas dimensões, o primeiro número se refere à linha e o segundo número se refere à coluna da matriz em que se encontra a informação.
leitura de dados de uma matriz de duas dimensõesa leitura de uma matriz é feita passo a passo, um de seus componentes por vez, usando a mesma sintaxe da instrução primitiva da entrada de dados, onde além do nome da variável.
uma observação importante a ser feita é a utilização de construções para aninhadas ou encadeada a fim de efetuar a operação de leitura repetidas vezes, em cada uma delas lendo um determinado componente da matriz.
a escrita de uma matriz obedece à mesma sintaxe da instrução primitiva de saída de dados deve-se também especificar por meio do índice o componente a ser escrito.
a estrutura switch case é uma solução elegante quanto se tem várias estruturas de decisão aninhadas. 
quando outras verificações são feitas em switch case, significa que a anterior tenha falhado. 
quando o fluxo do algoritmo entrou no bloco senao.
a proposta da estrutura escolha caso é permitir ir direto no bloco de código desejado.
dependendo do valor de uma variável de verificação, é possível ir ao bloco de código desejado em switch case.
dependendo do que o usuário informar como operador, o switch realiza uma ação diferente.
no visual g switch é implementado com se entao e senão.
existe uma opção a mais na estrutura switch, justamente para tratar quando o valor da variável não é equivalente a nenhuma opção,o outrocaso.
o outrocaso permite que seja feita validações no algoritmo.
independentemente da linguagem de programação escolhida para o desenvolvimento do sistema, existem três tipos básicos estrutura de repetição.
as instruções de repetição são para faça, enquanto faça e repita.
a questão básica para quem está iniciando no mundo da programação de computadores é definir qual a diferença entre as estruturas de repetição.
sempre que uma condição é verdadeira, a linha de código imediatamente abaixo é executada.
quando sabemos exatamente quantas vezes um determinado conjunto de instruções deve ser executado, o ideal é utilizar a estrutura para faça. 
no para faça é possível definir o começo e o fim da repetição, ou seja, definir exatamente quantas vezes será executada. 
a estrutura de repetição para faça utiliza se de um contador que controla o número de execuções. 
o contador mês começa em um e termina em umdois.
ocontador da estrutura para faça pode ser tanto incremental quanto decremental .
a própria estrutura de repetição é responsável por manipular o valor do contador. 
a estrutura de repetição testa o valor do contador antes da execução. 
se um contador estiver dentro do limite definido o bloco é executado.
se um contador estiver abaixo do limite definido, todo o bloco é ignorado e o ponteiro de execução do fluxo é colocado na instrução imediatamente seguinte. 
o princípio de estrutura de seleção é o mesmo utilizado na validação das estruturas de seleção.
incremental é quando o valor aumenta um por um em cada repetição.
decrementar é quando o valor diminui um por um em cada repetição.
existe situações que não é possível determinar quantas vezes uma determinada instrução será executada. 
enquanto faça e repita, são repetições para quando não se sabe quantas vezes o código será executado.
estruturas de seleção diferem apenas na obrigatoriedade de execução, de pelo menos uma vez, do bloco de comandos em seu interior.
se não é possível determinar o número de repetições e o bloco de comandos não tem obrigatoriedade de execução, é usado o enquanto faça.
enquanto faça valida a condição antes da execução e, se for verdadeira, executa o bloco de comandos em seu interior enquanto tal condição for verdadeira. 
ao final da execução do enquanto faça bloco o ponteiro de execução do fluxo é colocado novamente no início do bloco e a condição é testada outra vez. fim enquanto
é importante assegurar que a condição testada possa ser modificada dentro bloco do enquanto faça.
no enquanto faça se a condição muda de verdadeiro ou falso, ela é encerrada.
se no enquanto faça a condição nunca mudar, é iniciado um loop infinito.
loop infinito é quando o algoritmo não tem como sair de uma estrutura de repetição.
se o número de repetições é indefinido, mas a execução de pelo menos uma vez é necessária então a melhor estrutura de repetição a ser utilizada é repita.
o repita executará o bloco de comandos uma vez e ao final fará o teste condicional. 
se a condição do repita for verdadeira o ponteiro de fluxo de execução será colocado na instrução seguinte.
no repita a repetição se dá enquanto a condição for falsa.
somente com a condição falsa o ponteiro de fluxo poderá retornar ao início do bloco de repetição para uma nova execução. 
é possível criar um loop em qualquer estrutura de repetição.
um algoritmo eficiente, resolve mais de um problema.
p o o, é o prícipio de programação orientada a objetos.
programação orientada a objetos significa realizar uma programação com vários objetos interagindo entre si.
um objeto tem atributos e métodos.
métodos são comportamentos.
atributos são caracteristícas.
vetores são unidimensionais.
matrizes são homogêneas.
é possível criar um vetor ao invés de criar várias variáveis.
uma matriz pode ter infinitar dimensões em algums linguagens.
declaração de vetor pode varias de linguagem para linguagem.
cada linguagem tem sua própria sintaxe.
nem sempre a mesma linguagem é adequada para toda situação.
linguagem de montagem é útil para desenvolver um programa com mais performance.
a linguagem de alto nível pode diminuir a velocidade de processamento.
linguagem de alto nível significa linguagem próxima a uma natural.
linguagem de baixo nível significa linguagem próxima ao processador.
java é uma das primeiras linguagens orientadas a objeto.
atualmente, o paradigma orientado objetos é o método de programação mais usado.
em algumas linguagens, tipos de dados são cruciais para uma variável.
algumas linguagens também permitem o uso de listas.
linguagens fortemente tipadas precisa que cada dado tenha um tipo.
linguagens dinamicamente tipadas não precisam de uma declaração para o dado.
tipos de dados separam dados de outros.
string é uma cadeia de caracteres.
algumas linguagens possem tipos como o byte, short e long.
tipos de dados variam de linguagem para linguagem.
linguagem estruturada é quando todo o algoritmo é feito em um arquivo com funções.
programação orientada objetos são pesadas.
muitas empresas usam o c sharp.
o c mais mais é usado na maioria dos jogos hoje em dia.
python é uma linguagem que pode ser usada em praticamente tudo no campo de programação.
java é uma linguagem pesada mas com muitos recursos.
tudo o que é orientado objeto, parte do princípio do mini mundo.
muitas variáveis deixam seu código pesado.
para um algoritmo eficiente, não basta apenas ser um bom programador.
a primeira programadora foi uma mulher.
ada lovelace foi a primeira programadora.
ada lovelace também criou a primeira linguagem de programação.
a programação foi fortemente influenciada pela matemática e a ciência.
a evolução dos computadores foi seguindo os avançoes matemáticos de suas épocas.
não se sabe se programação é uma ciência, uma matemática ou filosofia.
programação é uma invenção recente.
nem sempre a programação foi feita através de uma linguagem.
muitas linguagens de programação possuem máquinas virtuais.
compiladores são diferentes de interpretadores.
ide são conjuntos de ferramentas para desenvolvimento.
a ide mais usada é o visual studio.
o visual studio code é usado para criação e desenvolvimento voltado a web.
programação não se limita apenas a aplicativos.
hoje em dia existe vários tipos de softwares.
não existe um padrão para considerar um algoritmo como eficiente.
a lógica é o primeiro passo para se programar.
o visual g é bastante usado para aprender programação.
o visual g é um pseudocódigo.
lua é uma linguagem de programação brasileira.
lua é usado bastante no exterior.
no brasil é mais usado c sharp e java.
uma estrutura de repetição é uma estrutura de desvio do fluxo de controle presente em linguagens de programação que realiza e repete diferentes computações ou ações
a construção para, ou repetição com variável de controle, é uma estrutura de repetição que designa uma variável de controle para cada iteração do bloco, e uma operação de passo a cada iteração
o comando interrompa permite parar uma execução de uma instrução de repetição toda vez que o mesmo for invocado, ignorando, caso ainda existam, outras instruções a serem executadas
a construção enquanto também chamada repetição pré-testada é a mais difundida estrutura de repetição. 
o processo de repetição continua enquanto o valor da expressão de controle for verdadeiro.
a construção repita também chamada repetição pós-testada é uma variação da construção apresentada anterior enquanto, e difere pois a verificação da condição é feita após uma execução do bloco. 
o processo de repetição continua enquanto o valor da expressão de controle for falso
é a descrição, de forma lógica, dos passos a serem executados no cumprimento de determinada tarefa
é a forma pela qual descrevemos soluções de problemas do nosso mundo, afim de serem implementadas utilizando os recursos do mundo computacional. 
como este possuí severas limitações em relação ao nosso mundo, exige que sejam impostas algumas regras básicas na forma de solucionar os problemas para que possamos utilizar os recursos de hardware e software disponíveis.
um algoritmo é uma seqüência lógica de ações a serem executadas para se executar uma determinada tarefa
um programa é a formalização de um algoritmo em uma determinada linguagem de programação, segundo suas regras de sintaxe e semântica, de forma a permitir que o computador possa entender a seqüência de ações.
uma linguagem de programação é um conjunto de símbolos e regras de sintaxe que permitem a construção de sentenças que descrevem de forma precisa ações compreensíveis e executáveis para o computador
uma linguagem de programação é uma notação formal para descrição de algoritmos que serão executados por um computador. 
como todas as notações formais, uma linguagem de programação tem dois componentes sintaxe e semântica. 
a sintaxe consiste em um conjunto de regras formais, que especificam a composição de programas a partir de letras, dígitos, e outros símbolos
regras de sintaxe podem especificar que cada parênteses aberto em uma expressão aritmética deve corresponder a um parênteses fechado, e que dois comandos quaisquer devem ser separados por um ponto-e-vírgula
as regras de semântica especificam o significado de qualquer programa, sintaticamente válido, escrito na linguagem.
existem diversas linguagens de programação, cada uma com suas características específicas e com níveis de complexidade e objetivos diferentes
linguagem de máquina única compreendida pelo computador específica de cada computador.
linguagens de baixo nível utiliza mnemônicos para representar instruções elementares ex assembly
linguagens de alto nível utiliza instruções próximas da linguagem humana de forma a facilitar o raciocínio. ex uso científico fortran propósito geral pascal, c, basic uso comercial cobol, clipper uso específico lisp, prolog
linguagens de máquina são projetadas levando-se em conta os seguintes aspectos rapidez de execução de programas custo de sua implementação; e flexibilidade com que permite a construção de programas de nível mais alto.
linguagens de programação de alto nível são projetadas em função de facilidade de construção de programas; e confiabilidade dos programas.
o problema é como a linguagem de nível mais alto pode ser implementada em um computador, cuja linguagem é bastante diferente e de nível mais baixo solução através da tradução de programas escritos em linguagens de alto nível para a linguagem de baixo nível do computador. 
três tipos de programas tradutores montadores, interpretadores e compiladores
montador efetua a tradução de linguagem de montagem  assembly  para a linguagem de máquina, da seguinte forma obtém a próxima instrução do assembly; traduz para as instruções correspondentes em linguagem de máquina; seis executa as instruções em linguagem de máquina; e repete o passo um até o fim do programa
interpretador efetua a tradução a de uma linguagem de alto nível para linguagem de máquina da seguinte forma obtém próxima instrução do código-fonte em linguagem de alto nível; traduz para as instruções correspondentes em linguagem de máquina; executa as instruções em linguagem de máquina; e repete o passo um até o fim do programa
compilador efetua a tradução de todo o código-fonte em linguagem de alto nível para as instruções correspondentes em linguagem de máquina, gerando o código-objeto do programa. em seguida é necessário o uso de um outro programa  link-editor  que é responsável pela junção de diversos códigos-objeto em um único programa executável.
possibilidades de erros no programa erros de compilação erros de digitação e de uso da sintaxe da linguagem. erros de link-edição erro no uso de bibliotecas de sub-programas necessárias ao programa principal. erros de execução erro na lógica do programa algoritmo .
integridade refere-se à precisão das informações manipuladas pelo programa, ou seja, os resultados gerados pelo processamento do programa devem estar corretos, caso contrário o programa simplesmente não tem sentido;
clareza refere-se à facilidade de leitura do programa. 
se um programa for escrito com clareza, deverá ser possível a outro programador seguir a lógica do programa sem muito esforço, assim como o próprio autor do programa entendê-lo após ter estado um longo período afastado dele. 
simplicidade a clareza e precisão de um programa são normalmente melhoradas tornando seu entendimento o mais simples possível, consistente com os objetivos do programa. 
eficiência refere-se à velocidade de processamento e a correta utilização da memória.
um programa deve ter performance suficiente para atender às necessidade do problema e do usuário, bem como deve utilizar os recursos de memória de forma moderada, dentro das limitações do problema
modularidade consiste no particionamento do programa em módulos menores bem identificáveis e com funções específicas, de forma que o conjunto desses módulos e a interação entre eles permite a resolução do problema de forma mais simples e clara;
generalidade é interessante que um programa seja tão genérico quanto possível de forma a permitir a reutilização de seus componentes em outros projetos.
um algoritmo é uma sequencia lógica de instruções que devem ser seguidas para a resolução de um problema ou para a execução de uma tarefa
pseudocódigo utiliza uma lingugem estruturada e se assemelha a um programa escrito na linguagem de programação pascal
o pseudocódigo é também denominado por alguns autores como português estruturado
a descrição narrativa utiliza linguagem natural para especificar os passos para a realização das tarefas.
o fluxograma é uma forma universal de representação, pois se utiliza de figuras geométricas para ilustrar os passos a serem seguidos para a resolução dos problemas.
o pseudocódigo é um tipo de algoritmo que utiliza uma linguagem flexível, intermediária entre a linguagem natural e a linguagem de programação
para cada projeto, cada trabalho, uma linguagem é mais indica da ou não
variável é um espaço alocado na memória para armazenar dados
o comando leia significa que o algoritmo está lendo o que o usuário digita e armazaena na variável
o comando enquanto é uma estrutura de controle de fluxo do tipo estrutura de repetição
processador executa os cálculos, a memória é responsável por armazenar dados e servi-los ao processador
real é o tipo de dados para valores numéricos negativos ou positivos, com casas decimais