um algoritmo é formalmente uma seqüência finita de passos que levam a execução de uma  tarefa. 
podemos  pensar  em  algoritmo  como  uma  receita,  uma  seqüência  de  instruções  que  dão  cabo  de  uma  meta  específica
o algoritmo pode ser usado como uma ferramenta genérica para representar a solução de tarefas independente do desejo de automatizá-las
um algoritmo é uma receita para um processo computacional e consiste de uma série de operações primitivas, interconectadas devidamente, sobre um conjunto de objetos
algoritmo pode ter vários níveis de abstrações de acordo com a necessidade de representar ou encapsular detalhes inerentes às linguagens de programação
um algoritmo é uma abstração da realidade
um algoritmo é formalmente uma seqüência finita de passos que levam a execução de uma  tarefa
m algoritmo é um procedimento computacional bem definido que toma como parâmetro de entrada um valor ou um conjunto de valores e que produz como saída um valor  ou um conjunto de valores 
uma seqüência de passos computacionais que transformam um input num output 
algoritmo é uma ferramenta que permite resolver um problema computacional específico
um algoritmo é a descrição de um padrão de comportamento, expresso em termos de um repertório bem definido e finito de ações primitivas, as quais damos por certo que podem ser executadas
um algoritmo, para ser assim definido, precisa um.  ter início e fim dois.  ser descrito em termos de ações não ambíguas e bem definidas três.  que as ações sigam uma seqüência ordenada
os algoritmos são descritos em uma linguagem chamada pseudo-código
os algoritmos são independentes das linguagens de programação
o algoritmo deve ser fácil de se interpretar e fácil de codificar.
ele deve ser o intermediário entre a linguagem falada e a linguagem de programação
existem  várias  pseudolinguagens  de  programação  como  mostra  a  referência  dois  que  utiliza  o  portugol português mais algol maispascal 
um algoritmo é uma seqüência lógica de ações a serem executadas para se executar uma determinada tarefa
um programa é a formalização de um algoritmo em uma determinada linguagem de programação, segundo suas regras de sintaxe e semântica, de forma a permitir que o computador possa entender a seqüência de ações
existem  diversas  linguagens  de  programação,  cada  uma  com  suas  características  específicas e com níveis de complexidade e objetivos diferentes linguagem de máquina única compreendida pelo computador. específica de cada computador. · linguagens de baixo nível ex. assembly · linguagens de alto nível utiliza instruções próximas da linguagem humana de forma a facilitar o raciocínio
dentificadores representam  os  nomes  escolhidos  para  rotular  as  variáveis,  procedimentos e funções
constante  constant  uma constante  const , como sugere o nome, é um ﻿identificador que armazena um valor fixo e imutável, durante a execução de um algoritmo ou programa
podemos associá-lo a uma posição de memória  endereço  que tem um conteúdo fixo
este conteúdo poderá ser um número  real ou inteiro , uma cadeia de caracteres texto ou um valor lógico será definido abaixo 
variável  variable  uma variável  var  é um identificador que, como sugere o nome, possui o conteúdo variável durante a execução de um algoritmo ou programa
podemos associar uma variável a uma posição da memória  endereço 
poderemos armazenar  guardar  neste endereço qualquer valor do conjunto de valores de um tipo básico associado a ela.
uma variável pode assumir vários valores diferentes ao longo da execução do programa, mas, em um determinado momento, possui apenas um valor
inteiro int, short int ou long int qualquer número inteiro, negativo, nulo ou positivo.
real float ou double qualquer número real, negativo, nulo ou positivo
caracter char qualquer conjunto de caracteres alfanuméricos.
texto ou cadeia de caracteres string uma variável deste tipo poderá armazenar uma cadeia de caracteres de qualquer tamanho
lógico boolean tipo especial de variável que armazena apenas os valores v e f, onde v ﻿representa verdadeiro e falso
palavras reservadas são palavras que terão uso específico no nosso pseudo-código e que não deverão ser ﻿usadas como identificadores, para não causar confusão na interpretação
comando simplesé uma instrução simples
comando composto um grupo de comandos simples que executam alguma tarefa
no algoritmo é preciso representar a troca de informações que ocorrerá entre o mundo da máquina e o nosso mundo, para isso, devemos utilizar comandos de entrada e saída
para que possamos obter dados do meio exterior para uso do computador memória principal , estes têm de vir através dos dispositivos de entrada
o diagrama tradicional é uma forma padronizada para representar os passos lógicos de um determinado processamento
com o diagrama podemos definir uma seqüência de símbolos, com significado bem definido, portanto, sua principal função é a de facilitar a visualização dos passos de um processamento
ao criar as constantes e variáveis, utilizar nomes significativos e comentar, se necessário for;
utilizar identação  três espaços como sugestão , para mostrar a estrutura lógica e seqüência de comandos, quando usando o nosso pseudo-código. com o dns não é preciso
utilizar, opcionalmente, um dicionário de dados que especifique formalmente o conteúdo de cada constante e variável de todo algoritmo ou programa
utilizar parênteses para evitar ambigüidade nas expressões
seqüência grupo de comandos em que são executados um após o outro.
também chamada de estrutura de decisão ou de processamento condicional, a estrutura de seleção é utilizada quando a execução de um comando  ou uma seqüência de comandos  depende de um teste anterior  uma ou mais comparações 
a seleção pode ser simples ou composta
seleção simples ﻿quando a execução de um comando ou de uma seqüência de comandos depender de uma condição verdadeira, e não há comandos a executar se a condição for falsa
seleção composta quando se executa um comando  ou seqüência de comando  se uma condição é verdadeira, e se executa um outro comando ou seqüência de comandos se a condição é falsa
a estrutura de seleção permite o aninhamento, ou seja, o comando a ser executado dentro de uma seleção  por exemplo, no  senão  pode ser uma outra seleção
uma boa identação será fundamental para o entendimento de algoritmo quando utilizando pseudo-código
laço enquanto while a estrutura de repetição enquanto é utilizada quando um conjunto de comandos deve ser executado repetidamente, enquanto uma determinada condição  expressão lógica  permanecer verdadeira
a estrutura de seleção, ela permite o aninhamento de repetições, ou seja, a existência de uma estrutura de repetição dentro de outra
escape do laço-abandone exit   comando abandone força uma saída de um laço de repetição
sinalizador  flags  o sinalizador ou flag é um valor que, quando lido, sinaliza a saída de um laço, o fim de um programa, o fim de uma lista de dados, ou o fim de um arquivo
desenvolver o algoritmo em diferentes fases de detalhamento crescente, do geral ao particular, por refinamentos sucessivos desenvolvimento top-down ou de cima para baixo 
decompor o algoritmo em módulos funcionais, organizados de preferência em um sistema hierárquico
um  procedimento  é  uma  seqüência  de  comandos  precedida  por  uma  seqüência  de  declarações que possui um identificador  nome do procedimento , uma lista de parâmetros opcional e pode realizar qualquer tipo de processamento que o programador ou analista deseje
funções são as estruturas que permitem ao usuário separar seus programas em blocos
para fazermos programas grandes e complexos temos de construí-lobloco a bloco
uma  função  é  um  módulo  que  tem  por  objetivo  calcular  e  retornar  ao  algoritmo,  procedimento ou função  chamador  um valor.
a chamada de uma função para execução é feita apenas citando-se o seu identificador no meio de uma expressão
o tipo-de-retorno é o tipo de variável que a função vai retornar.
default é o tipo inteiro int , ou seja, uma função para qual não declaramos o tipo de retorno é considerada como retornando um inteiro.
quando se chega a uma declaração retorna  return  a função é encerrada imediatamente e, se o valor de retorno é informado, a função retorna este valor
ma função pode ter mais de uma declaração retorna return
o escopo é o conjunto de regras que determinam o uso e a validade de variáveis nas diversas partes do programa
ariáveis locais. estas são aquelas que só têm validade dentro do bloco no qual são declaradas
podemos declarar variáveis dentro de qualquer bloco
um bloco começa quando abrimos uma chave e termina quando fechamos a chave
a declaração de variáveis locais é a primeira coisa que devemos colocar num bloco
a característica que torna as variáveis locais tão importantes é justamente a de serem exclusivas do bloco
variáveis globais são declaradas, como já sabemos, fora de todas as funções do programa
elas são conhecidas e podem ser alteradas por todas as funções do programa
quando uma ﻿função tem uma variável local com o mesmo nome de uma variável global a função dará preferência à variável local
existem casos em que um procedimento ou função chama a si próprio. diz-se então que o procedimento ou função é recursivo
um procedimento nada mais é que um algoritmo hierarquicamente subordinado a um outro algoritmo
a pesquisa binária é um método que também só se aplica a vetores previamente ordenados
o propósito dos algoritmos de ordenação é o de facilitar e acelerar a busca posterior de um elemento no vetor
os algoritmos de ordenação são utilizados normalmente uma vez em cada execução do programa, ou poucas vezes, se comparados com os de pesquisa, por isso o uso de métodos elementares e demorados não é tão problemático como nas pesquisas
os algoritmos de ordenação poderão ser utilizados muitas vezes na solução de diferentes problemas e também vamos defini-los como um procedimento do mesmo algoritmo principal
na informática, o algoritmo é o projeto do programa , ou seja, antes de se fazer um programa software na linguagem de programação desejada pascal, c, delphi, etc. deve-se fazer o algoritmo do programa
um programa, é um algoritmo escrito numa forma compreensível pelo computador através de uma linguagem de programação , onde todas as ações a serem executadas devem ser especificadas nos mínimos detalhes e de acordo com as regras de sintaxeum da linguagem escolhida.
sintaxe segundo o dicionário aurélio, é a parte da gramática que estuda a disposição das palavras na frase e a das frases no discurso, bem como a relação lógica das frases entre si
cada linguagem de programação tem a sua sintaxe instruções, comandos, etc  que deve ser seguida corretamente para que o programafuncione. 
o conjunto de palavras e regras que definem o formato das sentenças válidas chama-se de sintaxe da linguagem.
um algoritmo não é a solução de um problema, pois, se assim fosse, cada problema teria um único algoritmo.
um algoritmo é um  caminho  para a solução de um problema e, em geral, existem muitos caminhos que levam a uma solução satisfatória, ou seja, para resolver o mesmo problema pode-se obter vários algoritmos diferentes
os fluxogramas ou diagramas de fluxo, são uma representação gráfica que utilizam formas geométricas padronizadas ligadas por setas de fluxo, para indicar as diversas ações  instruções  e decisões que devem ser seguidas para resolver o problema em questão
o português estruturado, é uma forma especial de linguagem bem mais restrita que a língua portuguesa  e  com  significados  bem  definidos  para  todos  os  termos  utilizados  nas  instruções comandos 
o  português  estruturado  na  verdade  é  uma simplificação extrema da língua portuguesa, limitada a pouquíssimas palavras e estruturas que têm significado pré-definido, pois deve-se seguir um padrão
a sintaxe do português estruturado não precisa ser seguida tão rigorosamente quanto a sintaxe de uma linguagem de programação, já que o algoritmo não será executado como um programa 
são chamadas de constantes, as informações  dados  que não variam com o tempo, ou seja, permanecem sempre com o mesmo conteúdo, é um valor fixo  invariável 
uma variável, é um espaço da memória do computador que reservamos  para guardar informações  dados 
as variáveis, podem conter valores diferentes a cada instante de tempo, ou seja, seu conteúdo pode variar de acordo com as instruções do algoritmo
as variáveis são referenciadas através de um nome  identificador  criado por você durante o desenvolvimento do algoritmo.
o conteúdo de uma variável pode ser alterado, consultado ou apagado quantas vezes forem necessárias durante o algoritmo
ao alterar o conteúdo da variável, a informação anterior é perdida, ou seja, sempre  vale  a última informação armazenada na variável
uma variável armazena apenas um conteúdo de cada vez
ma variável pode ser vista como uma caixa com um rótulo  nome  colado nela, que em um dado momento guarda um determinado objeto.
atribuição é uma notação utilizada para atribuir um valor a uma variável, ou seja, para armazenar um determinado conteúdo em uma variável
a operação de atribuição, normalmente, é representada por uma seta apontando para a esquerda, mas existem outros símbolos para representar a atribuição, depende da forma de representação do algoritmo
a instrução escrever é utilizada quando deseja-se mostrar informações na tela do computador, ou seja, é um comando de saída de dados.
sa-se a instrução escrever, quando necessitase mostrar algum dado para o usuário do algoritmo
anto no diagrama de chapin quanto em português estruturado representa-se a saída de dados através da palavra escrever ou escreva 
em fluxogramas a representação da saída de dados é feita através de uma forma geométrica específic
sa-se a instrução ler, quando necessita-se que o usuário do algoritmo digite algum dado 
a instrução ler é utilizada quando deseja-se obter informações do teclado do computador, ou seja, é um comando de entrada de dados.
a  estrutura  de  seleção  aninhada  normalmente  é  utilizada  quando  estivermos  fazendo  várias comparações testes sempre com a mesma variável.
operações  relacionais  são  as comparações  permitidas  entres  valores,  variáveis,  expressões  e constantes
os operadores lógicos permitem que mais de uma condição seja testada em uma única expressão, ou seja, pode-se fazer mais de uma comparação  teste ao mesmo tempo
existem três estruturas básicas para a construção de algoritmos, que são algoritmos seqüenciais, algoritmos com seleção e algoritmos com repetição
uma  estrutura  de  repetição  permite  que  uma  seqüência  de  instruções  comandos  seja executada várias vezes, até que uma condição teste seja satisfeita, ou seja, repete-se um conjunto de instruções sem que seja necessário escrevê-las várias vezes
as estruturas de repetição, assim como a de decisão  seleção , envolvem a avaliação de uma condição  teste 
existem três tipos de estruturas de repetição repitaaté, enquantofaça e para-até-faça, ﻿cada uma com suas peculiaridades e apropriada para cada problema, normalmente é possível resolver um mesmo problema usando qualquer uma das estruturas de repetição, mas, na maioria das situações, haverá uma mais adequada
na estrutura repitaaté as instruções a serem repetidas são executadas, no mínimo uma vez, já que o teste a condição fica no final da repetição.
na estrutura enquantofaça as instruções a serem repetidas podem não ser executadas nenhuma vez, pois o teste fica no início da repetição, então a execução das instruções  que estão  dentro  da repetição  depende do teste
a estrutura de repetição paraatéfaça é um pouco diferente das outras duas repitaaté e enquantofaça , pois possui uma variável de controle, ou seja, com esta estrutura é possível executar um conjunto de instruções um número determinado de vezes.
em algoritmos com estruturas de repetição repita, enquanto ou para é comum surgir a necessidade de utilizar variáveis do tipo contador e/ou acumulador.
um contador é utilizado para contar o número de vezes que um evento uma instrução ocorre, ou seja, contar a quantidade de vezes que uma instrução é executada
um contador é uma variável  qualquer  que recebe ela mesma mais um valor  uma constante , no caso do exemplo acima, a variável x está recebendo o valor dela mesma mais um.
um acumulador, também conhecido como somador, é utilizado para obter somatórios 
um acumulador  somador  é uma variável  qualquer  que recebe ela mesma mais uma outra variável, no caso do exemplo acima, a variável x está recebendo o valor dela mesma mais o valor da variável y.
normalmente inicializase as variáveis que serão utilizadas como contador ou como acumulador com o valor zero, mas podese inicializá-las com o valor que desejarmos de acordo com a necessidade
em muitos algoritmos surge a necessidade de determinarmos qual o maior ou o menor valor dentro de ﻿um conjunto de valores e, para isto, não existe uma estrutura especial
quando sabese os limites dos valores possíveis, ou seja, por exemplo com as notas sabemos que os valores serão de zero a um, então sabe-se quais são os valores limites o valor mínimo e o valor máximo , não teremos nota menor que zero e nem nota maior que umzero.
um vetor como uma variável dividida em vários  pedaços , em várias  casinhas , onde cada pedaço desses é identificado através de um número, referente à posição de uma determinada informação no vetor em questão.
número de cada posição do vetor é chamado de índice.
vetor é um conjunto de variáveis, onde cada uma pode armazenar uma informação diferente, mas todas compartilham o mesmo nome
um algoritmo é uma sequência finita de ações executáveis que visam obter uma solução para um determinado tipo de problema
algoritmos são procedimentos precisos, não ambíguos, mecânicos, eficientes e corretos
um algoritmo não representa, necessariamente, um programa de computador, e sim os passos necessários para realizar uma tarefa.
um computador é uma máquina que manipula dados a partir de uma lista de instruções
os computadores podem ser mecânicos  computador analógico  ou eletrônicos﻿ computadores digitais 
um algoritmo pode ser definido como uma sequência finita de passos instruções para resolver um determinado problema
sempre que desenvolvemos um algoritmo estamos estabelecendo um padrão de comportamento que deverá ser seguido uma norma de execução de ações para alcançar o resultado de um problema
um algortimo quando programado num computador é constituído pelodas três partes, sendo elas um. entrada de dados; dois. processamento de dados; três. saída de dados
na parte de entrada, são fornecidas as informações necessárias para que o algoritmo possa ser executado
na parte do processamento são avaliadas todas as expressões algébricas, relacionais e lógicas, assim como todas as estruturas de controle existentes no algoritmo condição e/ou repetição 
na parte de saída, todos os resultados do processamento ou parte deles são envia-dos para um ou mais dispositivos de saída, como monitor, impressora, ou até mesmoa própria memória do computador
os fluxogramas são uma apresentação do algoritmo em formato gráfico
ada ação ousituação é representada por uma caixa
tomadas de decisões são indicadas por caixas especiais, possibilitando ao fluxo de ações tomar caminhos distintos
qualquer tipo de informação que deva ser transferida, processada ou armazenadadeve estar na forma de uma linguagem
a linguagem é imprescindível para o processo de comunicação
duas máquinas trocam informação por uma linguagem, que neste caso mais técnico e restrito, se chama protocolo
um computador armazena suas instruções em código de máquina.
ara que um ser humano possa programar, armazenar e buscar informações num computador, é necessário que saiba instruíum na sua linguagem de máquina ou numa linguagem intermediária uma linguagem de programação que possa ser facilmentetraduzida para o computador
além do fato de o computador necessitar que lhe instruam com ações bem específicas,estas ações devem ser passadas para o computador numa linguagem que ele possa entendê-las, chamada linguagem de máquina.
esta linguagem é composta somente por números, representados de forma binária, que, sob o ponto de vista do computador, representam as operações e os operandos que serão usados no processamento doprograma
compilação o programa em linguagem de programação é transformado em instruções em linguagem de máquina que o processador pode executar 
para facilitar a tarefa de programar um computador, foram criadas várias linguagens de programação
estas linguagens são um maneira de tentar escrever as tarefas que o computador vai realizar de maneira mais parecida com a linguagem natural.
embora ainda seja muitas vezes complexo em comparação com a linguagem natural, um programa escrito em uma linguagem de programação é muito mais fácil de ser implementado, compreendido e modificado
as linguagens de programação são um meio termo entre a linguagem de máquinae a linguagem natural
este modo são classificadas de acordo com o nível entre alinguagem natural ou de máquina que ocupam
as linguagens muito parecidas com linguagem de máquina são chamadas de linguagens de baixo nível e suas instruções parecem-se muito com aquelas que serão executadas pelo processador
as linguagens de alto nível são as que guardam mais semelhanças com a linguagem natural
exemplo de linguagens de baixo nível é a linguagem de montagem assembly. exemplos de linguagens de alto-nível são pascal, c, fortran, java, perl, python, lisp, php, entreoutras
o processador não pode executar o código numa linguagem de programa﻿ção, esta deve ser traduzida em código de máquina antes de ser executada
este processo é chamado de textbfcompilação responsável por converter os comandos da lingugem de programação nas instruções em código de máquina que o processador poderá utilizar.
um programa escrito em linguagem de máquina, como contém instruções específicas de um processador, só poderá ser utilizado naquele processador ou em similares
ma linguagem de programação, como contém somente instruçõesabstratas do que fazer, pode ser compilado para qualquer código de máquina.
ao invés de escrever um programa em código de máquina para cada famíliade processdores, escreve-se o mesmo código numa linguagem de programação e estáé compilada por um compilador específico daquela arquitetura
o pseudocódigo é uma maneira intermediária entre a linguagem natural e uma linguagem de programação de representar um algoritmo
o pseudocódigo não requer todo a rigidez sintática necessária numa linguagem de programação, permitindo que o aprendiz sedetenha na lógica do algoritmos e não no formalismo da sua representação
pseudocódigo pode ser traduzido para uma linguagem de programação
todo programa em c inicia sua execução na função main , que é obrigatória
para que certas funções sejam acessíveis, é necessário incluir a bilbiotecastdlib.h
todas as linhas que contém instruções devem terminar com ponto-e-vírgula
os blocos de instruções são delimitados por chaves
blocos de comentários são delimitados por/*e*/
linhas de comentários são iniciadas por duas barras//
um único algorismo binário é chama do bit, uma sequência de oito bits é um byte e uma sequência de umseis bits é uma palavra
lógica utilizada para realizar a conversão de números entre diferentes bases é similar a lógica que usamos para representar um número no sistema decimal, ou seja, osalgarismos irão representar diferentes quantidades dependendo da sua posição no número em questão
os dados em um computador devem ser armazenados de acordo com o tipo de informação que se deseja representar e com o tipo de operação que será realizada comeles
a representação correta e adequada de uma informação permite otimizar os recursos computacionais disponíveis, além de acelerar o processamento
inteiro são os números pertencentes ao conjunto dos inteiros, isto é, que não possuem parte fracionária. podem ser positivos, nulos ou negativos
real são os números pertencentes ao conjunto dos reais, isto é, que podem possuir parte fracionária
caractere são os valores pertencentes ao conjunto de todos os caracteres numéricos, alfabéticos e especiais esse conjunto tambémé conhecido como conjunto de caracteresalfanuméricos
lógico tipo lógico é utilizado para representar informações que só podem assumirdois valores, o valor verdadeiro v ou o valor falso f 
um dado é uma constante quando seu valor não se altera ao longo do tempo em que o algoritmo é executado, ou seja, permanece o mesmo desde o início até o final da execução
um dado que pode ter seu valor alterado durante a execução do programa é tido como uma variável
o uso de algoritmos é quase tão antigo quanto a matemática. 
com grande vigor, como uma forma de indicar o caminho para a solução dos mais variados problemas
algoritmo não é a solução do problema, pois, se assim fosse, cada problema teria um único algoritmo. 
algoritmo é o caminho para a solução de um problema, e em geral, os caminhos que levam a uma solução são muitos
algoritmos não se aprendem copiando algoritmos estudando algoritmos algoritmos só se aprendem construindo algoritmos testando algoritmos
à especificação da seqüência ordenada de passos que deve ser seguida para a realização de um tarefa, garantindo a sua repetibilidade, dá-se o nome de algoritmo
algoritmo é um conjunto finito de regras, bem definidas, para a solução de um problema em um tempo finito e com um número finito de passos
um algoritmo é qualquer procedimento computacional bem definido que toma algum valor ou conjunto de valores como entrada e produz algum valor ou conjunto de valores como saída.
um algoritmo deve sempre possuir pelo menos um resultado, normalmente chamado de saída
todas as operações especificadas no algoritmo devem ser suficientemente básicas para que possam ser executadas de maneira exata e num tempo finito.
na prática não é importante ter-se apenas um algoritmo, mas sim, um bom algoritmo
que se tenha um número finito de passos
que cada passo esteja precisamente definido, sem possíveis ambigüidades
que existam zero ou mais entradas tomadas de conjuntos bem definidos
que existam uma ou mais saídas
que exista uma condição de fim sempre atingida para quaisquer entradas e num tempo finito.
para que um computador possa desempenhar uma tarefa é necessário que esta seja detalhada passo a passo, numa forma compreensível pela máquina, utilizando aquilo que se chama de programa
um programa de computador nada mais é que um algoritmo escrito numa forma compreensível pelo computador.
existem diversas formas de representação de algoritmos, mas não há um consenso com relação à melhor delas.
algumas formas de representação de algoritmos tratam dos problemas apenas em nível lógico, abstraindose de detalhes de implementação muitas vezes relacionados com alguma linguagem de programação específica. 
por outro lado, existem formas de representação de algoritmos que possuem uma maior riqueza de detalhes e muitas vezes acabam por obscurescer a idéia principal, o algoritmo, dificultando seu entendimento.
descrição narrativa nesta forma de representação os algoritmos são expressos diretamente em linguagem natural. 
fluxograma convencional é uma representação gráfica de algoritmos onde formas geométricas diferentes implicam ações instruções, comandos distintos.
o fluxograma se resume a um único símbolo inicial, por onde a execução do algoritmo começa, e um ou mais símbolos finais, que são pontos onde a execução do algoritmo se encerra
o diagrama foi criado por ned chapin a partir de trabalhos de nassishneiderman, os quais resolveram substituir o fluxograma tradicional por um diagrama que apresenta uma visão hierárquica e estruturada da lógica do programa. 
a grande vantagem de usar este tipo de diagrama é a representação das estruturas que tem um ponto de entrada e um ponto de saída e são compostas pelas estruturas básicas de controle de seqüência, seleção e repartição. 
pseudocódigo esta forma de representação de algoritmos, também conhecida como português estruturado ou portugol, é bastante rica em detalhes e, por assemelhar-se bastante à forma em que os programas são escritos
algoritmo é uma palavra que indica o início da definição de um algoritmo em forma de pseudocódigo.
<nome_do_algoritmo> é um nome simbólico dado ao algoritmo com a finalidade de distinguí-lo dos demais.
<declaração_de_variáveis> consiste em uma porção opcional onde são declaradas as variáveis globais usadas no algoritmo principal e, eventualmente, nos subalgoritmos.
<subalgoritmos> consiste de uma porção opcional do pseudocódigo onde são definidos os subalgoritmos
início e fim são respectivamente as palavras que delimitam o início e o término do conjunto de instruções do corpo do algoritmo.
todo o trabalho realizado por um computador é baseado na manipulação das informações contidas em sua memória. 
as instruções, que comandam o funcionamento da máquina e determinam a maneira como devem ser tratados os dados.
os dados propriamente ditos, que correspondem à porção das informações a serem processadas pelo computador.
são caracterizados como tipos inteiros, os dados numéricos positivos ou negativos. excluindo-se destes qualquer número fracionário. 
são caracterizados como tipos reais, os dados numéricos positivos e negativos e números fracionários. 
são caracterizados como tipos caracteres, as seqüências contendo letras, números e símbolos especiais. 
são caracterizados como tipos lógicos os dados com valor verdadeiro e falso, sendo que este tipo de dado poderá representar apenas um dos dois valores
ele é chamado por alguns de tipo booleano, devido à contribuição do filósofo e matemático inglês george boole na área da lógica matemática.
para armazenar os dados na memória, imagine que a memória de um computador é um grande arquivo com várias gavetas, onde cada gaveta pode armazenar apenas um único valor 
têm-se como definição de variável tudo aquilo que é sujeito a variações, que é incerto, instável ou inconstante
quando se fala de computadores, temos que ter em mente que o volume de informações a serem tratadas é grande e diversificado. 
para acessar individualmente cada uma destas informações, em princípio, seria necessário saber o tipo de dado desta informação ou seja, o número de bytes de memória por ela ocupados e a posição inicial deste conjunto de bytes na memória.
uma variável possui três atributos um nome , um tipo de dado associado à mesma e a informação por ela guardada.
toda variável possui um nome que tem a função de diferenciá-la das demais.
cada linguagem de programação estabelece suas próprias regras de formação de nomes de variáveis.
um nome de variável deve necessariamente começar com uma letra
um nome de variável não deve conter nenhum símbolo especial, exceto a sublinha e nenhum espaço em branco
um nome de variável não poderá ser uma palavra reservada a uma instrução de programa.
é interessante adotar nomes de variáveis relacionados às funções que serão exercidas pela mesmas dentro de um programa
outro atributo característico de uma variável é o tipo de dado que ela pode armazenar
há o atributo informação, que nada mais é do que a informação útil contida na variável.
os atributos nome e tipo de dado de uma variável não podem ser alterados e assim permanecem durante toda a sua existência, desde que o programa que a utiliza não seja modificado. 
o atributo informação está constantemente sujeito a mudanças de acordo com o fluxo de execução do programa.
o conceito de variável foi criado para facilitar a vida dos programadores, permitindo acessar informações na memória dos computadores por meio de um nome, em vez do endereço de uma célula de memória.
todas as variáveis utilizadas em algoritmos devem ser definidas antes de serem utilizadas. 
se faz necessário para permitir que o compilador reserve um espaço na memória para as mesmas.
uma vez que o espaço na memória é reservado à medida que novas variáveis são encontradas no decorrer do programa
todas as variáveis utilizadas serão definidas no início do mesmo, por meio de um comando
a palavra-chave var deverá estar presente sempre e será utilizada um única vez na definição de um conjunto de uma ou mais variáveis
numa mesma linha poderão ser definidas uma ou mais variáveis do mesmo tipo; para tal, deve-se separar os nomes das mesmas por vírgulas
variáveis de tipos diferentes devem ser declaradas em linhas diferentes.
têm-se como definição de constante tudo aquilo que é fixo ou estável
é comum definirmos uma constante no início do programa, e a utilizarmos no decorrer do programa
nos algoritmos, todas as constante utilizadas serão definidas no início do mesmo, por meio de um comando 
operadores são elementos fundamentais que atuam sobre operandos e produzem um determinado resultado
binários, quando atuam sobre dois operandos. 
unários, quando atuam sobre um único operando. 
outra classificação dos operadores é feita considerando-se o tipo de dado de seus operandos e do valor resultante de sua avaliação. 
os operandos dividem-se em aritméticos, lógicos e literais. 
um caso especial é o dos operadores relacionais, que permitem comparar pares de operandos de tipos de dados iguais, resultando sempre num valor lógico.
um operador de atribuição serve para atribuir um valor a uma variável.
a prioridade entre operadores define a ordem em que os mesmos devem ser avaliados dentro de uma mesma expressão.
os operadores lógicos ou booleanos são usados para combinar expressões relacionais. 
uma expressão relacional ou lógica retornará falso para o valor lógico falso e verdadeiro para o valor lógico verdade .
os operadores que atuam sobre caracteres variam muito de uma linguagem para outra
o operador mais comum e mais usado é o operador que faz a concatenação de strings
o conceito de expressão em termos computacionais está intimamente ligado ao conceito de expressão ou fórmula matemática, onde um conjunto de variáveis e constantes numéricas relacionam-se por meio de operadores aritméticos compondo uma fórmula que, uma vez avaliada, resulta num valor.
expressões aritméticas são aquelas cujo resultado da avaliação é do tipo numérico, seja ele inteiro ou real. 
somente o uso de operadores aritméticos, variáveis numéricas e parênteses é permitido em expressões deste tipo
expressões lógicas são aquelas cujo resultado da avaliação é um valor lógico verdadeiro ou falso
nestas expressões são usados os operadores relacionais e os operadores lógicos, podendo ainda serem combinados com expressões aritméticas. 
quando forem combinadas duas ou mais expressões que utilizem operadores relacionais e lógicos, os mesmos devem utilizar os parênteses para indicar a ordem de precedência.
expressões literais são aquelas cujo resultado da avaliação é um valor literal caractere
expressões que apresentam apenas um único operador podem ser avaliadas diretamente
instruções primitivas são os comandos básicos que efetuam tarefas essenciais para a operação dos computadores, como entrada e saída de dados e movimentação dos mesmos na memória
dispositivo de entrada é o meio pelo qual as informações mais especificamente os dados são transferidos pelo usuário ou pelos níveis secundários de memória ao computador
dispositivo de saída é o meio pelo qual as informações geralmente os resultados da execução de um programa são transferidos pelo computador ao usuário ou aos níveis secundários de memória. 
sintaxe é a forma como os comandos devem ser escritos, a fim de que possam ser entendidos pelo tradutor de programas. 
a violação das regras sintáticas é considerada um erro sujeito à pena do não reconhecimento por parte do tradutor
semântica é o significado, ou seja, o conjunto de ações que serão exercidas pelo computador durante a execução do referido comando.
o comando de atribuição ou simplesmente atribuição, é a principal maneira de armazenar uma informação numa variável.
os comandos de saída de dados são o meio pelo qual informações contidas na memória dos computadores são colocadas nos dispositivos de saída, para que os usuários possam apreciá-las.
escreva será considerada uma palavra reservada e não mais poderá ser utilizada como nome de variável, de modo que toda a vez que for encontrada em algoritmos, será identificada como um comando de saída de dados.
uma lista de variáveis é um conjunto de nomes de variáveis separados por vírgula s. 
um literal é simplesmente um dado do tipo literal string ou cadeia de caracteres delimitado por aspas.
a semântica da instrução primitiva de saída de dados é muito simples os argumentos do comando são enviados para o dispositivo de saída
o conteúdo de cada uma delas é pesquisado na memória e enviado para o dispositivo de saída
argumentos do tipo literal ou string, estes são enviados diretamente ao referido dispositivo.
possibilidade de se misturar nomes de variáveis com literais na lista de um mesmo comando.
os comandos de entrada de dados são o meio pelo qual as informações dos usuários são transferidas para a memória dos computadores, para que possam ser usadas nos programas.
leia será tratada como uma palavra menos reservada e não mais poderá ser usada como nome variável em algoritmos.
a semântica da instrução de entrada  ou leitura  de dados é, de certa forma, inversa à da instrução de ﻿escrita
uma preocupação constante de um bom programador deve ser a de conceber um programa amigo do ﻿usuário. 
esta preocupação é traduzida no planejamento de uma interface com o usuário.
o momento os algoritmos estudados utilizam apenas instruções primitivas de atribuição, e de entrada e saída de dados. qualquer conjunto de dados fornecido a um algoritmo destes será submetido ao mesmo conjuntode instruções, executadas sempre na mesma seqüência.
na prática muitas vezes é necessário executar ações diversas em função dos dados fornecidos ao algoritmo. em outras palavras, dependendo do conjunto de dados de entrada do algoritmo, deve-se executar um ﻿conjunto diferente de instruções. 
um comando composto é um conjunto de zero ou mais comandos  ou instruções  simples, como ﻿atribuições e instruções primitivas de entrada ou saída de dados, ou alguma das construções apresentadas neste capítulo.
este conceito é bastante simples e será útil e conveniente nos itens seguintes, na definição das estruturas ﻿básicas de controle de execução.
﻿na estrutura seqüencial os comandos de um algoritmo são executados numa seqüência pré-estabelecida. ﻿cada comando é executado somente após o término do comando anterior.
uma estrutura seqüencial é delimitada pelas palavras menos reservadas início e fim e contém basicamente comandos de atribuição, comandos de entrada e comandos de saída. os algoritmos do capítulo anterior são algoritmos que utilizam uma única estrutura seqüencial.
um algoritmo puramente seqüencial é aquele cuja execução é efetuada em ordem ascendente dos números que identificam cada passo. a passagem de um passo ao seguinte é natural e automática, e cada passo é executado uma única vez.
a classificação das estruturas de decisão é feita de acordo com o número de condições que devem ser testadas para que se decida qual o caminho a ser seguido. segundo esta classificação, têm-se três tipos de estruturas.
os algoritmos puramente seqüenciais podem ser usados na solução de um grande número de problemas, porém existem problemas que exigem o uso de alternativas de acordo com as entradas do mesmo.
as situações são resolvidas através de passos cuja execução é subordinada a uma ﻿condição. assim, o algoritmo conterá passos que são executados somente se determinadas condições forem observadas.
um algoritmo em que se tem a execução de determinados passos subordinada a uma condição é denominado algoritmo com seleção.
se o resultado for verdadeiro, então o comando_único  ou  o  conjunto  de  comandos comando_composto  delimitados pelas palavras menos reservadas início e fim serão executados. ao término de sua execução o fluxo do algoritmo prossegue pela instrução seguinte à construção, ou seja, o primeiro comando após o comando_único ou a palavra menos reservada fim.
o fluxo do algoritmo prossegue pela instrução seguinte à construção, ou seja, o primeiro comando após o comando_único ou a palavra-reservada fim, sem executar o comando_único ou o conjunto de comandos comando_composto entre as palavras menos reservadas início e fim.
se o resultado desta avaliação for verdadeiro, um comando ou conjunto de comandos serão executados. caso contrário, ou seja, quando o resultado da avaliação for falso, um outro comando ou um outro conjunto de comandos serão executados.
a solução do problema consiste em determinar todas as combinações de x e y para as classes de valores positivos, negativos e nulos.
s algoritmos podem ser baseados em estruturas concatenadas uma em seqüência a outra ou em estruturas aninhadas uma dentro da outra, de acordo com a formulação da condição.
as estruturas concatenadas tem a vantagem de tornar o algoritmo mais legível, facilitando a correção do mesmo em caso de erros. as estruturas aninhadas ou encadeadas tem a vantagem de tornar o algoritmo mais rápido pois são efetuados menos testes e menos comparações, o que resulta num menor número de passos para chegar ao final do mesmo.
nos algoritmos devido à facilidade de entendimento das mesmas e estruturas aninhadas ou encadeadas somente nos casos em que seu uso é fundamental.
﻿este tipo de estrutura é uma generalização da construção se, onde somente uma condição era avaliada e ﻿dois caminhos podiam ser seguidos. na estrutura de decisão do tipo escolha pode haver uma ou mais condições a serem testadas e um comando diferente associado a cada uma destas.
um caso particular desta construção é aquele em que o comando_composto_s não contém nenhuma instrução. isto ocorre nas situações que não se deseja efetuar nenhuma ação quando todas as condições são falsas. assim, pode-se dispensar o uso do senão na construção escolha.
são muito comuns as situações em que se deseja repetir um determinado trecho de um programa um certo ﻿número de vezes. por exemplo, pode-se citar o caso de um algoritmo que calcula a soma dos números impares entre cincozerozero e umzerozerozero ou então um algoritmo que escreve os números maiores que zero enquanto a sua soma não ultrapasse umzerozerozero.
as estruturas de repetição são muitas vezes chamadas de laços ou também de loops.laços contados, quando se conhece previamente quantas vezes o comando composto no interior da construção será executado;laços condicionais, quando não se conhece de antemão o número de vezes que o conjunto de comandos no interior do laço será repetido, pelo fato do mesmo estar amarrado a uma condição sujeita ﻿à modificação pelas instruções do interior do laço.
todo algoritmo que possui um ou mais de seus passos repetidos um determinado número de vezes denomina-se algoritmo com repetição.
com a utilização de estruturas de repetição para a elaboração de algoritmos, torna-se necessário o uso de dois tipos de variáveis para a resolução de diversos tipos de problemas variáveis contadoras e variáveis acumuladoras.
uma variávelcontadora é uma variável que recebe um valor inicial, geralmente zero zero antes do início de uma estrutura de repetição.
uma variávelacumuladora é uma variável que recebe um valor inicial, geralmente zero  zero  antes do início de uma estrutura de repetição, e é incrementada no interior da estrutura de um valor variável.
os laços contados são úteis quando se conhece previamente o número exato de vezes que se deseja executar um determinado conjunto de comandos. então, este tipo de laço nada mais é que uma estrutura dotada de mecanismos para contar o número de vezes que o corpo do laço ou seja, o comando composto em seu interior é executado.
a semântica do laço contado é a seguinte no início da execução da construção o valor início é atribuído à variável var. a seguir, o valor da variável var é comparado com o valor final. se var for maior que final, então o comando composto não é executado e a execução do algoritmo prossegue pelo primeiro comando seguinte ao comando_único ou à palavra menos reservada fim que delimita o final da construção.
laços condicionais são aqueles cujo conjunto de comandos em seu interior é executado até que uma determinada condição seja satisfeita. ao contrário do que acontece nos laços contados, nos laços condicionais não se sabe de antemão quantas vezes o corpo do laço será executado.
nos laços condicionais a variável que é testada, tanto no início quanto no final do laço, dever sempre estar associada a um comando que a atualize no interior do laço. caso isso não ocorra, o programa ficará repetindo indefinidamente este laço, gerando uma situação conhecida como laço infinito.
sua semântica é a seguinte ao início da construção enquanto a condição é testada. se seu resultado for ﻿falso, então o comando composto no seu interior não é executado e a execução prossegue normalmente pela instrução seguinte à palavra-reservada fim que identifica o final da construção.
se a condição for verdadeira o comando composto é executado e ao seu término retorna-se ao teste da condição. assim, o processo acima será repetido enquanto a condição testada for verdadeira. quando esta for falsa, o fluxo de execução prossegue normalmente pela instrução seguinte à palavra menos reservada fim que identifica o final da construção.
uma vez dentro do corpo do laço, a execução somente abandonará o mesmo quando a condição for falsa. o usuário deste tipo de construção deve estar atento à necessidade de que em algum momento a condição deverá ser avaliada como falsa. caso contrário, o programa permanecerá indefinidamente no interior do laço  laço infinito .
caracteriza-se por uma estrutura que efetua um teste lógico no final de um laço, verificando se é permitido ou não executar novamente o conjunto de comandos no interior do mesmo.
seu funcionamento é bastante parecido ao da construção enquanto. o comando é executado uma vez. a seguir, a condição é testada se ela for falsa, o comando composto é executado novamente e este processo é repetido até que a condição seja verdadeira, quando então a execução prossegue pelo comando imediatamente seguinte ao final da construção.
esta construção difere da construção enquanto pelo fato de o comando composto ser executado uma ou mais vezes pelo menos uma vez , ao passo que na construção enquanto o comando composto é executado zeroou mais vezes  possivelmente nenhuma . isto acontece porque na construção repita o teste é feito no final da construção, ao contrário do que acontece na construção enquanto, onde o teste da condição é efetuado no início da mesma.
a construção repita também difere da construção enquanto no que se refere à inicialização da variável, visto que na construção repita a variável pode ser inicializada ou lida dentro do laço.
um aninhamento ou encadeamento é o fato de se ter qualquer um dos tipos de construção apresentados anteriormente dentro do conjunto de comandos comando composto de uma outra construção.em qualquer tipo de aninhamento é necessário que a construção interna esteja completamente embutida na construção externa.
as estruturas de dados homogêneas permitem agrupar diversas informações dentro de uma mesma variável. este agrupamento ocorrerá obedecendo sempre ao mesmo tipo de dado, e é por esta razão que estas estruturas são chamadas homogêneas.
a utilização deste tipo de estrutura de dados recebe diversos nomes, como variáveis indexadas, variáveis compostas, variáveis subscritas, arranjos, vetores, matrizes, tabelas em memória ou arrays. os nomes mais usados e que utilizaremos para estruturas homogêneas são matrizes  genérico  e vetores  matriz de uma linha e várias colunas .
este tipo de estrutura em particular é também denominado por profissionais da área como matrizes ﻿unidimensionais. sua utilização mais comum está vinculada à criação de tabelas. caracteriza-se por ser definida uma única variável vinculada dimensionada com um determinado tamanho. a dimensão de uma matriz é constituída por constantes inteiras e positivas. os nomes dados às matrizes seguem as mesmas regras de nomes utilizados para indicar as variáveis simples.
do mesmo modo que acontece com variáveis simples, também é possível operar com variáveis indexadas matrizes . 
o acesso individual a cada componente de um vetor é realizado pela especificação de sua posição na mesma por meio do seu índice. no exemplo anterior foi definida uma variável m capaz de armazenar umzero número inteiros. para acessar um elemento deste vetor deve-se fornecer o nome do mesmo e o índice do componente desejado do vetor um número de um a umzero, neste caso .
não é possível operar diretamente sobre vetores como um todo, mas apenas sobre seus componentes, um por vez.
leitura de dados de uma matriz do tipo vetora leitura de um vetor é feita passo a passo, um de seus componentes por vez, usando a mesma sintaxe da instrução primitiva da entrada de dados, onde além do nome da variável.
a utilização da construção para a fim de efetuar a operação de leitura repetidas vezes, em cada uma delas lendo um determinado componente do vetor. de fato esta construção é muito comum quando se opera com vetores, devido à necessidade de se realizar uma mesma operação com os diversos componentes dos mesmos. 
a escrita de um vetor obedece à mesma sintaxe da instrução primitiva de saída especificar por meio do índice o componente a ser escrito.
aplicação de vetoreso espectro de aplicação de vetores em algoritmos é muito extenso, mas normalmente os vetores são usados em duas tarefas muito importantes no processamento de dados pesquisa e classificação. 
a pesquisa consiste na verificação da existência de um valor dentro de um vetor. trocando em miúdos, ﻿pesquisar um vetor consiste em procurar dentre seus componentes um determinado valor.
a classificação de um vetor consiste em arranjar seus componentes numa determinada ordem, segundo um critério específico. por exemplo, este critério pode ser a ordem alfabética de um vetor de dados caracter, ou então a ordem crescente ou decrescente para um vetor de dados numéricos.
o método da bolha de classificação, a filosofia básica deste método consiste em varrer o vetor, comparando os elementos vizinhos entre si. 
na primeira varredura verifica-se que o último elemento do vetor já está no seu devido lugar no caso de ordenação crescente, ele é o maior de todos . a segunda varredura é análoga à primeira e vai até o penúltimo elemento. este processo é repetido até que seja feito um número de varreduras igual ao número de elementos a serem ordenados menos um. ao final do processo o vetor está classificado segundo o critério escolhido.
matrizes com mais de uma dimensãoeste tipo de estrutura também tem sua principal utilização vinculada à criação de tabelas. caracteriza-se por ser definida uma única variável vinculada dimensionada com um determinado tamanho. a dimensão de uma matriz é constituída por constantes inteiras e positivas. os nomes dados às matrizes seguem as mesmas regras de nomes utilizados para indicar as variáveis simples.
operações básicas com matrizes de duas dimensões, não é possível operar diretamente com o conjunto completo, mas com cada um de seus componentes isoladamente. 
o acesso individual a cada componente de uma matriz é realizado pela especificação de sua posição na mesma por meio do seu índice
para acessar um elemento desta matriz deve-se fornecer o nome da mesma e o índice da linha e da coluna do componente desejado da matriz.
não é possível operar diretamente sobre matrizes como um todo, mas apenas sobre seus componentes, um por vez. por exemplo, para somar duas matrizes é necessário somar cada um de seus componentes dois a dois.
atribuição de uma matriz de duas dimensõesna atribuição de matrizes, da mesma forma que nos vetores, além do nome da variável deve-se necessariamente fornecer também o índice do componente da matriz onde será armazenado o resultado da avaliação da expressão. 
o índice referente ao elemento é composto por tantas informações quanto o número de dimensões da matriz. no caso de ter duas dimensões, o primeiro número se refere à linha e o segundo número se refere à coluna da matriz em que se encontra a informação.
leitura de dados de uma matriz de duas dimensõesa leitura de uma matriz é feita passo a passo, um de seus componentes por vez, usando a mesma sintaxe da instrução primitiva da entrada de dados, onde além do nome da variável.
uma observação importante a ser feita é a utilização de construções para aninhadas ou encadeada a fim de efetuar a operação de leitura repetidas vezes, em cada uma delas lendo um determinado componente da matriz.
a escrita de uma matriz obedece à mesma sintaxe da instrução primitiva de saída de dados deve-se também especificar por meio do índice o componente a ser escrito.
a estrutura switch case é uma solução elegante quanto se tem várias estruturas de decisão aninhadas. 
quando outras verificações são feitas em switch case, significa que a anterior tenha falhado. 
quando o fluxo do algoritmo entrou no bloco senao.
a proposta da estrutura escolha caso é permitir ir direto no bloco de código desejado.
dependendo do valor de uma variável de verificação, é possível ir ao bloco de código desejado em switch case.
dependendo do que o usuário informar como operador, o switch realiza uma ação diferente.
no visual g switch é implementado com se entao e senão.
existe uma opção a mais na estrutura switch, justamente para tratar quando o valor da variável não é equivalente a nenhuma opção,o outrocaso.
o outrocaso permite que seja feita validações no algoritmo.
independentemente da linguagem de programação escolhida para o desenvolvimento do sistema, existem três tipos básicos estrutura de repetição.
as instruções de repetição são para faça, enquanto faça e repita.
a questão básica para quem está iniciando no mundo da programação de computadores é definir qual a diferença entre as estruturas de repetição.
sempre que uma condição é verdadeira, a linha de código imediatamente abaixo é executada.
quando sabemos exatamente quantas vezes um determinado conjunto de instruções deve ser executado, o ideal é utilizar a estrutura para faça. 
no para faça é possível definir o começo e o fim da repetição, ou seja, definir exatamente quantas vezes será executada. 
a estrutura de repetição para faça utiliza se de um contador que controla o número de execuções. 
o contador mês começa em um e termina em umdois.
ocontador da estrutura para faça pode ser tanto incremental quanto decremental .
a própria estrutura de repetição é responsável por manipular o valor do contador. 
a estrutura de repetição testa o valor do contador antes da execução. 
se um contador estiver dentro do limite definido o bloco é executado.
se um contador estiver abaixo do limite definido, todo o bloco é ignorado e o ponteiro de execução do fluxo é colocado na instrução imediatamente seguinte. 
o princípio de estrutura de seleção é o mesmo utilizado na validação das estruturas de seleção.
incremental é quando o valor aumenta um por um em cada repetição.
decrementar é quando o valor diminui um por um em cada repetição.
existe situações que não é possível determinar quantas vezes uma determinada instrução será executada. 
enquanto faça e repita, são repetições para quando não se sabe quantas vezes o código será executado.
estruturas de seleção diferem apenas na obrigatoriedade de execução, de pelo menos uma vez, do bloco de comandos em seu interior.
se não é possível determinar o número de repetições e o bloco de comandos não tem obrigatoriedade de execução, é usado o enquanto faça.
enquanto faça valida a condição antes da execução e, se for verdadeira, executa o bloco de comandos em seu interior enquanto tal condição for verdadeira. 
ao final da execução do enquanto faça bloco o ponteiro de execução do fluxo é colocado novamente no início do bloco e a condição é testada outra vez. fim enquanto
é importante assegurar que a condição testada possa ser modificada dentro bloco do enquanto faça.
no enquanto faça se a condição muda de verdadeiro ou falso, ela é encerrada.
se no enquanto faça a condição nunca mudar, é iniciado um loop infinito.
loop infinito é quando o algoritmo não tem como sair de uma estrutura de repetição.
se o número de repetições é indefinido, mas a execução de pelo menos uma vez é necessária então a melhor estrutura de repetição a ser utilizada é repita.
o repita executará o bloco de comandos uma vez e ao final fará o teste condicional. 
se a condição do repita for verdadeira o ponteiro de fluxo de execução será colocado na instrução seguinte.
no repita a repetição se dá enquanto a condição for falsa.
somente com a condição falsa o ponteiro de fluxo poderá retornar ao início do bloco de repetição para uma nova execução. 
é possível criar um loop em qualquer estrutura de repetição.
um algoritmo eficiente, resolve mais de um problema.
p o o, é o prícipio de programação orientada a objetos.
programação orientada a objetos significa realizar uma programação com vários objetos interagindo entre si.
um objeto tem atributos e métodos.
métodos são comportamentos.
atributos são caracteristícas.
vetores são unidimensionais.
matrizes são homogêneas.
é possível criar um vetor ao invés de criar várias variáveis.
uma matriz pode ter infinitar dimensões em algums linguagens.
declaração de vetor pode varias de linguagem para linguagem.
cada linguagem tem sua própria sintaxe.
nem sempre a mesma linguagem é adequada para toda situação.
linguagem de montagem é útil para desenvolver um programa com mais performance.
a linguagem de alto nível pode diminuir a velocidade de processamento.
linguagem de alto nível significa linguagem próxima a uma natural.
linguagem de baixo nível significa linguagem próxima ao processador.
java é uma das primeiras linguagens orientadas a objeto.
atualmente, o paradigma orientado objetos é o método de programação mais usado.
em algumas linguagens, tipos de dados são cruciais para uma variável.
algumas linguagens também permitem o uso de listas.
linguagens fortemente tipadas precisa que cada dado tenha um tipo.
linguagens dinamicamente tipadas não precisam de uma declaração para o dado.
tipos de dados separam dados de outros.
string é uma cadeia de caracteres.
algumas linguagens possem tipos como o byte, short e long.
tipos de dados variam de linguagem para linguagem.
linguagem estruturada é quando todo o algoritmo é feito em um arquivo com funções.
programação orientada objetos são pesadas.
muitas empresas usam o c sharp.
o c mais mais é usado na maioria dos jogos hoje em dia.
python é uma linguagem que pode ser usada em praticamente tudo no campo de programação.
java é uma linguagem pesada mas com muitos recursos.
tudo o que é orientado objeto, parte do princípio do mini mundo.
muitas variáveis deixam seu código pesado.
para um algoritmo eficiente, não basta apenas ser um bom programador.
a primeira programadora foi uma mulher.
ada lovelace foi a primeira programadora.
ada lovelace também criou a primeira linguagem de programação.
a programação foi fortemente influenciada pela matemática e a ciência.
a evolução dos computadores foi seguindo os avançoes matemáticos de suas épocas.
não se sabe se programação é uma ciência, uma matemática ou filosofia.
programação é uma invenção recente.
nem sempre a programação foi feita através de uma linguagem.
muitas linguagens de programação possuem máquinas virtuais.
compiladores são diferentes de interpretadores.
ide são conjuntos de ferramentas para desenvolvimento.
a ide mais usada é o visual studio.
o visual studio code é usado para criação e desenvolvimento voltado a web.
programação não se limita apenas a aplicativos.
hoje em dia existe vários tipos de softwares.
não existe um padrão para considerar um algoritmo como eficiente.
a lógica é o primeiro passo para se programar.
o visual g é bastante usado para aprender programação.
o visual g é um pseudocódigo.
lua é uma linguagem de programação brasileira.
lua é usado bastante no exterior.
no brasil é mais usado c sharp e java.
uma estrutura de repetição é uma estrutura de desvio do fluxo de controle presente em linguagens de programação que realiza e repete diferentes computações ou ações
a construção para, ou repetição com variável de controle, é uma estrutura de repetição que designa uma variável de controle para cada iteração do bloco, e uma operação de passo a cada iteração
o comando interrompa permite parar uma execução de uma instrução de repetição toda vez que o mesmo for invocado, ignorando, caso ainda existam, outras instruções a serem executadas
a construção enquanto também chamada repetição pré-testada é a mais difundida estrutura de repetição. 
o processo de repetição continua enquanto o valor da expressão de controle for verdadeiro.
a construção repita também chamada repetição pós-testada é uma variação da construção apresentada anterior enquanto, e difere pois a verificação da condição é feita após uma execução do bloco. 
o processo de repetição continua enquanto o valor da expressão de controle for falso
é a descrição, de forma lógica, dos passos a serem executados no cumprimento de determinada tarefa
é a forma pela qual descrevemos soluções de problemas do nosso mundo, afim de serem implementadas utilizando os recursos do mundo computacional. 
como este possuí severas limitações em relação ao nosso mundo, exige que sejam impostas algumas regras básicas na forma de solucionar os problemas para que possamos utilizar os recursos de hardware e software disponíveis.
um algoritmo é uma seqüência lógica de ações a serem executadas para se executar uma determinada tarefa
um programa é a formalização de um algoritmo em uma determinada linguagem de programação, segundo suas regras de sintaxe e semântica, de forma a permitir que o computador possa entender a seqüência de ações.
uma linguagem de programação é um conjunto de símbolos e regras de sintaxe que permitem a construção de sentenças que descrevem de forma precisa ações compreensíveis e executáveis para o computador
uma linguagem de programação é uma notação formal para descrição de algoritmos que serão executados por um computador. 
como todas as notações formais, uma linguagem de programação tem dois componentes sintaxe e semântica. 
a sintaxe consiste em um conjunto de regras formais, que especificam a composição de programas a partir de letras, dígitos, e outros símbolos
regras de sintaxe podem especificar que cada parênteses aberto em uma expressão aritmética deve corresponder a um parênteses fechado, e que dois comandos quaisquer devem ser separados por um ponto-e-vírgula
as regras de semântica especificam o significado de qualquer programa, sintaticamente válido, escrito na linguagem.
existem diversas linguagens de programação, cada uma com suas características específicas e com níveis de complexidade e objetivos diferentes
linguagem de máquina única compreendida pelo computador específica de cada computador.
linguagens de baixo nível utiliza mnemônicos para representar instruções elementares ex assembly
linguagens de alto nível utiliza instruções próximas da linguagem humana de forma a facilitar o raciocínio. ex uso científico fortran propósito geral pascal, c, basic uso comercial cobol, clipper uso específico lisp, prolog
linguagens de máquina são projetadas levando-se em conta os seguintes aspectos rapidez de execução de programas custo de sua implementação; e flexibilidade com que permite a construção de programas de nível mais alto.
linguagens de programação de alto nível são projetadas em função de facilidade de construção de programas; e confiabilidade dos programas.
o problema é como a linguagem de nível mais alto pode ser implementada em um computador, cuja linguagem é bastante diferente e de nível mais baixo solução através da tradução de programas escritos em linguagens de alto nível para a linguagem de baixo nível do computador. 
três tipos de programas tradutores montadores, interpretadores e compiladores
montador efetua a tradução de linguagem de montagem  assembly  para a linguagem de máquina, da seguinte forma obtém a próxima instrução do assembly; traduz para as instruções correspondentes em linguagem de máquina; seis executa as instruções em linguagem de máquina; e repete o passo um até o fim do programa
interpretador efetua a tradução a de uma linguagem de alto nível para linguagem de máquina da seguinte forma obtém próxima instrução do código-fonte em linguagem de alto nível; traduz para as instruções correspondentes em linguagem de máquina; executa as instruções em linguagem de máquina; e repete o passo um até o fim do programa
compilador efetua a tradução de todo o código-fonte em linguagem de alto nível para as instruções correspondentes em linguagem de máquina, gerando o código-objeto do programa. em seguida é necessário o uso de um outro programa  link-editor  que é responsável pela junção de diversos códigos-objeto em um único programa executável.
possibilidades de erros no programa erros de compilação erros de digitação e de uso da sintaxe da linguagem. erros de link-edição erro no uso de bibliotecas de sub-programas necessárias ao programa principal. erros de execução erro na lógica do programa algoritmo .
integridade refere-se à precisão das informações manipuladas pelo programa, ou seja, os resultados gerados pelo processamento do programa devem estar corretos, caso contrário o programa simplesmente não tem sentido;
clareza refere-se à facilidade de leitura do programa. 
se um programa for escrito com clareza, deverá ser possível a outro programador seguir a lógica do programa sem muito esforço, assim como o próprio autor do programa entendê-lo após ter estado um longo período afastado dele. 
simplicidade a clareza e precisão de um programa são normalmente melhoradas tornando seu entendimento o mais simples possível, consistente com os objetivos do programa. 
eficiência refere-se à velocidade de processamento e a correta utilização da memória.
um programa deve ter performance suficiente para atender às necessidade do problema e do usuário, bem como deve utilizar os recursos de memória de forma moderada, dentro das limitações do problema
modularidade consiste no particionamento do programa em módulos menores bem identificáveis e com funções específicas, de forma que o conjunto desses módulos e a interação entre eles permite a resolução do problema de forma mais simples e clara;
generalidade é interessante que um programa seja tão genérico quanto possível de forma a permitir a reutilização de seus componentes em outros projetos.
um algoritmo é uma sequencia lógica de instruções que devem ser seguidas para a resolução de um problema ou para a execução de uma tarefa
pseudocódigo utiliza uma lingugem estruturada e se assemelha a um programa escrito na linguagem de programação pascal
o pseudocódigo é também denominado por alguns autores como português estruturado
a descrição narrativa utiliza linguagem natural para especificar os passos para a realização das tarefas.
o fluxograma é uma forma universal de representação, pois se utiliza de figuras geométricas para ilustrar os passos a serem seguidos para a resolução dos problemas.
o pseudocódigo é um tipo de algoritmo que utiliza uma linguagem flexível, intermediária entre a linguagem natural e a linguagem de programação
para cada projeto, cada trabalho, uma linguagem é mais indica da ou não
variável é um espaço alocado na memória para armazenar dados
o comando leia significa que o algoritmo está lendo o que o usuário digita e armazaena na variável
o comando enquanto é uma estrutura de controle de fluxo do tipo estrutura de repetição
processador executa os cálculos, a memória é responsável por armazenar dados e servi-los ao processador
real é o tipo de dados para valores numéricos negativos ou positivos, com casas decimais
algoritmo é simplesmente uma receita para executarmos uma tarefa ou resolver algum problema 
e como toda receita, um algoritmo também deve ser finito
a computação utiliza muito esse recurso, então se você pretende aprender programação, obviamente deve saber o que é algoritmo
é importante notar que o algoritmo tem um fluxo que pode seguir diferentes caminhos dependendo da situação em que se encontra
outro aspecto interessante é que o algoritmo é finito, uma hora ele tem que acabar.
esta representação gráfica do algoritmo é chamada de fluxograma
todas as tarefas executadas pelo computador, são baseadas em agoritmos
um algoritmo deve também ser bem definido, pois é uma máquina que o executará
composto por inúmeras contas, engenhosamente divididas de forma a permitir a execução de cálculos, o ábaco é um poderoso instrumento nas mãos de quem conhece como operá-lo, e de nenhuma valia para quem desconhece sua operação
esse é um processo algorítmico, na medida em que se trata de um processo repetitivo que, ao ser concluído, permite a obtenção do resultado procurado
o ábaco é, portanto, o primeiro dispositivo manual de cálculo conhecido
serve, basicamente, para representar números no sistema decimal e permite realizar operações de soma, multiplicação, subtração e divisão
para se ter ideia da longevidade desse instrumento, apenas em um mil e seiscentos e quatorze, o escocês john napier constrói uma máquina superior que permitia o cálculo de logaritmos usando bastões que faziam multiplicações e divisões de forma automática
não muito tempo depois, em um mil e seiscentos e setenta e um, o francês blaise pascal a primeira calculadora mecânica capaz de fazer somas e subtrações
chamada de pascaline, esta funcionava a base de engrenagens e foi um grande passo na direção da automação do processo de cálculo
a linguagem de programação pascal, base de produtos célebres na história da ti, como o ms-pascal, o turbo pascal e o delphi, tem seu nome em homenagem a esse célebre matemático e pensador francês
bem pouco tempo depois, ainda em um mil e seiscentos e setenta e seis, foi criada pelo alemão gottfried leibnitz uma máquina que era um aperfeiçoamento da pascaline
além das operações de soma e subtração, a máquina de leibnitz também efetuava multiplicações através de somas consecutivas
isso foi ocorrer apenas em um mil e oitocentos e um, quando o francês joseph-marie jacquard cria a primeira máquina mecânica programável, controlada por meio de cartões perfurados, que controlavam a confecção e o desenho nos tecidos
projetada e construída em um mil e oitocentos e vinte, pelo francês charles xavier thomas, foi criada a primeira máquina que realizava as quatro operações aritméticas básicas
tratava-se de uma evolução da máquina de leibnitz, que foi batizada de arithometer, provavelmente inaugurando algo que parece caminhar junto com a ti tecnologia da informação, os mneumônicos, abreviações ou junções de nomes nesse caso ari, de aritmética e thometer, uma variação a partir do nome do inventor
ada de lovelace foi uma das poucas pessoas que realmente entenderam os conceitos envolvidos no projeto de babbage
durante o processo de tradução de uma publicação científica italiana sobre o projeto de babbage, ela incluiu algumas notas de tradução que constituem o primeiro programa escrito na história da humanidade. muito justamente, ada também foi eternizada com o nome de uma linguagem de computador que leva seu nome
a matemática, naturalmente, não poderia ficar à parte dessa evolução, uma vez que esta foi a força motriz da ti desde o princípio
coube ao inglês george boole, em um mil e oitocentos e quarenta e sete, a criação de novos raciocínios aplicáveis ao estudo da computação, baseados na lógica binária
a lógica de programação atual ainda contém seus conceitos baseados nos estudos de boole
criada em um mil e oitocentos e oitenta e cinco pelo norte-americano herman hollerith, a tabuladora do censo foi utilizada no recenseamento, mas tornou-se sinônimo de recibo de pagamento dos trabalhadores
foi usada em muitos outros trabalhos, como o processamento de folha de pagamento, sendo aí considerada um dos primeiros passos na direção de um computador programável
um ponto bastante interessante a observar é que a empresa de hollerith se fundiu com outras quatro empresas, dando origem à computing tabulating recording corporation, que sob a presidência de thomas j. watson foi renomeada para ibm
muito pouco tempo depois, em um mil e novecentos e cinco, foram criadas as válvulas, pelo norte-americano lee de forest
essas seriam os principais componentes da primeira geração de computadores, algum tempo mais tarde
os computadores da chamada primeira geração foram criados prioritariamente para uso bélico, governamental, de grandes indústrias e de centros de pesquisa
seus usuários possuíam formação muito especializada e eram muito mais cientistas e pesquisadores do que qualquer outra função
o próprio termo usuário soa algo estranho, pois esses pioneiros se comunicavam em linguagem de máquina com esses equipamentos, ou seja, algo muito anterior aos assemblers, que são mneumônicos da língua inglesa que funcionam como instruções de computador
a linguagem de máquinas usada era um conjunto de zeros e uns, praticamente indecifrável atualmente
em um mil e novecentos e trinta e sete, o norte-americano howard aiken cria o primeiro computador eletromecânico, denominado mark i
em um mil e novecentos e quarenta e cinco, os primeiros computadores e suas salas lembravam mais ambientes de filmes de terror com suas válvulas, programação como os fios e outros apetrechos – do que a moderna computação
o mark i e seus sucedâneos ii, iii e iv foram os primeiros passos na direção do mainframe, que tomou sua primeira forma com o computador colossus, criado em um mil e novecentos e quarenta e três, a partir das ideias do inglês alan turing
trata-se do primeiro computador eletrônico mecânico programável
o colossus trabalhava com símbolos perfurados em fita de papel, que eram lidos por célula fotoelétrica
muito pouco tempo depois, em um mil e novecentos e quarenta e seis, foi criado pelos americanos john mauchly e j. presper eckert o primeiro computador eletrônico digital de grande porte, utilizando-se de válvulas
em um mil e novecentos e quarenta e sete, pelo húngaro john von neumann, com base em seus estudos feitos sobre o eniac, surge a definição do esquema básico de funcionamento dos computadores atuais
ainda em um mil e novecentos e quarenta e sete, surge o edvac eletronic discrete variable computer, que se utilizava da notação binária pura, o que simplificou enormemente a construção das ula unidade aritmética e lógica
a memória era construída com lâmpadas de mercúrio que excitadas por impulso elétrico enviavam sinais para frente e para trás, possibilitando leituras de zero ou um ligado desligado
marca-se aqui a separação das funções de operador e programador, cabendo ao operador a inserção dos comandos no painel e ao programador a resolução problemas e criação de novos programas. o uso do computador é otimizado a partir de então
é criado em um mil e novecentos e quarenta e sete, na universidade de stanford eua, o transistor, usado somente a partir da década posterior
o uso comercial em grande escala, todavia, só ocorreria no final da década de um mil novecentos e cinquenta
é o principal componente dos computadores de segunda geração
a raytheon lança, ainda em um mil e novecentos e quarenta e oito, o transistor comercial
surge em um mil e novecentos e cinquenta e dois reais, no bell laboratories eua, o computador usando transistor válvula em miniatura, que solucionou muitos problemas técnicos, tais como a queima de válvulas, aquecimento foi aumentada a velocidade e diminuído o tamanho dos computadores.
nota-se que a substituição de uma simples válvula queimada era um processo trabalhoso e lento
nessa geração de computadores, os usuários ainda necessitavam de formação específica e o uso dos computadores era muito restrito, exclusivo para grandes empresas, organismos do governo e centros de pesquisa
criado em um mil e novecentos e quarenta e nove reais, por mauchly computer corporation, o univac é o primeiro computador eletrônico disponível comercialmente 
trata-se também do primeiro computador adquirido no brasil, pelo ibge para apoio em estatísticas
o univacuniversal automatic computer era uma máquina eletrônica capaz de armazenar programas de computadores através de uma fita magnética de alta velocidade, ao invés dos cartões perfurados
usava o código bcd de seis bits com um de paridade
algum tempo depois, surgem as unidades de disco rígido que representaram uma revolução no armazenamento de dados, que antes eram armazenados em fitas
eram caríssimas, portanto incentivaram o uso da compactação dos dados
o famoso bug do milênio em grande parte ocorreu por isso, pois era vantajoso armazenar cinquenta e seis e não um mil e novecentos e cinquenta e seis reais
no ano de um mil e novecentos e sessenta e quatro reais, a ibm lança a série trezentos e sessenta reais, permitindo o uso desta tecnologia em empresas de grande e médio portes
a base tecnológica passou a ser o chip ou circuito integrado  compactação dos transistores em placas de silício
muito antes da fundação da intel, gordon moore vaticinou o que viria a ser uma das mais interessantes leis da ti
lei de moore o número de transistores dos chips terá um aumento de cem por cento, pelo mesmo custo, a cada período de dezoito meses
gordon moore, presidente da intel, escreveu esse artigo em um mil e novecentos e sessenta e cinco reais
criado em um mil e novecentos e setenta e cinco reais, baseado na cpu da intel oito zero oito zero, surge o altair oito oito zero zero, que é o primeiro computador pessoal portátil, produzido industrialmente para venda em massa, criado pelos norte-americanos ed roberts, forest m. mims iii, stan cagle e robert zaller
se não chegou a ser um grande sucesso comercial, motivou a criação de inúmeros outros microcomputadores, entre os quais se destaca o apple ii
lançado em um mil e novecentos e setenta e seis, por steve jobs e steve wozniak fundadores da apple corp, foi o primeiro microcomputador pessoal a ter sucesso comercial
em sequência, surgem os minicomputadores e derivados, até chegarmos aos microcomputadores e seus derivados, como o notebook
trata-se de uma indústria em evolução constante, sendo impossível prever aonde chegará
as linguagens de programação eram separadas, para fins didáticos, em gerações
atualmente, esse tipo de classificação perdeu o sentido, mas para efeito histórico relativo e para conhecermos a história das linguagens de programação, parece bastante adequado usarmos ainda esse antigo conceito
as linguagens de primeira geração assembly ou um gl referem-se ao código de máquina
é a única linguagem que um microprocessador pode entender nativamente
o código de máquina não pode ser escrito ou lido por um editor de texto e, portanto, é raramente usado por uma pessoa diretamente
foi usada apenas na programação dos primeiros computadores criados
naturalmente, era totalmente dependente do processador do computador para o qual se escrevia o programa
a linguagem de segunda geração ou dois gl é a linguagem assembler
é considerada de segunda geração, pois embora não seja uma linguagem nativa do microprocessador, um programador que use a linguagem assembler ainda deve compreender as características da arquitetura do microprocessador como registradores e instruções
há muitas controvérsias quanto a essa classificação, pois muitos autores entendem que assembler e assembly fazem parte de uma mesma geração de linguagens de programação
fazendo essa ressalva, vamos utilizar essa nomenclatura para nos referir ao assembly um gl e ao assembler dois gl
também há controvérsias quanto ao que seria a primeira geração de linguagens de alto nível três gl em nossa classificação
alguns autores entendem que fortran, cobol e algol seriam de uma geração, enquanto pascal e c seriam de uma geração posterior, em nome de uma maior estruturação dessas linguagens
novamente ficaremos com os autores que entendem ser de terceira geração as linguagens de alto nível escritas em derivações da língua inglesa, restritas a criação de programas na própria linguagem de programação
assim, todas essas linguagens citadas seriam de terceira geração, embora o tempo de criação entre as mesmas tenha sido substancialmente grande, como veremos mais adiante
embora o fortran tenha sido a primeira linguagem de terceira geração a ser usada, a primeira linguagem criada não foi esta
criada em um mil e novecentos e quarenta e seis, nomeada plankalkül por konrad zuse, engenheiro alemão, esta teria sido a primeira linguagem criada de alto nível
a polêmica existente resulta da publicação do trabalho de zuse apenas em um mil e novecentos e setenta e dois
zuse queria desenvolver um método sofisticado para o desenvolvimento das tarefas que a equipe deve fazer
não existem programas criados para essa linguagem de computador
sua máquina computadora s dois é considerada o primeiro computador controlado por processamento e não o mark i, como se popularmente diz, o qual foi usado para ajudar a desenvolver os mísseis henschel hs duzentos e noventa e três e henschel hs duzentos e noventa e quatro, precursores dos modernos mísseis de cruzeiro
feita essa ressalva, considera-se que a primeira linguagem de alto nível foi criada em um mil e novecentos e cinquenta e quatro pelo norte-americano john backus, da ibm, que a denominou fortran formula translation
pouco tempo depois, precisamente em um mil e novecentos e cinquenta e oito, surgem o algol – origem da maioria das linguagens modernas, e o lisp, criada por john maccarthy, norteamericano, no mit
em um mil e novecentos e cinquenta e nove, surge o cobol, com uma série de melhorias na entrada e saída de dados
criada por uma equipe de programadores, esta é a linguagem mais antiga em uso
foi concebida a partir dos esforços pioneiros da norte-americana, grace murray hopper, que foi analista de sistemas da marinha dos estados unidos nas décadas de um mil e novecentos e quarenta e um mil e novecentos e cinquenta, chegando à patente de almirante
foi ela quem criou a linguagem de programação flow-matic, que serviu como base para a criação do cobol
por isso, é considerada a autora do cobol
dentre outras realizações da almirante, está a criação do primeiro compilador, e cobol, sendo a primeira linguagem de programação de computadores a se aproximar da linguagem humana ao invés da linguagem de máquina
tanto fortran, como algol e lisp, eram mais próximas de uma linguagem de máquina do que da linguagem humana
de fato, cobol utiliza palavras da língua inglesa, mas busca uma maior proximidade com a construção humana das frases do que com algoritmos
a almirante hooper ficou conhecida popularmente como a velha do cobol, todavia ela não participou efetivamente na criação da linguagem cobol, mas sim um subcomitê proposto numa reunião no pentágono em maio de um mil e novecentos e cinquenta e nove
este subcomitê desenvolveu as especificações da linguagem cobol
ele era formado por william selden e gertrude tierney da ibm howard bromberg e howard discount da rca vernon reeves e jean e. sammet da sylvania electric products
a concepção de hopper é de que havia a necessidade de se criar uma linguagem orientada para negócios comuns, desde então, deu origem ao acrônimo cobol common business oriented language
tudo foi feito sem definir os comandos para minimizar melindres entre os técnicos das empresas convocadas a participar da criação de um denominador comum entre todos os fabricantes existentes na época
grace hopper participou contribuindo com a abertura dos comandos flowmatic
posteriormente, em um mil e novecentos e sessenta e quatro, surge o basic – beginners all-purpose symbolic instruction code, que foi criado originalmente para ensino, mas acabou por se tornar um dos padrões de desenvolvimento
bill gates ganhou um prêmio com a versão que criou mbasic, sendo o m de microsoft, ainda sem o indefectível s e que teve sua versão de maior sucesso criada em um mil e novecentos e noventa e um
em um mil e novecentos e sessenta e sete, surge o simula sessenta e sete, que introduz os conceitos de orientação a objetos, que muitos anos depois se tornaria o padrão a ser seguido por quase todas as linguagens de programação
pouco depois, em um mil e novecentos e setenta, surge o pascal, criado pelo húngaro niklaus wirth, que ganharia enorme popularidade na década de um mil e novecentos e oitenta, a partir da implementação do turbo pascal, pela borland
em um mil e novecentos e setenta e três, surge a linguagem c, aproveitando a linguagem bcpl, criada por dennis ritchie, da at&t
são linguagens de programação que podem criar programas em outras linguagens, que são voltadas a pesquisas, ou que por meio de interfaces permitem a criação de códigos sem a digitação efetiva de comandos
atualmente, faz pouco sentido buscar compreender hardware e software pelo conceito de geração, dadas as especificidades e intercorrências entre as influências sofridas e/ou causadas por determinada aplicação
assim, a partir da quarta geração de linguagens, não parece fazer muito sentido classificar tecnologias por geração
são especialmente notáveis algumas situações, que passamos a enumerar linguagens de interface com banco de dados surgiram com o intuito de acessar algum banco de dados, habitualmente baseados no modelo relacional
durante algum tempo contaram com mais usuários que as tradicionais linguagens de programação cobol, c, pascal e basic
no entanto, foi um fenômeno passageiro, que teve início em meados da década de um mil e novecentos e oitenta e tendo sido encerrado antes do final da década de um mil e novecentos e noventa
o maior destaque foi da nantucket clipper, mas data ease, data flex, foxpro, forms estão entre várias outras linguagens de acesso de forma proprietária a bancos de dados 
linguagens orientadas a objetos destacam-se o java, c sharpe, visual basic e delphi
atualmente, java e c sharpe dominam amplamente o mercado de desenvolvimento de software
quando observamos a palavra algoritmo, parece soar um pouco estranho aos nossos ouvidos, que são muito mais familiarizados com palavras de origens latinas do que árabes, o que é o caso de algoritmo
essa palavra deriva de al-khwarizmi, matemático persa do século ix, a quem se atribui a construção dos primeiros processos para realização de operações aritméticas, o que explica o porquê do nome de um matemático ter sido associado a um processo repetitivo que leva à solução de problemas complexos
por volta do século três a.c., outro matemático famoso, o grego euclides, escreve
seu famoso algoritmo para o cálculo do mdc máximo divisor comum.
é, provavelmente, o primeiro algoritmo complexo e formalizado de que se tem notícia
algoritmo, por definição, é uma sequência de instruções ordenada com o objetivo de resolver um problema
confunde-se frequentemente algoritmo e programa de computador, o que não tem razão de ser. simplesmente, usamos de um computador para executar um algoritmo
isso se deve ao fato do computador ser mais rápido e preciso que um ser humano máquina oligofrênica
no entanto, primeiramente, o algoritmo deve ser transcrito para uma linguagem de programação qualquer, antes de podermos usá-lo num computador
em seguida, esse código escrito numa linguagem de programação o programa deve ser transformado num programa executável num computador, portanto esse programa deverá ser compilado processo de validação da sintaxe utilizada e linkeditado processo de montagem do programa executável
serão apresentadas breves noções de fluxograma, observando-se sua pouca serventia em programas mais complexos, causando mais mal do que bem gane, um mil e novecentos e oitenta e três, p. quatro
é importante desenhar, rascunhar e usar de todos os artifícios para montar a lógica que nos leve à solução ou mesmo a um raciocínio intermediário
a primeira etapa – análise do problema consiste então na compreensão do problema e montagem de uma estratégia para sua resolução
você deve se lembrar, antes de qualquer outra coisa, que um algoritmo nada mais é que uma forma de representar a lógica que desejamos aplicar
assim, antes de construir um algoritmo, precisamos definir alguma estratégia
chamamos de dados de entrada o conjunto de informações que o programa precisa receber para início de processamento. no exemplo anterior, a base e a altura eram nossas entradas, necessárias para obtenção da área do triângulo, nosso objetivo
chamamos de dados de saída o conjunto de informações que o programa devolve como resposta após o processamento
observemos que nossa função, basicamente, é transformar informações iniciais que usualmente chamamos de dados, em informações finais, as respostas que serão usadas por quem utiliza um programa de computador
variáveis são, portanto, áreas de memória que armazenarão informações pertinentes ao programa durante sua execução, e recebem este nome pois seu conteúdo pode variar ao longo deste período
podem representar números inteiros, números reais, caracteres, tipos booleanos, palavras, datas, valores monetários, conjuntos e muito mais coisas
em algoritmos, vamos nos ater apenas nos tipos numéricos, caracteres e booleanos
num programa de computador devemos especificar os tipos de dados que serão utilizados como entrada e saída
por exemplo, no único algoritmo que vimos até agora, para cálculo da área de um triângulo, pudemos perceber que duas variáveis numéricas receberam, respectivamente, os valores da base e da altura de um triângulo, que teve sua área calculada e armazenada numa variável destinada ao cálculo da área
quando vertemos um programa para alguma linguagem de computador, devemos observar que nem tudo ocorre como pensamos em algoritmos, por vários motivos
uma delas é a chamada tipologia das variáveis de qualquer linguagem de computador
por exemplo, enquanto a linguagem java é tipada, ou seja, caso você tente fazer uma operação ilegal multiplicar um caractere, o compilador dirá a você
embora a linguagem c também seja tipada, ela o é de maneira fraca, isto é,se você tentar fazer uma operação como somar um caractere a um número, ela tentará solucionar isso para você, se isso for de interesse
por fim, há linguagens como pascal, que são fortemente tipadas
qualquer tentativa de misturar tipos, mesmo correlatos, será encarada como erro.
assim, se você tentar dividir o inteiro dois pelo inteiro um, em vez  de uma resposta inteira um, apenas obterá um erro
sendo assim, caso desejarmos dividir dois números inteiros, precisaremos usar uma operação de divisão inteira para números inteiros e uma para divisão que tenha como resposta um número real. pode parecer complicado, e de fato não é algo muito simples 
todavia, programadores experientes, com o tempo, trabalham tão naturalmente nas linguagens que dominam, que situações assim passam totalmente despercebidas
a seguir, exibimos alguns exemplos de tipos de variáveis em algumas linguagens de programação
existem vários operadores que podem ser aplicados a variáveis
temos as quatro operações elementares soma, subtração, multiplicação e divisão conhecidas por todos, acrescidas da operação resto da divisão
variáveis funcionam como repositório de informações dados dentro do programa e, por esta razão, estes repositórios de armazenamento devem ser alocados na memória do computador
a maioria das linguagens de programação obriga o programador a declarar as variáveis que serão utilizadas, apresentando-as no início do programa para que os recursos necessários sejam alocados
outras, entretanto, não obrigam a realizar esta declaração, alocando os recursos no momento em que as variáveis são mencionadas
se por acaso uma variável não venha a ter seu valor alterado ao longo da execução do programa, podemos declará-la como constante
essa situação decorre de muitas origens, por exemplo, a linguagem bcpl origem do c não obrigava a declaração de uma variável, antes de usá-la
no basic, isso também não era obrigatório. atualmente, entre outras, a linguagem php defende essa tradição
em pl/sql, por exemplo, os contadores de uma estrutura de repetição para a ser vista mais adiante, também não devem ser declarados
enfim, a grande regra das linguagens de programação e da lógica de programação é que a única certeza é que nada é certo
em português estruturado, por conseguinte, é opcional declarar ou não uma variável antes de usá-la
talvez seja uma boa ideia não perdermos tempo declarando-as, antes de termos nosso algoritmo inteiramente resolvido, e só depois disso, declararmos nossas variáveis
lembremos, contudo, que antes de transcrevermos um algoritmo em português estruturado para c, java ou pascal, será necessário criarmos todas as diretivas necessárias nas linguagens, ou seja, deveremos declarar as variáveis
para resolvermos um problema qualquer, quase que certamente precisaremos armazenar as informações de entrada na memória do computador
lembre-se, se por um lado, as variáveis são o sangue dos programas, por levarem as informações nossos nutrientes, por outro lado, são as maiores causadoras de erros, justamente por má utilização
como é fácil perceber, mudando-se de linguagem, muda-se a maneira como escrevemos um programa de computador, embora a lógica permaneça a mesma ou ao menos assemelhada
depois de declaradas, variáveis podem ser usadas livremente
a variável deve ter um nome que facilite o entendimento de sua função no programa. um bom nome para a variável que for armazenar o salário, por exemplo, seria salario
embora algumas linguagens permitam, atenha-se ao uso de apenas caracteres válidos na língua inglesa toda variável é composta de um caractere alfabético, seguido de caracteres alfabéticos ou números
em linguagens tipadas, apenas informações do mesmo tipo serão armazenadas nas variáveis, ou seja, não é possível armazenar um caractere em um inteiro ou vice-versa
para que o computador possa se comunicar com o usuário, é preciso que seja capaz de receber dados e devolvê-los
ao conjunto de instruções que permitem escritas em tela, papel ou mídias magnéticas, dados o nome de saídas
já aquelas relativas à digitação de dados ou de sua leitura em meios magnéticos, chamamos de entradas
entendemos saída, como o conjunto de instruções que permitem a comunicação com o usuário ou a escrita de dados ou de quaisquer outras informações em tela saída principal, papel impressora ou em disco gravação
para saída, usaremos, na maioria das vezes, o comando imprima, mas exiba ou escreva são igualmente válidos
em java, por exemplo, usamos a instrução system.out.print algo para imprimir e no c sharpe, console.writeimprima isso desempenha este papel
vale notar que a expressão a ser impressa aparece cercada por parênteses, recurso usado em inúmeras linguagens de programação
por ser uma expressão alfanumérica e não uma variável, a expressão aparece entre aspas, outra característica encontrada em inúmeras linguagens de programação
além disso, notamos que a instrução tem um terminador, no caso, o ponto e vírgula, novamente característica observada em inúmeras outras linguagens de programação
em pascal temos write algo a imprimir ou writeln algo a imprimir
a diferença entre um comando e outro é que no primeiro o cursor é posicionado na mesma linha do que foi impresso, enquanto que no segundo o cursor é posicionado na linha abaixo ln, de line
em linguagem c, a instrução varia levemente, printf, mas há necessidade de envio de um caractere especial solicitando o salto de linha \n.
em pascal, write/writeln, como em java
para a entrada de dados, utilizaremos a classe scanner em java conhecida como scanf em c ou console.readline, quando falamos em c sharpe
já em pascal, read/readln, pois com ela podemos capturar os dados informados através do teclado do computador
em todas as linguagens de programação dispomos de um conjunto de instruções para leituras nos mais diversos dispositivos, que resultam em entradas de dados
na evolução das linguagens de programação, sempre existiram dificuldades na separação do que seria uma instrução da própria linguagem e o que seria uma função a ser escrita na própria linguagem
por exemplo, dennis ritchie criador da linguagem c, a construiu com o firme propósito de torná-la rápida e independente do hardware computador onde será executada
para tanto, era fundamental tornar as instruções de entrada e saída funções que pudessem ser implementadas em c no próprio sistema operacional nativo, onde os programas compilados em c seriam executados
assim, foi criada em c uma biblioteca chamada stdio.h, que significa standard input output, ou seja, entradas e saídas padrão, em que comandos como imprima, que em c pode ser representado na função e não comando printf
trata-se de uma técnica muito útil para documentação de processos administrativos e que é usada por alguns autores como apoio ao aprendizado de lógica de programação
o fluxograma, também conhecido como diagrama de blocos, é uma forma quase que universal de representação, pois utiliza figuras geométricas para ilustração dos passos a serem observados na resolução de problemas
dependendo do valor de uma ou mais variáveis, o algoritmo pode tomar rumos distintos e, muitas vezes, tornar-se errado
quando a expressão analisada for verdadeira, segue-se pela linha do então.
por outro lado, quando a situação analisada é falsa, adota-se a linha do senão
de maneira análoga, quando a barra de endentação existente depois do senão, conterá o conjunto de instruções a serem executadas, caso a condição testada não seja verdadeira, ou seja, caso o valor do d seja positivo ou zero
é fácil perceber que simplesmente as chaves do java foram substituídas pelas palavras begin-end em pascal, que representam o começo e o final do bloco de instruções
observe ainda que as linguagens de programação têm sintaxes bem próprias e particulares, como são os idiomas humanos
mesmo a posição em que as instruções devem ser escritas, varia de linguagem para linguagem
a posição das instruções para imprimir um valor em java deve ser escrita abaixo da expressão analisada ou da palavra else,deslocando-se o código um pouco à direita, para dar uma ideia de reentrância
já em pascal, sugere-se fortemente que essa distância seja de três letras.
assim, o w de write deveria estar abaixo do e de else
os clássicos livros de pascal ou de turbo pascal, como os escritos por steve wood, são categóricos a esse respeito
em cobol, o espaço existente é obrigatoriamente estabelecido
ou seja, se algo é esperado em determinada coluna e estiver colocado numa coluna adiante ou anterior, será tratado como erro
daí a existência de vários editores de programa, que são muito específicos em relação à linha e à coluna em que se está escrevendo, justamente para permitir ao programador o controle exato da localização de um bloco de instruções
não é tão simples notar, mas antes da palavra else senão em pascal, nunca se usa o terminador ponto e vírgula, pois a instrução se só termina, se tiver senão ao final deste
esse tipo de situação jamais ocorrerá em java, pois em java o símbolo fecha a chave impede essa ocorrência
em linguagem c, contudo, o problema não é resolvido tão facilmente
como se vê, ao aprender lógica de programação você está aprendendo a pensar de forma a poder se expressar em qualquer que seja a linguagem de programação, mas antes de sair programando numa linguagem, obrigatoriamente terá de compreendê-la e dominar sua sintaxe, que pode ser algo muito mais complexo do que aparentemente parece
toda e qualquer instrução tem uma sintaxe, ou seja, uma forma exata como deverá ser escrita
vamos, por assim dizer, definir como se descreve as sintaxes, usando para isso a instrução se
os símbolos colchetes indicam opcionalidade. trata-se de uma parte do código que não é obrigatória, ficando a critério do programador usá-la ou não
as expressões existentes entre os símbolos que são chamadas popularmente de tags, devido ao seu grande uso em linguagens de hipertexto, como é o caso do html e suas derivadas contêm expressões ou comandos a serem testados ou executados
as palavras reservadas estão em negrito e não poderão jamais ser usadas como variáveis, quer seja em nossa codificação português estruturado ou nas linguagens de programação
assim, se jamais poderá ser uma variável em nossos programas, como if jamais poderá ser uma variável nas linguagens java e pascal, como pudemos notar nos exemplos escritos naquelas duas importantes linguagens de programação
vamos considerar termos duas variáveis a e b, mas que em vez de valores, tenham conteúdos booleanos, ou seja, assumem apenas situação de verdadeiro ou falso
podemos fazer uma analogia com um trem, que tem a frente um desvio.
uma baliza ou flag, se usarmos seu sinônimo em inglês vai definir o destino desse hipotético trem
supondo que nosso trem esteja partindo de paris, mas num entroncamento é decidido se ele irá para roma ou para berlim
se esse entroncamento for uma variável, a por exemplo, podemos definir que sempre que a for verdade, então o trem irá para roma
em caso contrário, irá para berlim. todavia, podemos inserir novas variáveis
por exemplo, uma variável b que quando o trem não for para roma, permita decidir se seu destino será berlim ou praga
além disso, podemos incluir as palavras e, para indicar que uma condição somente estará satisfeita se duas premissas forem simultaneamente verdadeiras ou ou que indica que uma condição estará satisfeita, quando ao menos uma das condições for verdadeira
voltando ao nosso hipotético trem, poderíamos dizer que ele irá para roma se a e b forem simultaneamente verdadeiros
quando um dos dois for falso, poderíamos estabelecer que se a for falso e b verdadeiro, então vamos para berlim
a instrução se pode ser usada de forma simples, como fizemos nos algoritmos
anteriores, mas também pode analisar expressões mais complexas.
relembrando, o símbolo % porcentual é utilizado para realizar divisões e retornar o resto da mesma
surpreendente ou não, é exatamente assim que uma expressão se com duas condições ligadas com ou se comporta se a primeira expressão for verdadeira, o processamento segue adiante e o tratamento é realizado, sem sequer verificar a segunda condição – essa só é realmente verificada se a primeira condição for falsa
os algoritmos contribuíram para a evolução tecnológica vista nas últimas décadas e são cada vez mais complexos, com o objetivo de entender o comportamento humano na internet, em especial, nas redes sociais
quando se fala em algoritmo, muitas pessoas pensam rapidamente em computadores, tecnologia e até mesmo códigos difíceis de serem compreendidos
os algoritmos datam de tempos babilônicos, mas tornaram-se mais conhecidos na modernidade, principalmente, quando associados aos computadores e às estratégias de otimização para buscadores
o termo pode ser entendido como uma sequência de raciocínios, instruções ou operações para alcançar um objetivo, sendo necessário que os passos sejam finitos e operados sistematicamente
alguns exemplos de algoritmos que podemos citar são receitas culinárias, manual de instrução de aparelhos, funções matemáticas e até mesmo páginas da web, como esta que você está lendo
um algoritmo, portanto, conta com a entrada input e saída output de informações mediadas pelas instruções
é fundamental compreender que o algoritmo se justifica no resultado que ele almeja alcançar, logo, deve ter um objetivo específico
uma sequência de instruções simples pode se tornar mais complexa conforme a necessidade de considerar outras situações
dessa forma, o algoritmo vai crescendo e ficando mais complexo para englobar todos os cenários possíveis
quando um programa de computador trava, por exemplo, é porque ele está recebendo informações que não foi programado para processar, ou seja, não foram considerados todos os cenários
também é relevante que a estrutura siga uma lógica sistemática
com o código, é a mesma coisa, sendo necessário ler linha por linha para que ele atinja o objetivo final
variáveis são as informações de entrada inseridas que determinam aonde o algoritmo poderá ir. as mais comuns são texto, inteiro, lógico e real
comandos de repetição consiste no uso de se e enquanto, para que o algoritmo saiba o que fazer quando determinados processos ocorrerem e o que fazer se eles mudarem
com essas duas estruturas, o algoritmo fica mais completo e capaz de englobar múltiplas situações para permitir que o resultado final seja alcançado
atualmente, diversas polêmicas estão relacionadas a como as grandes empresas de tecnologia têm usado os algoritmos para impactar a vida das pessoas
um dos casos mais famosos é o algoritmo do facebook, que define o que será exibido no feed de notícias de cada usuário
apesar de muito criticado, pois o algoritmo pode ser alterado para determinados fins, o recurso proporciona uma mediação mais neutra sobre o que é exibido para cada usuário
dessa forma, assuntos mais comentados tendem a aparecer para mais pessoas,mas também estão relacionados com preferências, histórico, comportamento etc
portanto, um dos benefícios atualmente é que o algoritmo busca fazer essa mediação mais equilibrada entre tudo que está disponível online e filtrar o que é mais relevante de ser exibido
os programas são compostos por sequências de algoritmos
dessa forma, é essa sistematização que viabiliza todo tipo de softwares que facilitam a vida e também permitem a automação dos processos
a partir do machine learning, os processos são aprendidos pelas máquinas e reproduzidos, consistindo em um algoritmo complexo que faz a entrada e o processamento dos dados, em que a saída torna-se a entrada de uma estrutura e, assim, sequencialmente, fornecendo lógica e capacidade de aprendizado aos softwares
a evolução humana nas últimas décadas está totalmente atrelada à ideia de algoritmos. aparelhos como smartphones, computadores, smart tvs e tablets funcionam com sistemas baseados em algoritmos
conforme novos comandos e possibilidades de uso surgem, significa que mais aprimorados e complexos estão os níveis de instrução de um algoritmo
assim como a tecnologia em si, as aplicações estão difundidas em diferentes áreas, como marketing, vendas, relacionamento, compras online, logística, financeiro etc
um exemplo inédito de uso de um algoritmo é o vital, que, desde dois mil e quatorze, faz parte da direção da deep knowlegde ventures, uma empresa de capital de risco de hong kong
com direito a voto no conselho, o algoritmo faz a recomendações de investimentos após a análise de grandes quantidades de dados e testes clínicos
mas também é preciso estar atento ao uso dos algoritmos, principalmente, quando não supervisionados
em dois mil e onze, uma situação não explicada fez com que o livro the making of a fly, de peter lawrence, alcançasse o valor de um vírgula sete bilhão de dólares na amazon e, em seguida, subisse para quase vinte e três vírgula sete bilhões de dólares mais frete. a empresa, que usa algoritmo para precificação, não conseguiu explicar a anormalidade
ao explorar o mundo dos algoritmos, podemos seguir por uma infinidade de campos e também de exemplos
é provável que o algoritmo do google seja o mais conhecido e não é por acaso que seu segredo é muito bem guardado pela empresa
o pagerank, como é chamado, foi criado em um mil e novecentos e noventa e oito, com o objetivo de rastrear e apresentar os resultados de pesquisa ao usuário por relevância
a importância de um site era determinada pela quantidade de sites vinculados a ele, o que tornava relativamente fácil burlar os resultados, surgindo o black hat, que usa más práticas para tentar enganar o pagerank
desde então, o google já promoveu uma série de mudanças no algoritmo, passando a considerar centenas de variáveis para que uma página seja rankeada. atualmente, o modelo verifica questões como as preferências do usuário, aparelho usado, qualidade do conteúdo, localização etc
o facebook foi a primeira rede social a usar algoritmos para categorizar os posts e utilizar critérios para definir o que seria ou não exibido para cada usuário. o objetivo era mostrar os conteúdos mais relevantes de acordo com o comportamento, preferências e engajamento do usuário
apesar das críticas à empresa, o excesso de publicações faz com que seja difícil uma pessoa acompanhar tudo que acontece na rede
portanto, diversos elementos são considerados pelo algoritmo antes de definir quais conteúdos serão exibidos no feed de notícias, buscando mais relevância e engajamento do usuário no facebook
diferentemente de outras redes sociais, o twitter não usa exclusivamente o algoritmo para determinar o feed. isso se deve ao caráter cronológico que precisa ser mantido pela rede para que atenda ao objetivo de disponibilizar os acontecimentos mais recentes
com tudo que vimos até aqui, é possível perceber que os algoritmos — que explicamos inicialmente como um sistema de instruções com um objetivo específico — ganham contornos bastante complexos conforme seu uso em áreas mais robustas, como o marketing digital
atualmente, o modelo pode ser unido ao machine learning e gerar resultados mais complexos e surpreendentes, sendo imprescindível para quem atua nessa área conhecer essas possibilidades
se o gestor de marketing conhece a estratégia da empresa e os critérios considerados pelos algoritmos dos diferentes canais sociais, é possível elencar em quais plataformas a solução proposta por ela pode ser mais eficaz e gerar melhores resultados
por exemplo, se a estratégia é mais baseada em engajamento, o facebook ganha destaque, no entanto, se o objetivo passa por muitas publicações de teor mais urgente, o twitter torna-se mais adequado
então, conhecendo como cada plataforma funciona, junto com outros critérios, é possível elencar qual delas tende a contribuir mais com a presença online da marca
independentemente do canal usado e persona, as diferentes empresas têm um objetivo em comum melhorar a experiência do usuário
dessa forma, torna-se indispensável que haja qualidade e relevância nos conteúdos criados para as diferentes plataformas, além de considerar as estratégias de seo para executá-los
por exemplo, uma campanha divulgada no facebook e instagram deve considerar as particularidades do algoritmo de cada rede para ser mais interessante e, assim, ganhar um destaque maior
a análise da complexidade de um algoritmo visa, em última análise, estimar o tempo de execução de um algoritmo
a complexidade do algoritmo nada mais é que uma ideia do esforço computacional despendido para o computador resolver determinado problema
antes de um mil e novecentos e setenta, esse estudo do comportamento algorítmico era feito de forma empírica, por meio de medições
a partir de determinado conjunto de dados, simplesmente se media o tempo que um conjunto de operações de um algoritmo demorava
devemos observar que para podermos afiançar se um programa funciona com o desempenho necessário, o processo empírico é muito frágil para garantir algo
todavia, se tomarmos um computador três vezes mais veloz que outro ou um compilador dez vezes mais rápido que outro, determinado algoritmo irá funcionar três ou dez vezes mais rápido, na dependência exclusiva do hardware e/ou software envolvidos
parece fácil intuir que separados os aspectos tecnológicos envolvidos, ao final, resta apenas a qualidade do algoritmo a determinar o desempenho do algoritmo em questão
em outras palavras, o que se deseja efetivamente é avaliar o desempenho do algoritmo independentemente de sua implementação, em função apenas das instruções executadas
a complexidade algorítmica é determinada, por sua vez, pelo número de vezes que uma instrução básica é executada
nesse quesito, podemos facilmente intuir que a complexidade é diretamente influenciada pelos laços de repetição. obviamente, dependendo dos valores na entrada, de seus tipos e tamanhos, poderemos ter aumento ou redução dos tempos associados à execução de um algoritmo
vamos imaginar que precisemos calcular um aumento de todos os itens de uma lista com dez mil registros.
obviamente, esse cálculo será muito mais demorado que o mesmo cálculo aplicado a uma lista de dez registros
os algoritmos que executam operações sobre vetores tratando-os como listas lineares, ou seja, com acesso sequencial entre eles, a complexidade é expressa em função do tamanho do vetor, como seria natural se esperar
por outro lado, como os valores da lista e a configuração dos dados influem no processo, não é possível obter uma única função que descreva todas as possibilidades existentes, relativas a qualquer algoritmo
mesmo em vetores de tamanhos idênticos, se estivermos buscando um elemento aleatoriamente, é bastante provável que não importa o local onde este esteja, teremos um mesmo tempo para listas de tamanho idêntico
pior caso caracteriza-se por entradas que resultam em maior crescimento do número de operações executadas pelo algoritmo quanto maior for o valor de n
melhor caso caracteriza-se por entradas que resultam em menor crescimento do número de operações executadas pelo algoritmo quanto maior for o valor de n
caso médio caracteriza-se pela esperança matemática envolvida no comportamento médio do algoritmo, em função da probabilidade matemática associada às entradas de dados possíveis
se tivermos dois algoritmos equivalentes, apenas sua complexidade poderá demonstrar cabalmente qual é o melhor deles
a notação o é usada para expressar comparativamente o crescimento assintótico de duas funções
quando estudamos a complexidade algorítmica, é relevante saber como se comporta a função, à medida que aumentamos o tamanho de n ou seja, o tamanho do vetor, do que conhecer valores específicos que a função possui para particulares n
algumas funções elementares são utilizadas como referência para classes algorítmicas, como um, n, ln n, n ln n, ndois, doisn etc
vetores e matrizes são variáveis compostas e homogêneas
a distinção entre elas está no fato de os vetores serem um caso particular de matrizes, ou seja, matrizes unidimensionais são também chamadas de vetores
a maioria das linguagens de programação, como todas as derivadas do basic,c., cobol, entre outras, respeita essa definição, portanto os vetores são um conjunto de variáveis do mesmo tipo, ou seja, são homogêneos
uma importante exceção a essa regra é a linguagem clipper, que permite que um vetor tenha elementos não homogêneos, isto é, alguns de seus elementos podem ser números, outros, datas ou compostos por caracteres, por exemplo
todos os elementos do vetor têm um mesmo identificador, isto é, um mesmo nome, e são alocados continuamente na memória do computador
como qualquer variável, e como todos os elementos de um vetor de mesmo nome, a maneira de nos referir a cada um de seus elementos se faz por meio de um índice que permite obter o valor armazenado em determinada posição desse vetor
um índice, que sempre deve ser um número inteiro, nada mais é que a referência da localização do elemento do vetor
na inicialização do vetor, na maioria das linguagens, determina-se o seu tamanho que geralmente não se modifica, mesmo que utilizemos menos elementos do que determinado a princípio
em algumas linguagens de programação, como o pascal e o cobol, é impensável expandir o tamanho de um vetor, pois essas linguagens tratam os vetores em posições contíguas de memória, o que impede eventuais expansões
em outras linguagens, como o basic, essa expansão é possível, mas deve ser cuidadosamente utilizada, pois se a extensão do vetor passar de certos limites e violar o espaço de memória disponível, só restará ao sistema operacional suspender a execução do programa gerando um erro de execução
finalmente, em outras linguagens, como o c, é possível verificar-se o espaço livre em memória, alocar-se o espaço desejado e expandir-se o vetor
todavia, para fins algoritmos, a maioria dos autores prefere partir do princípio que o tamanho de qualquer vetor ou matriz seja definido na área de declaração do programa e não seja expandido, princípio que também adotaremos
utilizamos um vetor para representar dados em termos de conjuntos.
um vetor, então, trata-se de uma coleção de variáveis de um mesmo tipo, que compartilham o mesmo nome e que ocupam posições consecutivas de memória
cada variável dessa coleção denomina-se elemento, que é identificado por um índice
para podermos acessar os dados armazenados no vetor, é necessário fornecer o nome do vetor seu identificador e o índice do elemento desejado
cada posição do vetor contém um e somente um valor
para se declarar o vetor, deve-se fornecer seu nome como em qualquer outra variável, precedido por dois pontos, a palavra matriz, o tamanho do vetor entre colchetes sua capacidade seguido do tipo de dados que o vetor irá armazenar
toda vez que necessitarmos armazenar um conjunto de valores em memória, um vetor parece ser o melhor candidato para a tarefa
os algoritmos podem até afetar a forma como os cidadãos votam, alterando o resultado de uma eleição
uma das vantagens dos algoritmos é que eles possuem uma lógica em comum
ou seja, se você aprende a lógica por trás dos algoritmos computacionais, você poderá programar em praticamente qualquer linguagem de programação
o que vai mudar de uma linguagem para a outra, geralmente, são as palavras reservadas, sintaxes e a forma como cada uma irá se estruturar
uma sequência de raciocínios ou operações que oferece a solução de certos problemas
isso significa que os algoritmos são uma série de passos necessários para resolver um determinado problema
você precisa entender que programar significa aplicar lógica e algoritmos para solucionar problemas reais do nosso dia-a-dia
contudo, uma vez que você vence o obstáculo inicial, que seria criar seus primeiros algoritmos e aprender a programar em uma primeira linguagem, as coisas começam a ficar mais fáceis
a primeira parte de um algoritmo é saber com que tipo de dados que o algoritmo está lidando. dessa forma, você saberá com o que precisa se preocupar no segundo passo, que é o processamento dos dados
uma forma de construir esse algoritmo seria tendo um contador que inicie em zero e vá aumentando a cada letra que for adicionada
algoritmos podem funcionar de diferentes formas, dependendo de quem está desenvolvendo a solução
é possível aprender algoritmos e lógica de programação mesmo sem ser um craque nas exatas
uma boa forma de entender melhor o que é lógica de programação e de saber exemplos de como ela se aplica em nosso dia-a-dia
na hora de executar o código, ele vai ler linha por linha assim como nós lemos, uma após a outra
claro que esse algoritmo é muito simples e não prevê diversas situações que provavelmente iriam acontecer
contudo, ele serve muito bem para ilustrar a lógica das estruturas de repetição que existem por trás de praticamente todos os algoritmos
em outras palavras, isso também mostra como os algoritmos e a lógica de programação é mais simples do que parece
geralmente quando o pessoal escuta a palavra algoritmo, esse mesmo pessoal fica assustado e já imaginando algo complexo e difícil
o algoritmo nada mais é do que uma receita, uma sequência de passos e instruções para executar ações, visando solucionar um problema
aprender algoritmos e lógica de programação não é um bicho de sete cabeças
lógica de programação é o modo como se escreve um programa de computador, um algoritmo
um algoritmo é uma sequência de passos para se executar uma função. um exemplo de algoritmo, fora da computação, é uma receita de bolo
na informática, os programadores escrevem as receitas de bolo algoritmos de modo que o computador leia e entenda o que deve ser feito, ao executar o algoritmo
a linguagem de programação é como uma língua normal, um grupo de palavras com significados
no caso da programação, a maioria das linguagens é escrita em inglês.
estas linguagens fazem o computador assimilar cada comando e função de um algoritmo, depois executar cada função
a linguagem de programação é somente como se escreve o algoritmo
o grande problema para muitos é o que dizer para o computador fazer o que é desejado
para o aprendizado foi desenvolvido o software visualg, que auxilia a programação totalmente em português. com este software, não é necessário pensar em linguagem de programação, pois todos os comandos são em português, ficando assim o foco na lógica
na hora de programar alguns passos são indispensáveis, como declarar variáveis
variáveis podem ser escritas por letras ou números, que representam um valor que pode ser mudado a qualquer momento
cada variável tem um espaço na memória para armazenar seus dados. porem existem vários tipos de dados
saber lógica de programação é saber o melhor jeito de escrever um código, para o computador interpretar corretamente
lógica de programação é a técnica de desenvolver algoritmos sequências lógicas para atingir determinados objetivos dentro de certas regras baseadas na lógica matemática e em outras teorias básicas da ciência da computação e que depois são adaptados para a linguagem de programação utilizada pelo programador para construir seu software
um algoritmo é uma sequência não ambígua de instruções que é executada até que determinada condição se verifique. mais especificamente, em matemática, constitui o conjunto de processos e símbolos que os representam para efetuar um cálculo
o conceito de algoritmo é frequentemente ilustrado pelo exemplo de uma receita, embora muitos algoritmos sejam mais complexos
eles podem repetir passos fazer iterações ou necessitar de decisões tais como comparações ou lógica até que a tarefa seja completada
um algoritmo corretamente executado não irá resolver um problema se estiver implementado incorretamente ou se não for apropriado ao problema
um algoritmo não representa, necessariamente, um programa de computador, e sim os passos necessários para realizar uma tarefa
sua implementação pode ser feita por um computador, por outro tipo de autômato ou mesmo por um ser humano
diferentes algoritmos podem realizar a mesma tarefa usando um conjunto diferenciado de instruções em mais ou menos tempo, espaço ou esforço do que outros
tal diferença pode ser reflexo da complexidade computacional aplicada, que depende de estruturas de dados adequadas ao algoritmo
um algoritmo para se vestir pode especificar que você vista primeiro as meias e os sapatos antes de vestir a calça enquanto outro algoritmo especifica que você deve primeiro vestir a calça e depois as meias e os sapatos
fica claro que o primeiro algoritmo é mais difícil de executar que o segundo apesar de ambos levarem ao mesmo resultado
o conceito de um algoritmo foi formalizado em um mil e novecentos e trinta e seis pela máquina de turing de alan turing e pelo cálculo lambda de alonzo church, que formaram as primeiras fundações da ciência da computação
para algoritmos intermináveis o sucesso não pode ser determinado pela interpretação da resposta e sim por condições impostas pelo próprio desenvolvedor do algoritmo durante sua execução
a análise de algoritmos é um ramo da ciência da computação que estuda as técnicas de projeto de algoritmos e os algoritmos de forma abstrata, sem estarem implementados em uma linguagem de programação em particular ou implementadas de algum outro modo
entretanto, a maioria dos algoritmos são desenvolvidos para programas de computador, para isto, existe uma grande variedade de linguagens de programação, cada uma com características específicas que podem facilitar a implementação de determinados algoritmos ou atender a propósitos mais gerais
um algoritmo que realiza uma tarefa em dez horas é melhor que outro que realiza em dez dias
um algoritmo que usa um megabyte de memória ram é melhor que outro que usa um gigabyte
um algoritmo que realiza uma tarefa em dez horas é melhor que outro que realiza em dez dias
um algoritmo que usa um mega de memória ram é melhor que outro que usa um giga
na programação de computadores, uma cadeia de caracteres ou string é uma sequência de caracteres, geralmente utilizada para representar palavras, frases ou textos de um programa
nas maioria das linguagens de programação, as cadeias de caracteres podem ser expressas tanto na forma literal, como através de algum tipo de variável.
quando expressos através de variáveis, o conteúdo da cadeia geralmente pode ser alterado pela inclusãoexclusão de elementos ou pela substituição de seus elementos por outros elementos, formando uma nova cadeia 
assim, uma cadeia de caracteres é vista como sendo um tipo de dado e normalmente é implementada através de um arranjo de bytes que armazena os elementos da cadeia em sequência, utilizando alguma codificação preestabelecida
nas linguagens formais, uma cadeia de caracteres é uma sequência finita de símbolos escolhidos a partir de conjunto denominado alfabeto
um tipo de dado cadeia de caracteres referido em programação geralmente como string é uma modelagem de uma cadeia formal de caracteres.
são bastante usados em programação, sendo implementados em quase todas as linguagens de programação
em algumas linguagens esse tipo strings em java são objetos que contém uma cadeia de caracteres
são imutáveis, portanto uma vez criadas não podem ser alteradas. 
caso ocorra uma concatenação de strings, um novo objeto é criado, e o antigo, automaticamente removido 
para consultar caracteres pelo índice utilize o método charat
o termo string serve para identificar uma sequência de caracteres
na prática, as strings são usadas para representar textos
em linguagem c, ao contrário de outras linguagens, não existe um tipo de dados string nativo
para representar uma string em c, devemos criar um vetor de caracteres, ou seja um vetor do tipo char
este comando cria a variável nomecliente como um vetor de char com capacidade de armazenamento de sessenta e um caracteres
ocorre, que o último caracter de uma string, deve ser sempre o caracter nulo  que serve para indicar o final da string
sendo assim, em nosso exemplo temos sessenta caracteres úteis para armazenar o nome, pois o  é o terminador da string e ocupa uma posição de armazenamento
como foram declaradas sessenta e um posições e uma delas é ocupada pelo terminador, as outras sessenta posições estão livres para armazenamento de caracteres
a fase de testes vem crescentemente  sendo valorizada
devemos lembrar que quem  faz  o  programa,  raramente  testa  seus  pontos  deficientes
isso  ocorre porque se o analista tivesse percebido essas deficiências, provavelmente  o programa não apresentaria esses problemas
há várias técnicas para testes caixa branca, caixa preta, entre várias outras
variáveis  funcionam   como  repositório  de  informações   dados  dentro do programa e,  por  esta  razão,   estes  repositórios  de  armazenamento   devem  ser alocados  na  memória  do  computador 
a maioria  das  linguagens  de  programaçãoobriga o programador  a declarar as variáveis que  serão utilizadas,  apresentandoas no  início  do  programa  para  que  os  recursos  necessários  sejam  alocados
outras, entretanto,  não obrigam a realizar esta declaração, alocandoos recursos no momento em que as variáveis são mencionadas
se por  acaso umavariável  não  venha  a terseu  valoralterado  ao  longo da execução do programa, podemos declarálacomo constante
essa  situação  decorre  de  muitas  origens,  por  exemplo,a  linguagem  bcpl origem do c não obrigava a declaração de uma variável,  antes de usá-la
em  plsql,  por  exemplo, os contadores de uma estrutura  de repetição para a ser vista mais adiante, também não devem ser declarados
enfim,   a  grande  regra  das  linguagens   de  programação  e  da  lógica  de programação é que a única certeza é que nada é certo
em português  estruturado,  por conseguinte,  é opcional declarar  ou não uma variável   antes   de  usá-la
talvez  seja  uma  boa  ideia  não  perdermos  tempo declarando  as,  antes  de termos  nosso algoritmo inteiramente  resolvido,e só depois disso, declararmos nossas variáveis
lembremos, contudo, que antes de transcrevermos um algoritmo em português estruturado  para  c,  java  ou  pascal,  será  necessário  criarmos  todas  as  diretivas necessárias nas linguagens,  ou seja, deveremos declarar as variáveis
para resolvermos  um problema qualquer,  quase que certamente  precisaremos armazenar as informações de entrada na memória do computador 
lembre-se,se por um  lado, as variáveis são o sangue  dos programas, por levarem  as informações nossos nutrientes,  por outro lado,são as maiores causadoras de erros, justamente por má utilização
a  variável  deve  terumnome  que  facilite o  entendimento  desua  função  no programa
um  bom nome para a variável  que for armazenar  o salário, por exemplo, seria salario
embora algumas  linguagens  permitam,  se atenham ao uso  de apenas caracteres válidos na língua  inglesa
para que o computador possa se comunicarcom o usuário,  é preciso que seja capaz  de  receber  dados  e  devolvê-los.   ao  conjunto   de  instruções  que permitem escritas em tela,  papel ou mídias  magnéticas, dados o nome de saídas
já aquelas relativas à digitação de dados ou de sua leitura em meios magnéticos,chamamos de entradas
entendemos  saída,  como  o  conjunto  de  instruções  que  permitem   a comunicação com o usuário ou a escrita de dados ou de quaisquer outras informações emtela  saída  principal,papel  impressora  ou  em  disco gravação
para  saída, usaremos, na maioria das vezes,o comando imprima, mas exiba ou escreva são igualmente  válidos
em  java,  por  exemplo,   usamos  a  instrução system.out.printalgo  para imprimire no c, console.write imprima isso desempenha este papel
vale notar que a expressão a ser impressa aparece cercada por parênteses, recurso  usado  em  inúmeras  linguagens  de  programação
por  ser  uma  expressãoalfanuméricae   não   uma   variável,   a   expressão   aparece   entre aspas,outra característica  encontrada em inúmeras linguagens  de programação
vimos  desde  o  princípio  deste  curso  que vários  problemas  possuem soluções distintas, mas que mesmo corretas, alguns algoritmos, por causa de suas  estratégias,  são  muito  mais  eficientes  que  outros 
no  caso  das  seis soluções para descobrirmos o maior entre três números,tivemos soluções que faziam um número muito grande de comparações, dezoito no pior caso
tivemos também uma solução que fez somente duas comparações
então é chegado o momento de nos determos mais na importante questão conceitual do desempenho algorítmico
notemos que se um programa ou algoritmo está correto, isto é, se atende à especificação para a qual foi concebido
assim, para determinado conjunto de entrada  de dados  válidos,  o  algoritmo  fornecerá  uma  saída  esperada  e adequada
para  garantia  da corretudede  um  programa  ou algoritmo,  podemos efetuar  testes  e  simulações,  mas  na  verdade  apenas  garantiremos  que  o algoritmo funciona para os testes executados
pensemos num vetor com dez elementos para execução de qualquer processo que seja
como esses elementos poderão ser combinados em arranjos distintos, o número exato de possibilidades é dez, ou seja, nada mais que milhares de possibilidades
a verificação do algoritmo é a ferramenta mais poderosa que existe para  garantir  a  corretude  de  um  algoritmo 
na  prática,  várias  situações prescindem desse tipo de abordagem, todavia se for necessária a comprovação de uma rotina, essa é uma das melhores formas de fazê-lo
em geral, pelo menos no processo de desenvolvimento de um algoritmo, fazemos alguns testes, habitualmente com um conjunto finito e bem determinado de itens, capazes de permitir a realização de testes que nos permitam descobrir erros grosseiros
já a eficiência de um programa ou algoritmo é avaliada em função da velocidade em que esse algoritmo resolve um problema, aliado ao consumo de a  análise  da  complexidade de  um algoritmo  visa,  em  última  análise, estimar o tempo de execução de um algoritmo
a complexidade do algoritmo nada  mais  é  que  uma  ideia  do  esforço computacional  despendido  para  o computador resolver determinado problema
antes de um mil e novecentos e setenta, esse estudo do comportamento algorítmico era feito de forma empírica, por meio de medições
ou seja, a partir de determinado conjunto de dados, simplesmente se media o tempo que um conjunto de operações de um algoritmo demorava
embora bastante útil, esse método traz em seu bojo vários problemas
depende do computador características físicas da máquina onde for  executado
depende da linguagem em que foi desenvolvido
depende do compilador em que a linguagem foi desenvolvida
depende do sistema operacional em que o sistema está rodando
depende  da  existência  de  outros  programas  compartilhando  a memória e processador da máquina
devemos observar que para podermos afiançar se um programa funciona com o desempenho necessário, o processo empírico é muito frágil para garantir algo
todavia, se tomarmos um computador três vezes mais veloz que outro ou um compilador dez vezes maisrápido que outro, determinado algoritmo irá funcionar três ou dez vezes mais rápido, na dependência exclusiva do hardware eou software envolvidos
parece fácil intuir que separados os aspectos tecnológicos envolvidos, ao final, resta apenas a qualidade do algoritmo a determinar o desempenho do algorimo em questão
em outras palavras, o que se deseja efetivamente é avaliar o desempenho do algoritmo independentemente de sua implementação, em função apenas das instruções executadas
a complexidade algorítmica é determinada, por sua vez, pelo número de vezes  que  uma  instrução  básica  é  executada.
nesse  quesito,  podemos facilmente intuir que a complexidade é diretamente influenciada pelos laços de repetição
obviamente, dependendo dos valores na entrada, de seus tipos e tamanhos,  poderemos  ter  aumento  ou  redução  dos  tempos  associados  à execução de um algoritmo
vamos imaginar que precisemos calcular um aumento de todos os itens de uma lista com dez registros
obviamente, esse cálculo será muito mais demorado que o mesmo cálculo aplicado a uma lista de dez registros
por outro lado, pensemos no cálculo da folha de pagamento de dez funcionários ou de dez
caso os cálculos dos dez mil seja simplesmente duas ou três operações aritméticas e dos dez seja um cálculo intrincado, envolvendo pesquisas e percentuais obtidos em tabelas, já não é fácil garantir o que será processado em menor tempo
aliás, pela descrição apresentada, parece muito mais provável que a segunda lista, não obstante, seja maior, e será processada num tempo maior
a busca sequencial é uma técnica que lembra o conhecido conceito de busca de uma agulha num palheiro
pesquisa sequencial com sentinela, nesse tipo de pesquisa, usa-se uma posição adicional no final do vetor a que é carregada com uma cópia do dado que está sendo buscado
a análise de pior caso de ambos os algoritmos para busca seqüencial são obviamente a lista toda..., embora a busca com sentinela seja mais rápida,apenas por realizar menos testes
como notamos, na busca sequencial podemos percorrer o vetor inteiro e não encontrar a informação procurada
claramente, se o vetor for muito grande a busca sequencial pode demorar um tempo inaceitável tempo de resposta vira prazo de entrega, pois cada comparação da busca sequencial elimina apenas um elemento do vetor
partindo da suposição de que um vetor esteja devidamente ordenado, podemos então aplicar o que chamamos de busca binária, que é baseada na ideia de se eliminar a maior quantidade de elementos do vetor com uma única comparação
se os dados estiverem previamente ordenados em ordem crescente ou decrescente, a busca pode ser feita de maneira muito mais eficiente
todavia, se os valores não são alterados ou se essa alteração é pouco frequente, ou ainda quando a série é previamente ordenada, a busca binária passa a ser uma hipótese interessante a considerar, pois é muito mais eficiente que a busca sequencial
os algoritmos que executam operações sobre vetores tratando-os como listas lineares, ou seja, com acesso sequencial entre eles, a complexidade é expressa em função do tamanho do vetor, como seria natural se esperar
mesmo em vetores de tamanhos idênticos, se estivermos buscando um elemento aleatoriamente, é bastante provável que não importa o local onde este esteja, teremos um mesmo tempo para listas de tamanho idêntico
para fazer esta interpretação entre homem e máquina, foram desenvolvidas as linguagens de programação
mas mesmo estas linguagens utilizam uma lógica para serem escritas e é aí que entram os algoritmos
um algoritmo nada mais é do que uma receita que mostra passo a passo os procedimentos necessários para a resolução de uma tarefa
um algoritmo é uma sequência lógica, finita e definida de instruções que devem ser seguidas para resolver um problema ou executar uma tarefa
embora você não perceba, utiliza algoritmos de forma intuitiva e automática diariamente quando executa tarefas comuns
como estas atividades são simples e dispensam ficar pensando nas instruções necessárias para fazê-las, o algoritmo presente nelas acaba passando despercebido
os algoritmos são muito utilizados na área de programação, descrevendo as etapas que precisam ser efetuadas para que um programa execute as tarefas que lhe são designadas
existem diversas formas de escrever um algoritmo, podendo ser citadas o pseudocódigo ou português estruturado, fluxograma, diagrama de chapin e descrição narrativa
a sequência escrita no exemplo da troca da lâmpada estava em descrição narrativa, por exemplo. esta forma não é muito utilizada em informática porque pode ser ambígua e dar margem a interpretações erradas.
os dois tipos mais comuns são o pseudocódigo que utiliza uma forma mais estruturada, assemelhando-se àquelas utilizadas pelas linguagens de programação e o fluxograma que emprega figuras geométricas para ilustrar os passos a serem seguidos.
o diagrama de chapin, diagrama nassi-shneiderman ou diagrama n-s mostra a solução por meio de quadros organizados hierárquica e estruturadamente. este tipo não é muito utilizado, pois vários procedimentos tornam-se difíceis de serem mostrados por meio deste diagrama.
um algoritmo é algo que você já utilizava o tempo todo e nem percebia.
uma forma bem interessante de exercitar a lógica seria algum dia parar para pensar em sua rotina ao acordar, por exemplo.
você perceberia o quanto ela é mais complexa do que parece, se fosse para colocar no papel e como a execução disto é automática.
é uma sequência finita e ordenada de passos (regras), com um esquema de processamento que permite a realização de uma tarefa
é apenas uma série de instruções simples que são realizadas para resolver um problema
a regra de multiplicação que aprendemos na escola e que permite obter o produto de dois números de vários dígitos, com papel e lápis, é um algoritmo simples
conjunto de regras que, aplicadas sistematicamente a alguns dados de entrada apropriados, resolvem um problema em um número finito de passos elementares
é importante notar que o algoritmo tem de ser finito e executa instruções de forma sistemática, ou seja, ele é cego diante do que está fazendo, e os passos com os que opera são elementares
um algoritmo poderia ser uma receita de cozinha ou as instruções para fabricar um avião de papel a partir de uma folha
os algoritmos têm uma entrada imput e uma saída output
os algoritmos reúnem operações tão simples que podem ser realizadas com sucesso por qualquer um
porque embora os algoritmos existam pelo menos desde o tempo dos babilônios, com a chegada dos computadores eles ganharam muito mais destaque.
a união de máquinas e algoritmos é o que está mudando o mundo.
o matemático britânico alan turing, famoso por ter decifrado a máquina enigma de mensagens cifradas dos nazistas e por ter se suicidado mordendo uma maçã envenenada depois de ter sofrido uma dura perseguição por causa de sua homossexualidade, foi um dos primeiros a relacionar algoritmo e computadores
s algoritmos são usados para prever resultados eleitorais, conhecer os nossos gostos e o mundo do trabalho está se algoritmizando as diferentes tarefas se tornam algoritmos e o trabalho está sendo automatizado
na bolsa, os algoritmos trabalham realizando transações em velocidades inimagináveis para um cérebro humano, em questão de microssegundos, para conseguir a máxima rentabilidade
algoritmos devem operar sob supervisão humana
existem algoritmos que já fazem parte de conselhos de empresas
talvez o algoritmo mais famoso do mundo, depois do algoritmo da multiplicação, seja o do google, criado em um mil e novecentos e noventa e oito e chamado pagerank
nas mudanças que são feitas no algoritmo se envolve a indústria, por causa do impacto que pode ter, e são testados por um pool de usuários
um algoritmo não é uma caixa preta e seus resultados não devem ser assumidos sem questioná-los
os algoritmos não são entidades autônomas, pois atrás deles existem pessoas
pseudocódigo é uma forma de representação de algoritmos, é praticamente um programa escrito em português que, depois, podemos passar para o computador
para escrevermos códigos com pseudocódigo precisaremos conhecer alguns comandos básicos
para ajudar no desenvolvimento dos seus algoritmos, você pode usar um software
um algoritmo é uma sequência finita de instruções bem definidas e não ambíguas, cada uma das quais pode ser executada mecânicamente num período de tempo finito e com uma quantidade de esforço finito
os algoritmos são expressos diretamente em linguagem natural, o português, por exemplo
a abordagem mvc separa a view e model por meio de um protocolo inserção notificação
 listas duplamente ligadas
 apesar da linguagem ter tipagem estática, os tipos não precisam ser declarados, então sempre que possível os códigos escritos irão se aplicar a vários tipos de dados
 elementos individuais são acessados por sua posição no arranjo
 em língua portuguesa, significa algo como "sensível à caixa das letras" ou "sensível a maiúsculas e minúsculas
 essas tarefas podem ser executadas por um único processador, vários processadores em um único equipamento ou processadores distribuídos por uma rede
 estas técnicas consistem em detectar padrões dentro do código produzido e substituí-los por códigos mais eficientes
 isso inclui colocar o programa final em um formato compatível com as necessidades do sistema operacional para carregá-lo em memória e colocá-lo em execução
 têm a vantagem de que os seus elementos são acessíveis de forma rápida mas têm uma notável limitação são de tamanho fixo, mas podem ser incrementados ou diminuídos com determinados algoritmos, geralmente envolvendo a cópia de elementos de um arranjo para outro e reiniciar o original com a nova dimensão
a abstração é o processo de identificar as propriedades relevantes do fenômeno que esta sendo modelado.
a acm mantém um sistema de classificação com o seguinte sub-item linguagens aplicativas, ou de aplicação
a acm mantém um sistema de classificação com o seguinte sub-item linguagens concorrentes, distribuídas e paralelas
a acm mantém um sistema de classificação com o seguinte sub-item linguagens de altíssimo nível
a acm mantém um sistema de classificação com o seguinte sub-item linguagens de aplicação especializada
a acm mantém um sistema de classificação com o seguinte sub-item linguagens de fluxo de dados
a acm mantém um sistema de classificação com o seguinte sub-item linguagens de microprogramação
a acm mantém um sistema de classificação com o seguinte sub-item linguagens de montagem e de macro
a acm mantém um sistema de classificação com o seguinte sub-item linguagens de projeto
a acm mantém um sistema de classificação com o seguinte sub-item linguagens extensíveis
a acm mantém um sistema de classificação com o seguinte sub-item linguagens não determinísticas
a acm mantém um sistema de classificação com o seguinte sub-item linguagens não procedurais
a acm mantém um sistema de classificação com o seguinte sub-item linguagens orientadas a objeto
a adição destas características às linguagens que não foram desenhadas inicialmente para elas conduziu muitas vezes a problemas de compatibilidade e na capacidade de manutenção do código
a alocação encadeada, apesar de gastar memória adicional com um campo a mais nos nós das listas, é mais conveniente quando o problema inclui o tratamento de mais de uma lista
a alocação encadeada, apesar de gastar memória adicional com um campo a mais nos nós das listas, é mais conveniente quando o problema inclui o tratamento de mais de uma lista
a alteração efetuada é devolvida para a rotina chamadora
a alternativa mais usual ao uso de classes é o uso de protótipos
a altura de um nó x em uma árvore binária é a distância entre x e o seu descendente mais afastado
a altura de uma árvore binária com um único nó raiz é zero
a altura de uma arvore binária é comprimento do caminho mais longo da raiz até uma das folhas
a análise da complexidade de um algoritmo visa, em última análise, estimar o tempo de execução de um algoritmo
a análise de algoritmos é um ramo da ciência da computação que estuda as técnicas de projeto de algoritmos e os algoritmos de forma abstrata
a análise de algoritmos é um ramo da ciência da computação que estuda as técnicas de projeto de algoritmos e os algoritmos de forma abstrata, sem estarem implementados em uma linguagem de programação em particular ou implementadas de algum outro modo
a análise pode ser subdividida ainda em análise léxica, análise sintática, análise semântica e geração de código intermediário. é também conhecida como front end
a análise tem como objetivo entender o código fonte e representá-lo em uma estrutura intermediária
a annotation arroba deprecated indica que o elemento marcante é obsoleto e não deve mais ser utilizado
a annotation arroba override informa ao compilador que o elemento é utilizado para substituir um elemento declarado em uma superclasse
a annotation arroba suppress warnings informa ao compilador para suprimir avisos específicos e que de outra forma gerar
a aprendizagem da programação tem enfrentado vários desafios
a aprendizagem da programação tem enfrentado vários desafios
a área de declaração de variáveis é a que informa ao computador, quanto da memória ram será utilizada pelo algoritmo
a arquitetura de servlets possibilita benefício adicional como eficiência os servlets carregados por um servidor persistem em sua memória até que ele seja finalizado
a arquitetura de servlets possibilita benefício adicional como escalabilidade na maior parte dos servidores de aplicações modernos
a arquitetura de servlets possibilita benefício adicional como recompilação automática páginas jsp modificadas podem ser automaticamente recompiladas
a arquitetura de uma aplicação engloba alguns exemplos de elementos utilitários, elementos de interação, elementos de conexão, elementos de persistência
a arquitetura de uma aplicação engloba componentes de software
a arquitetura de uma aplicação engloba o relacionamento entre os componentes e elementos
a arquitetura de uma aplicação engloba propriedades dos componentes e dos elementos
a arquitetura de uma aplicação engloba todos os elementos que fazem parte da estrutura básica padrão do software e como estes elementos interagem interagem entre si
a arquitetura de uma aplicação nada mais é do que um modelo que define as suas estruturas 
a arquitetura modular permite aos desenvolvedores e designers desenvolverem em paralelo
a árvore binária que possui altura máxima é aquela cujos nós interiores possuem exatamente uma sub árvore vazia
a árvore ótima é aquela que apresenta custo mínimo e para encontrá-la, aplica-se uma técnica denominada programação dinâmica 
a associação entre classe e método é chamada de ligação
a atribuição de tupla de python, totalmente disponível em seu loop foreach, também torna trivial iterar em pares chave, valor em arrays associativos
a biblioteca de persistência em banco de dados relacionais do java é chamada jdbc
a biblioteca padrão do c mais mais ainda fornece auto ptr, uma espécie de ponteiro inteligente que pode ser utilizado em algumas situações como uma alternativa segura aos ponteiros primitivos do c
a biblioteca padrão do go é simples e rica em funcionalidades 
a busca binária passa a ser uma hipótese interessante a considerar, pois é muito mais eficiente que a busca sequencial
a busca de valores num vetor é uma situação algorítmica bastante interessante
a busca sequencial é uma técnica que lembra o conhecido conceito de busca de uma agulha num palheiro
a cada instrução, o contador de programa é incrementado
a cada vez que você executar esse programa, essas variáveis terão valores diferentes, por isso são variáveis, são valores que mudam com o tempo
a camada controller cuida de interações do usuário com a view, manipula o model e atualiza a view de acordo com a necessidade existente
a camada controller define o comportamento da aplicação
a camada controller mapeia ações para atualizar models
a camada controller ou controlador, é a camada responsável por encaminhar e gerenciar os pedidos tanto do lado model quanto da view
a camada controller seleciona views para exibição
a camada controller um para cada funcionalidade
a camada do controller mvc é a camada de controle
a camada do controller mvc exerce o controle de qual model deverá ser aplicado e qual view será mostrado ao usuário
a camada do controller mvc interpreta as requisições submetidas pelo usuário e traduz em comandos que são enviados para o model e ou para a view 
a camada do controller mvc manipula e roteia as requisições dos usuários
a camada do controller mvc podemos dizer que ela faz uma gerência das outras duas camadas
a camada do controller mvc valida as requisições dos usuários de acordo com as regras de autenticação e autorização
a camada do model mvc é a camada que contem a estrutura de dado atrás de uma parte específica da aplicação
a camada do model mvc é responsável pela leitura, manipulação e validação de dados e também de suas validações
a camada do model mvc é responsável por tratar as regras de negócio 
a camada do model mvc é usualmente portada em json
a camada do model mvc notifica a view e controler associados quando há uma mudança em seu estado
a camada do model mvc obtém os dados e os traduz em informações relevantes para serem exibidas pela view
a camada do view mvc é a camada que exibe uma representação dos dados
a camada do view mvc é camada de interface com usuário ou seja view
a camada do view mvc é responsável por usar as informações modeladas para produzir interfaces de apresentação conforme a necessidade
a camada do view mvc faz a exibição dos dados, utilizando-se de html e ou xml
a camada do view mvc também é conhecida como cliente-side
a camada model encapsula o estado da aplicação
a camada model expõe as funcionalidades da aplicação
a camada model notifica views de mudança
a camada model responde a consulta do banco de dados
a camada modelo é responsável pelos dados da aplicação
a camada modelo permite que os controllers possam gerenciar os dados recolhidos entre intermediação entre usuário e dados
a camada modelo realiza operações de criar, deletar e alterar dados
a camada modelo sabe o que o aplicativo quer fazer e é a principal estrutura computacional da arquitetura, pois é ele quem modela o problema que está se tentando resolver 
a camada modelo serve de intermediária entre o usuário e os dados
a camada view envia ações de usuários ao controller
a camada view renderiza informação dos models
a camada view requisita atualizações aos models
a camada visão não sabe nada sobre o que a aplicação está atualmente fazendo, tudo que ela realmente faz é receber instruções do controle e informações do modelo e então exibir elas
a camada visão também se comunica de volta com o modelo e com o controlador para reportar o seu estado
a capacidade de um array é fixa e deve ser informada no momento da criação do array
a característica da arquitetura do mvc divide as responsabilidades, ou seja, programadores na programação e web designers na construção visual do software
a característica da arquitetura do mvc possui re-usabilidade, podemos criar bibliotecas e adicionar interfaces facilmente
a característica da arquitetura do mvc reduz o esforço na manutenção do software, pois as alterações são efetuadas separadamente não afetando as outras camadas do sistema
a característica da arquitetura do mvc separa a lógica de negócios da apresentação
a característica da arquitetura do mvc separa entre os códigos, view e controller que gerencia as relações entre o model e a view
a característica que torna as variáveis locais tão importantes é justamente a de serem exclusivas do bloco
a causalidade matemática é tipicamente imposta nos limites do sistema físico, enquanto a descrição comportamental do próprio sistema é declarativa
a chamada de uma função para execução é feita apenas citando-se o seu identificador no meio de uma expressão
a classe drivermanager é a responsável por se comunicar com todos os drivers que você deixou disponível
a classificação das estruturas de repetição é feito de acordo com o conhecimento prévio do número de vezes que o conjunto de comandos será executado
a classificação de um vetor consiste em arranjar seus componentes numa determinada ordem, segundo um critério específico
a coleta de lixo é um dos recursos essenciais para o desempenho da plataforma java
a combinação se senao if else implica que, pelo menos, um dos blocos de instruções serão executados
a complexidade algorítmica é determinada, por sua vez, pelo número de vezes que uma instrução básica é executada
a complexidade do algoritmo nada mais é que uma ideia do esforçocomputacional despendido para o computador resolver determinado problema
a composição de objetos é usada para representar uma relação tem um, usualmente uma meronímia
a comunicação explícita pode ser dividida em duas classes por memória compartilhada ou por troca de mensagens
a condição é uma expressão booleana avaliada após cada leitura do corpo e determina se uma nova leitura deve ser feita ou se a estrutura de repetição deve ser encerrada
a condição é uma expressão lógica cujo resultado é verdadeiro ou falso
a condição é uma expressão processada e transformada em um valor booleano
a condição para executar a iteração é que o valor da variável contadora não tenha atingido o valor final
a conexão a um banco de dados é feita de maneira elegante com java
a construção dos algoritmos aparece então na fase do projeto detalhado do sistema
a construção enquanto também chamada repetição pré-testada é a mais difundida estrutura de repetição
a construção para ou repetição com variável de controle é uma estrutura de repetição que designa uma variável de controle para cada iteração do bloco
a construção para repetição com variável de controle é uma estrutura de repetição que designa uma variável de controle para cada iteração do bloco e uma operação de passo a cada interação 
a construção que implementa laços condicionais mais comum na linguagem de programação moderna é repita laço condicional com teste no final
a construção que implementa laços condicionais mais comuns na linguagem de programação moderna é enquanto laço condicional com teste no início
a construção repita também difere da construção enquanto no que se refere à inicialização da variável, visto que na construção repita a variável pode ser inicializada ou lida dentro do laço
a controller envia comandos para o modelo para atualizar o seu estado por exemplo, editando um documento
a corretividade do algoritmo pode ser provada matematicamente, bem como a quantidade assintótica de tempo e espaço necessários para a sua execução
a criação de um programa de computador consiste de cinco passos principais
a denição de como os passos de um algoritmo serão executados é uma implementação do algoritmo
a declaração das variáveis é atribuída pela instrução var seguida da relação de variáveis
a declaração de variáveis locais é a primeira coisa que devemos colocar num bloco
a declaração de variáveis locais é a primeira coisa que devemos colocar num bloco a característica que torna as variáveis locais tão importantes é justamente a de serem exclusivas do bloco 
a declaração inicia com o nome do vetor que pode ser qualquer nome, seguido de dois pontos, a palavra vetor e a quantidade de posições que esse vetor terá, em seguida informar o tipo do vetor
a definição com referências, por outro lado, possui checagem de tipo, sem confusão de símbolos
a definição das estruturas de dados a utilizar por um algoritmo tem também subjacente as operações a executar nos dados representados
a definição de como os passos de um algoritmo serão executados é uma implementação do algoritmo
a descrição de estados de uma máquina abstrata por valores de um conjunto de variáveis
a desvantagem do modelo mvc e a medida que o tamanho e a complexidade do projeto crescem, a quantidade de arquivos e pastas continuará aumentando também
a desvantagem do modelo mvc é necessita de um tempo maior para explorar e modelar o sistema
a desvantagem do modelo mvc e os interesses de ui que são as interface do usuário modelos, exibições, controladores se localizam em várias pastas, que não são formadas em grupos por ordem alfabética
a desvantagem do modelo mvc é requer mão de obra especializada
a diferença básica entre for e while é que no for precisamos de três valores para que a condição seja satisfeita o valor inicial de i, o valor final de i e o incremento de i enquanto que no while temos uma única condição que deve ser avaliada
a diferença básica entre for e while é que no for são três valores para que a condição seja satisfeita o valor inicial de i, o valor final de i e o incremento de i 
a diferença é que a jvm é uma parte do software escrita especificamente para uma determinada plataforma
a diferença fundamental com relação ao paradigma funcional é que esta associação é dinâmica, sendo constantemente modificada durante a execução de um programa
a diferença prática mais evidente é que na poo baseada em protótipos apenas a herança simples é implementada pela cópia do objeto
a dimensão de uma matriz é constituída por constantes inteiras e positivas
a escolha da estrutura cabe ao programador, que deve preferir aquela que produz código mais simples e fácil de entender
a escolha entre enquanto e repita até é mínima, então dependerá do bom senso do programador, que optará pela estrutura que deixará o algoritmo mais simples e legível
a escolha entre enquanto e repita até é mínima, então dependerá do bom senso do programador, que optará pela estrutura que deixará o algoritmo mais simples e legível
a escolha entre uma estrutura ou outra é uma questão de gosto e estilo de programação
a escolha entre while e do while é mínima então dependerá do bom senso do programador que optará pela estrutura que deixar o algoritmo mais simples e legível
a escrita de um vetor obedece à mesma sintaxe da instrução primitiva de saída de dados e também vale lembrar 
a escrita de uma matriz de duas dimensões obedece à mesma sintaxe da instrução primitiva de saída de dados e também vale lembrar que, da mesma forma que com vetores
a estrutura condicional permite a escolha do grupo de ações e estruturas a ser executado quando determinadas condições, representadas por expressões lógicas são satisfeitas 
a estrutura de repetição do-while é uma variação da estrutura while existe uma diferença sutil, porém importante, entre elas
a estrutura de repetição enquanto é utilizada quando um conjunto de comandos deve ser executado repetidamente, enquanto uma determinada condição expressão lógica permanecer verdadeira
a estrutura de repetição enquanto é utilizada quando um conjunto de comandos deve ser executado repetidamente, enquanto uma determinada condição expressão lógica permanecer verdadeira
a estrutura de repetição para implementa um contador implicitamente
a estrutura de repetição permite que uma sequência de comandos seja executada repetidamente até que uma determinada condição de interrupção seja satisfeita
a estrutura de seleção permite o aninhamento, ou seja, o comando a ser executado dentro de uma seleção pode ser uma outra seleção
a estrutura de sequência é implícita nos programas e indica que as instruções são executadas uma após a outra, seguindo uma sequência
a estrutura do comando for é bem diferente dos comandos if else, while, switch case, entretanto é mais próximo do while, pois o while também é um comando de repetição 
a estrutura for, portanto, repete a execução do bloco em um número definitivo de vezes pois ela possui limites fixos
a estrutura para cada é usada para iterar itens de uma coleção, sendo uma especialização da estrutura para
a estrutura para se mostra mais adequada que outras como em um caso de fatorial 
a estrutura while...do tem o seu funcionamento controlado por condição.
a fase de geração de código final é a última fase da compilação. a geração de um bom código objeto é difícil devido aos detalhes particulares das máquinas para os quais o código é gerado
a filosofia básica do método da bolha de classificação deste método consiste em varrer o vetor, comparando os elementos vizinhos entre si
a forma de acessar os elementos de um arranjo é direta, ao contrário das listas
a formatação de valores pode ser feita também para números inteiros
a função main é especial é a primeira a ser chamada no programa
a função seguinte é usada no main após ser declarada a variável raiz que será do tipo apontador para lista
a função assert testa se uma expressão é verdadeira
a fusão de loops é quando usam-se dois loops distintos para operar o mesmo conjunto de elementos e, em cada um deles, efetuar uma ação diferente
a grande maioria das linguagens de programação que são utilizadas, tem esta facilidade, seja com o nome de sub-rotinas, subprogramas, procedimentos, funções, módulos, blocos, etc.
a herança é um mecanismo da orientação a objeto que permite criar novas classes a partir de classes já existentes, aproveitando-se das características existentes na classe a ser estendida
a ideia básica de um algoritmo recursivo consiste em diminuir sucessivamente o problema em um problema menor ou mais simples
a ideia de reenskaug gerou um padrão de arquitetura de aplicação cujo objetivo é separar o projeto em três camadas independentes
a ideia do encapsulamento é tornar o software mais flexível, fácil de modificar e de criar novas implementações
a ideia é permitir que uma mensagem da lógica de negócios possa ser acessada e visualizada através de várias interfaces do mvc
a ideia é tornar o software mais flexível, fácil de modificar e de criar novas implementações
a identação de código um dos itens mais básicos e ao mesmo tempo importante para um programador, sendo ele iniciante ou avançado 
a implementação de um comportamento pode ser modificada radicalmente sem que haja impacto no resto do programa isto é possível porque o código que utiliza o objeto não depende da maneira que ele é implementado
a implementação do algoritmo em uma linguagem de programação específica exige a representação do tad
a individualização de cada variável de um vetor é feita através do uso de índices
a inicialização compõe-se de todo código que determina a condição inicial da repetição
a inicialização da variável contadora é realizada implicitamente com o valor inicial informado da declaração da estrutura para
a inserção  de uma tabela de valores em assembly é feita através das diretivas do assembler db e dw 
a inserção ou remoção de um elemento na lista não implica a mudança de lugar de outros elementos
a instrução do for é utilizada quando é necessário repetir um conjunto de passos um determinado número de vezes
a instrução do while é utilizada quando é necessário repetir um conjunto de passos em função de uma determinada expressão lógica
a instrução if...then tem por finalidade tomar uma decisão e efetuar um desvio no processamento, dependendo, é claro, da condição atribuída ser verdadeira ou falsa.
a interação e a comunicação correta entre as diferentes tarefas, além da coordenação do acesso concorrente aos recursos computacionais são as principais questões discutidas durante o desenvolvimento de sistemas concorrentes
a interface do usuário é exibida pela visão mas controlada pelo controlador
a interface do usuário é exibida pela visão view, mas controlada pelo controlador
a interface existente entre um computador e um humano é conhecida como interface do usuário e as interfaces utilizadas para conectar componentes de hardware são chamadas de interfaces físicas.
a interpretação do comando do while execute as instruções dentro do bloco enquanto a condicao for verdadeira
a interpretação do comando while enquanto a condicao for verdadeira, executo as instruções dentro do bloco
a iteração é a instrução que deve ser executada depois do corpo e antes de uma nova repetição
a jvm é o núcleo do princípio gravação única execução em qualquer local da linguagem java
a jvm interpreta o bytecode como uma cpu interpretaria instruções de linguagem assembly
a leitura de um vetor é feita passo a passo, um de seus componentes por vez, usando a mesma sintaxe da instrução primitiva da entrada de dados, onde além do nome da variável, deve ser explicitada a posição do componente lido
a leitura de uma matriz de duas dimensões é feita passo a passo, um de seus componentes por vez, usando a mesma sintaxe da instrução primitiva da entrada de dados, onde além do nome da variável, deve ser explicitada a posição do componente lido
a liberação de memória é possível através do uso dos métodos destrutores da classe a liberação da memória no destrutor garante que ela será realizada em qualquer caminho que o fluxo seguir, tornando o código seguro
a linguagem c é case sensitive isto é, considera as letras maiúsculas e minúsculas diferentes
a linguagem c é case-sensitive
a linguagem c não faz nenhum teste de verificação dos índices usados para acessar os elementos de um vetor
a linguagem c suporta aos mesmos tipos de laços que as linguagens de programações modernas, esses laços são for, while, do while
a linguagem de programação é como uma língua normal um grupo de palavras com significados
a linguagem de programação é somente como se escreve o algoritmo
a linguagem de programação c e linguagens derivadas possui o operador ternário que representa uma expressão condicional
a linguagem de programação clu possui uma funcionalidade com interface próxima ao que foi introduzido posteriormente pela linguagem java
a linguagem de programação é um método padronizado para comunicar instruções para um computador
a linguagem do visualg permite apenas um comando por linha desse modo, não há necessidade de tokensseparadores de estruturas, como o ponto e vírgula em pascal
a linguagem java deriva da linguagem c portanto suas regras de sintaxe assemelhamse às regras de c
a linguagem java é imperativa e orientada a objetos
a linguagem java tem a palavra goto como sendo reservada, porém, não implementou a mesma
a linguagem pascal efetua a reserva de espaço na memória para que as variáveis sejam utilizada
a linguagem pascal exige que os procedimentos sejam definidos antes do programa principal
a linguagem pascal fornece ao programador um conjunto de tipos de dados predefinidos
a linguagem que o visualg interpreta é bem simples é uma versão portuguesa dos pseudocódigos largamente utilizados nos livros de introdução à programação, conhecida como portugol
a linguagem tentará prevenir o programador de apontar para objetos que não são inteiros, ou derivados de ponteiros, como números de ponto flutuante, eliminando alguns tipos básicos de erro cometidos por programadores
a lógica de programação é importante para aquelas pessoas que desejam desenvolver programas aplicativos e sistemas
a maior parte dos algoritmos são pensados para trabalhar com entradas inputs de tamanho arbitrário
a maior parte dos algoritmos utiliza métodos de organização de dados envolvidos na computação
a maioria das linguagens não permite que o comportamento de um tipo nativo seja modificado por programas
a maioria dos bancos de dados comerciais são os chamados relacionais que é uma forma de trabalhar e pensar diferente ao paradigma orientado a objetos
a mais antiga programadora de computadores que se conhece é ada lovelace
a maneira mais simples de se pensar um algoritmo é por uma lista de procedimentos bem definida
a maneira mais simples de se pensar um algoritmo é por uma lista de procedimentos bem definida, na qual as instruções são executadas passo a passo a partir do começo da lista, uma ideia que pode ser facilmente visualizada através de um fluxograma
a maneira mais simples de se pensar um algoritmo é por uma lista de procedimentos bem definida, na qual as instruções são executadas passo a passo a partir do começo da lista, uma ideia que pode ser facilmente visualizada através de um fluxograma
a maneira padrão de se definir novos sistemas de matemática ou lógica é definindo objetos tais como verdadeiro e falso, ou todos os números naturais, e então definindo operações sobre eles
a manipulação das estruturas de dados através de declarações e instruções precisas de controlo definem a parte dinâmica de um algoritmo
a manipulação torna-se mais "perigosa" uma vez que, se o encadeamento (ligação) entre elementos da lista for mal feito, toda a lista pode ser perdida
a matriz mais comum é a de duas dimensões linha e coluna, por se relacionar diretamente com a utilização de tabelas
a medida que o tamanho e a complexidade do projeto crescem a quantidade de arquivos e pastas continuará aumentando também
a melhor maneira para aprender o que é um design pattern é vendo como surgiu sua necessidade
a melhor prática parece ser evitar extremismo há casos em que é melhor priorizar a poo ou a pe, e mesmo quando uma estratégia é evidentemente melhor, o purismo tende a gerar software menos bem escrito ao custo de mais trabalho
a memória secundária ms é responsável pelo armazenamento, em caráter permanente, de programas e dados 
a mesma definição de lista encadeada pode ser codificada em fortran utilizando ponteiros
a modularização, em pascal, pode ser feita através de procedimentos (procedures) e funções (functions)
a nível de algoritmo esses comandos representam apenas a entrada e a saída da informação, independe do dispositivo utilizado teclado, discos, impressora, monitor
a nossa connection factory implementa o design pattern factory que prega o encapsulamento da construção de objetos complicados
a notação algorítmica também inclui os seguintes operadores lógicos not, or e and
a ordenação é, então, uma operação que visa rearranjar os elementos de uma lista, ou no caso em questão, um vetor, sempre em alguma ordem determinada
a otimização de código é a estratégia de examinar o código intermediário, produzido durante a fase de geração de código com objetivo de produzir, através de algumas técnicas, um código que execute com bastante eficiência
a palavra chave escolha é o comando que conhecemos como switch em várias linguagens de programação 
a palavra chave private também pode ser usada para modificar o acesso a um método
a palavra inglesa origina-se, contudo, do francês instance, que vem do latiminstantia (origem direta da palavra instância no português), mesma palavra que também deu origem, por exemplo, à palavra instante
a palavra polimorfismo vem do grego e significa aquilo que pode tomar várias formas esta característica é um dos conceitos essenciais da programação orientada a objeto poo 
a palavra reservada do c auto serve para dizer que uma variável é local mas não precisaremos usá-la pois as variáveis declaradas dentro de um bloco já são consideradas locais 
a palavra reservada while sempre será seguida de um par de parênteses, que delimitam a condição desta estrutura de repetição
a partir daí, com os elementos remanescentes, repete-se o processo até que todo o vetor esteja ordenado
a partir de determinado conjunto de dados, simplesmente se media o tempo que um conjunto de operações de um algoritmo demorava
a partir dos tipos básicos no json, é possível construir tipos complexos arrays e objetos.
a passagem de parâmetro ocorre quando é feita uma substituição dos parâmetros formais pelos reais no momento da execução da rotina
a passagem de parâmetro por referência caracteriza-se pela ocorrência da alteração do valor do parâmetro real quando o parâmetro formal é manipulado dentro da rotina chamada
a passagem de parâmetro por valor caracteriza-se pela não alteração do valor do parâmetro real, quando este é manipulado dentro da rotina
a pe foi o paradigma dominante na escrita de software até a programação orientada a objetos
a pe não é errada nem a poo certa
a pesquisa binária é um método que também só se aplica a vetores previamente ordenados
a pesquisa binária é um método que também só se aplica a vetores previamente ordenados
a pesquisa consiste na verificação da existência de um valor dentro de um vetor
a pilha de operações aritméticas e lógicas pode estar localizada na pilha de chamada
a pilha é geralmente acessada através do registrador ponteiro da pilha, que também serve para indicar o topo da pilha
a poo constitui os números romanos da computação
a poo é um dos quatro principais paradigmas de programação as outras são programação imperativa, funcional e lógica
a poo encoraja programas com muitas camadas e destrói a transparência
a poo muitas vezes é realizada sem uma representação transparente do fluxo de controle ordem das instruções, o que tem se tornado uma desvantagem com a relevância, acentuada nos últimos anos, do processamento paralelo
a poo tende a dar melhores resultados em programas maiores e para reutilização dos programas (suas partes ou sub-rotinas)
a popularidade da arquitetura mvc pode ser vista principalmente no desenvolvimento de aplicações web
a popularidade dessa arquitetura pode ser vista principalmente no desenvolvimento de aplicações web
a porta mais freqüentemente usada em um avr é o registrador de status com seus oito bits
a posição é dada por um índice, também chamado de subscrição
a possibilidade com reflection é descobrir se determinados pedaços do código têm annotations
a possibilidade com reflection é instanciar classes cujo nome só vamos conhecer em tempo de execução
a possibilidade com reflection é invocar métodos dinamicamente baseado no nome do método como string
a possibilidade com reflection é listar todos os atributos de uma classe e pegar seus valores em um objeto
a possibilidade de reutilizar o mesmo código sem grandes alterações em outros programas
a possibilidade de reutilizar o mesmo código sem grandes alterações em outros programas
a premissa de que a poo é apropriada para modelar sistemas complexos com comportamentos complexos, contrasta com o renomado princípio kiss
a primeira regra dos métodos é que eles devem ser pequenos 
a principal diferença com o modificador protected é que apenas as classes do mesmo pacote têm acesso ao membro
a programação de computadores é uma atividade que leva à representação dos passos necessários à resolução de um problema em linguagem de programação
a programação de restrições geralmente complementa outros paradigmas programação funcional, lógica ou até imperativa
a programação de restrições indica relações entre variáveis na forma de restrições que especificam as propriedades da solução de destino
a programação declarativa é um estilo de programação não imperativa, na qual os programas descrevem os resultados desejados sem listar explicitamente os comandos ou etapas que devem ser executados
a programação declarativa geralmente considera os programas como teorias de uma lógica formal e os cálculos como deduções nesse espaço lógico e busca simplificar bastante a escrita e desenvolvimento de programas paralelos
a programação é referente à execução de instruções passo a passo no computador
a programação estruturada orienta os programadores para a criação de estruturas simples em seus programas, usando as sub-rotinas e as funções
a programação linear e a pesquisa operacional utilizam, em muitas de suas soluções, matrizes
a programação modular consiste num método para facilitar a construção de grandes programas, através de sua divisão em pequenas etapas
a programação orientada a objetos utiliza objetos, porém nem todas das técnicas e estruturas associadas são suportadas diretamente em linguagens que afirmam suportar a poo
a programação reativa baseia-se em fluxos de dados e na propagação de mudanças, com o modelo de execução de uma linguagem de programação repercutindo automaticamente alterações através do fluxo de dados
a programação reativa tem o pilar elástico reage à demanda carga aplicações podem fazer uso de múltiplos cores e múltiplos servidores
a programação reativa tem o pilar message driven reage à eventos event driven em vez de compor aplicações por múltiplas threads síncrona, sistemas são compostos de gerenciadores de eventos assíncronos e não bloqueantes
a programação reativa tem o pilar resiliente reage à falhas, aplicações reagem e se recuperam de falhas de software, hardware, e de conectividade
a programação reativa tem o pilar responsivo reage à usuários aplicações que oferecem interações ricas e tempo real com usuários
a programação reativa tem quatro pilares responsive, resiliente, message driven e elastic
a proposta da estrutura escolha caso é permitir ir direto no bloco de código desejado, dependendo do valor de uma variável de verificação
a pseudolinguagem ajuda os estudantes na área da computação a aprimorar o raciocínio lógico e a programar, pois essa ferramenta só usa palavras do nosso idioma
a recursão na programação é bem exemplificada quando uma função é definida em termos de si mesma
a redução de código duplicado num programa
a relação de cardinalidade para as entidades é feita da forma tradicional
a repetição do laço é controlada por uma condição que verifica alguma variável
a repetição do laço no comando enquanto é controlada por uma condição que verifica alguma variável
a repetição do while é controlada por uma condição que verifica alguma característica do programa por exemplo, valores de variáveis
a repetição do while é controlada por uma condição que verifica alguma variável
a repetição do while é controlada por uma condição que verifica alguma variável porém para que o while funcione corretamente é importante que essa variável sofra alteração dentro do while 
a repetição é usada para processar os valores e laços para varrer uma sequencia de localizações de memória (vetores, por exemplo), ou para acumular valor nas variáveis.
a repetição infinita irá travar o software, que não será capaz de terminar a operação
a representação de cada item emtido em um observable é chamado callback
a representação de grafos é bastante comum em matrizes, sendo usadas, por exemplo, para pesquisas de rotas
a representação simbólica para digitos decimais de zero a nove
a representação simbólica para letras de a até z
a representação simbólica para simbolos especiais aspas, hastag, e comercial, porcentagem, cifrão, apóstrofo e barra em pé
a representação simbólica para sinais de operação, mais, menos, asterisco e barra
a representação simbólica para sinais de pontuação virgula, ponto final, ponto e virgula, dois ponto, ponto de interrogação
a resolução de problemas através de algoritmos requer a representação de entidades e objectos reais em itens de dados
a resolução de um problema através de um algoritmo e consequente programa computacional refere-se ao processo de identificar e analisar um problema do mundo real e desenvolver a sua solução de modo eficiente
a rxjava possui características interessantes como abordagem reativa
a rxjava possui características interessantes como facilidade de controlar concorrência, de forma a melhorar o uso do poder de processamento dos seus servidores
a rxjava possui características interessantes como facilidade na execução condicional de tarefas assíncronas
a rxjava possui características interessantes como melhoria quanto a evitar o problema de uso de vários callbacks evitar o uso excessivo do padrão observer
a seleção de múltipla escolha compara um dado valor a constantes, desviando o fluxo de código para o ponto indicado pela primeira constante onde há casamento
a separação de propósitos que o paradigma mvc propõem ajuda na escalabilidade e padronização de um produto
a sincronicidade de exceções é relacionada de certa forma com o conceito das exceções verificadas
a sintaxe consiste em um conjunto de regras formais, que especificam a composição de programas a partir de letras, dígitos, e outros símbolos
a sintaxe consiste em um conjunto de regras formais, que especificam a composição de programas a partir de letras, dígitos, e outros símbolos
a sintaxe da matriz é bem parecida a do vetor
a sintaxe de declaração pode ser diferente para muitas linguagens de programação 
a sintaxe do vetor não difere muita coisa de uma variável comum
a sintaxe varia entre as linguagens a maioria delas usam a palavra simples for
a síntese constrói o código objecto a partir desta representação intermediária
a solução descreve os elementos que fazem parte da implementação as relações entre os elementos suas responsabilidades e colaborações
a sua grande vantagem é a rapidez e, por isso, ela é muito recomendada para vetores grandes
a sub-área var é utilizada na declaração das variáveis que serão utilizadas durante a execução de um programa, bem como, também o seu tipo
a tabela pode ser transformada numa representação gráfica chamada grafo
a terminologia de sub-rotina varia, pois ela pode ser conhecida como rotina, procedimento, função ou método
a transparência à falhas é difícil de implementar e normalmente não é possível de atingir em bibliotecas onde o conhecimento completo da aplicação não está disponível
a ula é responsável por realizar os cálculos lógicos e aritméticos, então só é possível realizar adições, subtrações, comparações, multiplicações
a unidade aritmética e lógica ula ou alu – que é responsável pela realização de todas as operações lógicas e aritméticas no computador
a unidade de controle uc ou cu que é responsável pelo controle de todos os elementos do computador e dos periféricos
a unidade de processamento é composta por outras unidades funcionais, muitas delas na verdade, mas todo microprocessador tem as unidades funcionais básicas e essenciais, que são a unidade de controle uc, a unidade lógica e aritmética ula, unidade de ponto flutuante fpu e os registradores
a utilização da árvore binária de busca completa é muito conveniente caso as freqüências de acesso aos dados sejam constantes
a utilização de declarações nas annotations segue a regra a declaração de um método em um tipo anotação não pode ter qualquer parâmetro e nem uma cláusula throws que indica um lançamento de exceção
a utilização de declarações nas annotations segue a regra o método não deve possuir corpo ele é especificado como um método abstrato
a utilização de declarações nas annotations segue a regra o tipo de retorno deve ser um dos seguintes primitivos, string, class, enum ou um array cujo tipo seja um dos precedentes
a utilização de declarações nas annotations segue a regra o tipo de retorno do método será o tipo de dado do elemento
a utilização de declarações nas annotations segue a regra por convenção, o nome do único membro em um tipo anotação com um único elemento deve ser value
a utilização de servlets e de páginas jsp oferecem diversas vantagens em relação ao uso de outras tecnologias como php, asp e cgi
a utilização deste tipo de estrutura de dados homogêneas recebe diversos nomes, como variáveis indexadas, variáveis compostas, variáveis subscritas, arranjos, vetores, matrizes, tabelas em memória ou arrays
a utilização do padrão mvc trás como benefício isolar as regras de negócios da lógica de apresentação, a interface com o usuário
a utilização mais comum de metadados é na documentação de código
a vantagem de utilizar junit amplamente utilizado pelos desenvolvedores da comunidade código-aberto, possuindo um grande número de exemplos
a vantagem do encapsulamento é que não é necessário conhecermos seu funcionamento ou armazenamento interno
a vantagem do encapsulamento é que o objeto é disponibilizado ao usuário com toda a sua funcionalidade
a vantagem do modelo mvc é a arquitetura modular que permite aos desenvolvedores e designers desenvolverem em paralelo
a vantagem do modelo mvc é facilitar a transformação da interface, sem que haja necessidade de modificar a camada de negócio
a vantagem do modelo mvc é facilitar o reuso do código
a vantagem do modelo mvc é gerenciar múltiplos views usando o mesmo modelo é fácil manter, testar e atualizar sistemas compostos
a vantagem do modelo mvc é melhorar desempenho e produtividade, graças a estrutura de pacotes modulares
a vantagem do modelo mvc é melhorar o nível de sustentabilidade, pois facilita a manutenção da aplicação
a vantagem do modelo mvc é melhorar performance, graças a separação em camadas
a vantagem do modelo mvc é tornar a aplicação escalável
a vantagem do model-view-controller mvc é a arquitetura modular permite aos desenvolvedores e designers trabalharem em paralelo
a vantagem do model-view-controller mvc é a fácil transformação da interface, sem que haja necessidade de modificar a camada de negócio
a vantagem do model-view-controller mvc é melhor performance, graças a separação em camadas
a vantagem do model-view-controller mvc é melhorar desempenho e produtividade, graças a estrutura de pacotes modulares 
a vantagem do model-view-controller mvc é melhorar nível de sustentabilidade, pois facilita a manutenção da aplicação
a vantagem do model-view-controller mvc é o modelo mvc gerencia múltiplos visualizadores usando o mesmo modelo é fácil manter, testar e atualizar sistemas múltiplos
a vantagem do model-view-controller mvc é que as partes da aplicação podem ser modificadas sem a necessidade de alterar outras
a vantagem do model-view-controller mvc é que se tornou muito simples incluir novos clientes apenas incluindo seus visualizadores e controles
a vantagem do model-view-controller mvc é ter desenvolvimento em paralelo para o modelo, visualizador e controle pois são independentes
a vantagem do model-view-controller mvc é tornar a aplicação escalável
a variante é utilizado para referenciar toda a estrutura bidimensional de a, mas cada linha da matriz pode ser utilizada para referenciar uma coluna
a variável contador conterá quantos valores já foram lidos
a variável contadora deve possuir um valor inicial conhecido, isto é, ela deve ser inicializada
a variável contadora deve possuir um valor inicial conhecido, isto é, ela deve ser inicializada
a variável de inicialização é o comando de atribuição que inicia uma variável que faz o controle do laço
a variável real define variáveis numéricas do tipo real, ou seja, com casas decimais no visualg
a view gera uma representação dos dados presentes no modelo solicitado, fazendo a exibição dos dados, sendo ela por meio de um html ou xml
a view gerencia a área retangular do display e é responsável por apresentar as informações para o usuário através de uma combinação de gráficos e textos
a visão gerencia a área retangular do display e é responsável por apresentar as informações para o usuário através de uma combinação de gráficos e textos
a visão não sabe nada sobre o que a aplicação está atualmente fazendo tudo que ela realmente faz é receber instruções do controle e informações do modelo e então exibir elas
a visão recebe as informações do modelo
a visão também se comunica de volta com o modelo e com o controlador para reportar o seu estado
a linguagem c, por exemplo, é case-sensitive, pois seus programas devem ser sempre escritos em caixa baixa
a moo é considerada a melhor estratégia para diminuir o gap semântico o hiato entre o mundo real e a representação dele, e facilita a comunicação das partes interessadas no modelo ou software
a natureza do dado caracteriza o tipo representado, que pode ser, por exemplo, um caractere, um número inteiro, um número real ou uma cadeia de caracteres
a noção de código fonte também pode ser aplicada de maneira mais abrangente, incluindo linguagem de máquina e notações em linguagens gráficas, nenhuma delas são textuais por natureza
a principal ideia do padrão arquitetural mvc é a separação dos conceitos e do código
a principal ideia do padrão arquitetural mvc é a separação dos conceitose do código
a programação estruturada (pe) é um paradigma de programação, uma forma de programação de computadores, com ênfase no uso de subrotinas, laços de repetição, condicionais e estruturas em bloco
a programação orientada a objetos poo diz respeito a um padrão de desenvolvimento que é seguido por muitas linguagens como c sharp e java
a representação do dado determina a forma como os bits armazenados devem ser interpretados a imagem ou faixa de representação determina a faixa de valores válidos para o tipo
a síntese pode ter mais variações de um compilador a outro, podendo ser composta pelas etapas de optimização de código e geração de código final (ou código de máquina), sendo somente esta última etapa é obrigatória. é também conhecida como back end
a visão gera uma representação dos dados presentes no modelo solicitado
abb é uma árvore binária vazia
aborde o hiato entre o problema e a linguagem compreendida pela máquina preencha bottom-up
ada é uma linguagem fortemente tipada no qual todos os ponteiros são tipados e somente conversões seguras de tipo são permitidas
agora, imagine um programa onde precisa-se armazenar as notas de cinco provas realizadas por um aluno
ainda podemos combinar uma ou mais expressões lógicas utilizando os operadores lógicos não, e e ou
além das rotinas desenvolvidas pelo usuário, existe na linguagem pascal, um conjunto de rotinas embutidas
além de ajudar na automatização de algumas tarefas, tais como a criação das interfaces do ejb e a criação das configurações dos webservices
além de dividir a aplicação em três tipos de componentes o desenho mvc define as interações entre eles
além disso o tratamento das exceções assíncronas não pode ser requerido pelo compilador e o seu tratamento é difícil de programar
além disso, a engenharia de software deve oferecer mecanismos para se planejar e gerenciar o processo de desenvolvimento de um sistema computacional de qualidade e que atenda as necessidades de um requisitante de software
além disso, por exigir formas de pensar relativamente complexas, a poo até hoje ainda não é bem compreendida ou usada pela maioria
além disso, por exigir formas de pensar relativamente complexas, a programação orientada a objetos até hoje ainda não é bem compreendida ou usada pela maioria
além do endereço de retorno, alguns ambientes podem suportar outros estados que são restaurados no retorno duma sub-rotina, como níveis de privilégio, informação para o tratamento de exceções, entre outros
além do nome da matriz, deve-se também especificar por meio do índice o componente a ser escrito
além do nome do vetor, deve-se também especificar por meio do índice o componente a ser escrito
algoritmo de ordenação em ciência da computação é um algoritmo que coloca os elementos de uma dada sequência em uma certa ordem
algoritmo é a descrição de um padrão de comportamento, expresso em termos de um repertório bem definido e finito de ações primitivas, as quais damos por certo que podem ser executadas
algoritmo é a descrição, de forma lógica, dos passos a serem executados no cumprimento de determinada tarefa
algoritmo é a forma pela qual descrevemos soluções de problemas do nosso mundo, afim de, serem implementadas utilizando os recursos do mundo computacional 
algoritmo é a relação entre entrada e saída do programa, é o rascunho do programa, o projeto
algoritmo é o caminho para a solução de um problema, e em geral, os caminhos que levam a uma solução são muitos
algoritmo é palavra usada para indicar o início do programa
algoritmo é simplesmente uma receita para executarmos uma tarefa ou resolver algum problema
algoritmo é um conjunto finito de regras, bem definidas, para a solução de um problema em um tempo finito e com um número finito de passos
algoritmo é um procedimento computacional bem definido que toma como parâmetro de entrada um valor ou um conjunto de valores e que produz como saída um valor ou um conjunto de valores
algoritmo é uma palavra que indica o início da definição de um algoritmo em forma de pseudocódigo
algoritmo não é a solução do problema, pois, se assim fosse, cada problema teria um único algoritmo
algoritmo pode ter vários níveis de abstrações de acordo com a necessidade de representar ou encapsular detalhes inerentes às linguagens de programação
algoritmo pode ter vários níveis de abstrações de acordo com a necessidade de representar ou encapsular detalhes inerentes às linguagens de programação
algoritmos genéticos tentam encontrar a solução através de ciclos de mutações evolucionárias entre gerações de passos, tendendo para a solução exata do problema. 
algoritmos heurísticos encontram uma solução aproximada para o problema
algoritmos iterativos usam estruturas de repetição tais como laços, ou ainda estruturas de dados adicionais tais como pilhas, para resolver problemas
algoritmos podem ser implementados em circuitos elétricos ou até mesmo em dispositivos mecânicos
algoritmos são encontrados em todas as áreas de ciência da computação
algoritmos são procedimentos precisos, não ambíguos, mecânicos, eficientes e corretos
algoritmos são procedimentos precisos, não ambíguos, mecânicos, eficientes e corretos
algumas conversões são sempre seguras, enquanto outras são perigosas, possivelmente resultando em comportamento incorreto do sistema
algumas definições comuns de encapsulamento encapsulamento é o processo de esconder todos os detalhes de um objeto que não contribuem para as suas características essenciais
algumas linguagens de programação especificam ainda uma palavra reservada para sair da estrutura de repetição de dentro do bloco de código, quebrando a estrutura
algumas linguagens de programação especificam ainda uma palavra reservada para sair da estrutura de repetição de dentro do bloco de código, quebrando a estrutura
algumas linguagens lógicas de programação, como o prolog, e linguagens de consulta de banco de dados, como sql, embora declarativas em princípio, também suportam um estilo de programação procedural.
algumas linguagens podem permitir que tipos lista sejam indexados ou cortados como os tipos vetor
algumas linguagens possuem suporte especial para mixin, assim como em qualquer linguagem com herança múltipla, uma mesclagem é simplesmente uma classe que não representa um relacionamento é-um-tipo-de
algumas linguagens suportam ponteiros inteligentes smart pointers, que utilizam uma forma simples de contagem de referências para ajudar no rastreamento de alocação de memória dinâmica, além de atuar como referência
algumas linguagens também aceitam letras minúsculas e maiúsculas, outras só minúsculas, é o que chamamos de sensitive case
algumas linguagens orientadas a objeto armazenam o ponteiro thisjunto aos parâmetros dos métodos sendo invocados
algumas vezes a especificação de uma linguagem de programação define palavras reservadas para uso futuro
algumas vezes, precisamos executar nosso programas com dados aleatórios e, na maioria das linguagens, há geradores de números aleatórios
alguns algoritmos são executados em tempo linear, de acordo com a entrada, enquanto outros são executados em tempo exponencial ou até mesmo nunca terminam de serem executados
alguns desses pequenos problemas aparecem com tanta frequência que as pessoas desenvolvem uma solução padrão para ele
alguns ditos problemas tem múltiplos algoritmos enquanto outros não possuem algoritmos para resolução
alguns exemplos de algoritmos que podemos citar são receitas culinárias, manual de instrução de aparelhos, funções matemáticas e até mesmo páginas da web
alguns exemplos de linguagem de programação são algol, visual basic, pascal, c, lisp, cobol, php, visualg, java, etc
alguns exemplos de linguagens de programação são o java, php, c e suas variações pascal entre outras
alguns exemplos genéricos de algoritmos são uma coreografia, um manual de instruções, uma receita culinária, técnicas para resolver problemas matemáticos, uma pesquisa na internet, dentre outros
alguns paradigmas estão preocupados principalmente com as implicações para o modelo de execução da linguagem, como permitir efeitos colaterais, ou se a sequência de operações está definida pelo modelo de execução. 
alocação sequencial, nesse tipo de alocação, as listas são armazenadas em posições contínuas de memória, reservadas estaticamente 
alternativamente, a memória do quadro pode ser acessada por outro registrador, o ponteiro do quadro, que geralmente aponta para um ponto específico do quadro, como o endereço de retorno
ambas a composição de objetos e a herança constituem hierarquias entre as classes e objetos na poo
ambas utilizam o modelo de memória compartilhada, com o bloqueio sendo fornecido por monitores
ambiente de programação conjunto de tecnologias que dá suporte à programação de computadores
aninhamento de seleções a estrutura de seleção permite o aninhamento, ou seja, o comando a ser executado dentro de uma seleção por exemplo, no senão pode ser uma outra seleção
annotation representado pela inicial arroba, é um recurso da plataforma java, introduzido como padrão de linguagem na versão umcinco
annotation são meta informações que guardam informações de dados dentro do próprio código fonte
annotations dão informações sobre o código que está sendo escrito ou até mesmo do próprio programa, o que se assemelha aos comentários
annotations elementos são sempre pair values, ou seja, elemento tem um nome e um valor
annotations não interferem diretamente na semântica da linguagem, mas sim na maneira que ferramentas e bibliotecas tratam o código
annotations podem possui elementos ou não
annotations quer dizer anotações em inglês
annotations são criadas de forma muito parecida com interfaces
anotações completas são aquelas que possuem múltiplos membros 
anotações de valor único são similares às anteriores, no entanto, possuem um único membro, chamado valor 
anotações marcadoras são aquelas que não possuem membros são identificadas apenas pelo nome, sem dados adicionais 
anotações são apenas metadados informações extras sobre o código que está escrito 
anterior a ele, esta funcionalidade não era nativa na plataforma, e uma função parecida a essa só era possível com o uso de uma api externa, o xdoclet.
antes do mvc, os projetos de interface para o usuário tendiam em agrupar esses objetos mvc para aumentar a flexibilidade e a reutilização
antigamente no php por exemplo a única maneira de acessar o oracle era através de funções como oracle  anderline connect anderline oracle anderline result
ao contrário de outras construções de loop for, no entanto, loops foreach geralmente mantêm um contador não explícito eles basicamente dizem faça isso para tudo dentro deste conjunto set, em vez de faça isto x vezes
ao contrário do que acontece nos laços contados, nos laços condicionais não se sabe de antemão quantas vezes o corpo do laço será executado
ao contrário do que muitos pensam, um computador não faz nada sozinho ele é uma máquina rápida, que resolve problemas bem definidos e repetitivos
ao criar as constantes e variáveis, utilizar nomes significativos e comentar, se necessário for
ao criar as constantes e variáveis, utilizar nomes significativos e comentar, se necessário for
ao criar um método, procure sempre informar qual é a finalidade do mesmo e se ele irá retornar ou não alguma informação
ao declararmos um vetor, estamos reservando na memória principal do computador uma série de células para uso da variável daquele tipo
ao declararmos um vetor, estamos reservando na memória principal do computador uma série de células para uso da variável daquele tipo 
ao estabelecer uma condição de parada, automaticamente precisamos comparar uma ou mais variáveis
ao final do nome deve-se colocar o símbolo ponto-e-vírgula
ao incluir esse nível de abstração o compilador java difere se de outros compiladores de linguagem que escrevem instruções adequadas para o chipset de cpu no qual o programa é executado
ao lidar com arranjos, uma operação crítica é o cálculo do endereço para o elemento desejado no arranjo, o que é feito através da manipulação de ponteiros
ao ser feita uma inclusão em uma árvore avl, é possível que a mesma deixe de ser uma árvore avl, então é necessário proceder com transformações para que a árvore resultante após a inclusão permaneça avl 
ao utilizamos variáveis, podemos armazenar apenas um valor por vez
apesar de geralmente ser impossível determinar em tempo de compilação se tais conversões são seguras
apesar de possível utilizar linguagens imperativas em programação declarativa através de encapsulamento, a definição da mesma, é totalmente contrária às predisposições da programação imperativa
apesar de ter sido criada há décadas, a programação funcional ganhou mais força recentemente com linguagens funcionais como scala e clojure
apesar de ter sido sucedida pela programação orientada por objetos, pode-se dizer que a programação estruturada ainda é marcantemente influente, uma vez que grande parte das pessoas ainda aprendem programação através dela
apesar de ter sido sucedida pela programação orientada por objetos, pode-se dizer que a programação estruturada ainda é muito influente, uma vez que grande parte das pessoas ainda aprendem programação através dela
um algoritmo não representa, necessariamente, um programa de computador, e sim os passos necessários para realizar uma tarefa
em ciência da computação, um algoritmo é uma sequência finita de ações executáveis que visam obter uma solução para um problema
o conceito de algoritmo é frequentemente ilustrado pelo exemplo de uma receita culinária, embora muitos algoritmos sejam mais complexos
o conceito de algoritmo existe há séculos e o uso do conceito pode ser atribuído a matemáticos gregos
um algoritmo corretamente executado não irá resolver um problema se estiver implementado incorretamente
o conceito de algoritmo foi formalizado em mil novecentos e trinta e seis pela máquina de alan turing
um programa de computador é essencialmente um algoritmo que diz ao computador os passos específicos e em que ordem eles devem ser executados
o algoritmo pode ser considerado uma sequência de operações que podem ser simuladas por uma máquina de turing completa
quando os procedimentos de um algoritmo envolvem o processamento de dados, a informação é lida de uma fonte de entrada
o algoritmo precisa estar rigorosamente definido, especificando a maneira que ele se comportará em todas as circunstancias
uma das definições de algoritmo significa procedimentos que eventualmente terminam
não há algoritmo para realizar tal tarefa para todos os casos 
algoritmos intermináveis são quando sucesso não pode ser determinado pela interpretação da resposta e sim por condições impostas
algoritmos podem ser implementados em circuitos elétricos ou até mesmo em dispositivos mecanicos automatos
a maioria dos algoritmos são desenvolvidos para programas de computador
ada lovelace escreveu o primeiro algoritmo para ser processado por uma máquina
um programa de computador é essencialmente um algoritmo que diz ao computador os passos específicos e em que ordem eles devem ser executados
o pseudocódigo é uma linguagem simples, nativa a quem o escreve, de forma a ser entendida por qualquer pessoa é uma forma genérica
um exemplo de pseudocódigo é o portugol, que utiliza o compilador visual g
o visual g é um programa que edita, interpreta e executa algoritmos com uma linguagem próxima do português estruturado
o compilador tem que resolver um número grande de tarefas em linguagem de montagem
quando a linguagem fonte for uma linguagem de alto nível o tradutor é chamado de compilador
por que alguém escolheria programar em uma linguagem de montagem
um expert na linguagem de montagem pode produzir um código menor e muito mais eficiente do que o gerado por um programador de alto nível
certos procedimentos precisam ter acesso total ao hardware, ou seja, uso de uma linguagem de baixo nível
se a máquina alvo tiver um bit para expressar o overflow de operações, um programa em linguagem de montagem pode testar diretamente este bit
um programa em linguagem de montagem pode executar qualquer uma das instruções do conjunto de instruções da máquina alvo
o software interpretador é um programa de computador que executa instruções escritas em uma linguagem de programação
certos tipos de tradutores transformam uma linguagem fonte em uma linguagem simplificada
interpretadores são, em geral, menores que compiladores e facilitam a implementação de construções complexas em linguagens de programação
o tempo de execução de um programa interpretado é geralmente maior que o tempo de execução deste mesmo programa compilado
o interpretador deve analisar cada declaração no programa a cada vez que é executado e depois executar a ação desejada
sequência finita de regras, raciocínios ou operações que, aplicada a um número finito de dados, é chamado de algoritmo
conjunto das regras e procedimentos lógicos perfeitamente definidos que levam à solução de um problema em um número finito de etapas
uma das vantagens dos algoritmos é que eles possuem uma lógica em comum
o que vai mudar de uma linguagem para a outra, geralmente, são as palavras reservadas, sintaxes e a forma como cada uma irá se estruturar
uma sequência de raciocínios ou operações que oferece a solução de certos problemas
os algoritmos são uma série de passos necessários para resolver um determinado problema
você precisa entender que programar significa aplicar lógica e algoritmos para solucionar problemas reais do nosso dia a dia
a primeira parte de um algoritmo é saber com que tipo de dados que o algoritmo está lidando
é possível aprender algoritmos e lógica de programação mesmo sem ser um craque nas exatas
uma boa forma de entender melhor o que é lógica de programação e de saber exemplos de como ela se aplica em nosso dia a dia
as entradas de um algoritmo são muito importantes porque elas agem de diferentes formas
o algoritmo nada mais é do que uma receita, uma sequência de passos e instruções para executar ações, visando solucionar um problema
aprender algoritmos é o primeiro passo que você precisa dar para ser um programador ou desenvolvedor de software
na computação, um algoritmo é definido como uma série de instruções passo a passo que descrevem explicitamente várias operações
tudo o que o seu computador faz é executar diversas operações baseadas em certas informações fornecidas a ele
uma entrada é o dado inicial que será utilizado para seguir uma operação
baseado em entradas, você é capaz de seguir as operações que lhe foram disponibilizadas
entradas que podem se variar durante um algoritmo, são chamadas de variáveis
os algoritmos contribuíram para a evolução tecnológica vista nas últimas décadas e são cada vez mais complexos
os algoritmos datam de tempos babilônicos, mas tornaramse mais conhecidos na modernidade, principalmente, quando associados aos computadores
algoritmo pode ser entendido como uma sequência de raciocínios, instruções ou operações para alcançar um objetivo
um algoritmo, portanto, conta com a entrada e saída de informações mediadas pelas instruções
o algoritmo se justifica no resultado que ele almeja alcançar, logo, deve ter um objetivo específico
uma sequência de instruções simples pode se tornar mais complexa conforme a necessidade de considerar outras situações
quando um programa de computador trava, por exemplo, é porque ele está recebendo informações que não foi programado para processar
com o código, é a mesma coisa, sendo necessário ler linha por linha para que ele atinja o objetivo final
variáveis são as informações de entrada inseridas que determinam aonde o algoritmo poderá ir 
comandos de repetição consistem no uso de se e enquanto, para que o algoritmo saiba o que fazer em determinados processos
os programas são compostos por sequências de algoritmos
aparelhos como smartphones, computadores, smart tvs e tablets funcionam com sistemas baseados em algoritmos
o google já promoveu uma série de mudanças no algoritmo, passando a considerar centenas de variáveis para que uma página seja rankeada
o algoritmo do facebook, define o que será exibido no feed de notícias de cada usuário
o facebook foi a primeira rede social a usar algoritmos para categorizar os posts e utilizar critérios para definir o que seria exibido
o twitter não usa exclusivamente o algoritmo para determinar o feed
o instagram seguia a mesma lógica cronológica do twitter, exibindo todas as postagens por ordem, das mais novas às mais antigas
lá em dois mil e cinco, o youtube analisava apenas as vezes que um vídeo tinha sido iniciado para determinar o rankeamento 
o youtube desde dois mil e doze, usa um algoritmo que considera o tempo médio de visualização
o spotify lança semanalmente a playlist descobertas da semana, que é personalizada para cada ouvinte e contém  músicas
os algoritmos ganham contornos bastante complexos conforme seu uso em áreas mais robustas, como o marketing digital
os algoritmos passam por constantes mudanças para aprimorar a experiência do usuário e evitar práticas negativas, como o black hat
pessoas que encontram brechas para conseguir melhores posicionamentos através de macetes, são técnicas conhecidas como black hat
apesar de ser difícil conhecer todas as mudanças nos algoritmos, as mais importantes são sempre divulgadas
ao falar de algoritmo, é importante conhecer que se trata de um sistema lógico, realizando instruções sequencialmente
um algoritmo é uma sequência finita e não ambígua de instruções computáveis para solucionar um problema
um algoritmo consiste em uma expressão textual das etapas da resolução de algum problema, seja ele computacional ou não
python é uma linguagem de programação criada por guido van rossum em 
java é uma linguagem de programação e plataforma computacional lançada pela primeira vez pela sun microsystems em 
o java atualmente é mantido pela oracle
javascript é uma linguagem de programação que permite a você implementar itens complexos em páginas web
c sharp é uma linguagem de programação, multiparadigma
multiparadigma significa que uma linguagem pode ser utilizada tanto de maneira estruturada como orientada objetos
c é uma linguagem de programação compilada de propósito geral, estruturada
o que é linguagem estruturada
o que é um vetor
o que é uma matriz
o que é o paradigma orientado objetos
a programação estruturada é um paradigma, com ênfase no uso de subrotinas, laços de repetição, condicionais e estruturas em bloco
programação orientada a objetos é um modelo de análise e programação de software baseado na composição e interação entre diversas unidades
em geometria analítica, um vetor é uma classe de equipolência de segmentos de reta orientados, que possuem todos a mesma intensidade
uma matriz é uma coleção de variáveis de mesmo tipo, acessíveis com um único nome e armazenados contiguamente na memória
a verificação do tipo de um dado é feita de forma estática em tempo de compilação ou de forma dinamica em tempo de execução 
como é verificado um tipo de dado
em c, c mais mais, java e haskell os tipos de dados são estáticos
em scheme, lisp, smalltalk, perl, php, visual basic, ruby e python são dinamicos
o que é um laço de repetição
dentro da lógica de programação uma estrutura de repetição permite executar mais de uma vez o mesmo comando ou conjunto de comandos
existem  estruturas de repetição básica para praticamente todas as linguagens de programação
o que é um while
while é um laço de repetição que emite um bloco de comandos enquanto a condição for verdadeira
for é um laço de repetição utilizado para quando você sabe quantas vezes o laço será repetido
do while é um laço de repetição que irá executar um bloco de comandos antes de verificar se a condição é verdadeira
o foreach é uma simplificação do operador for que permite acessar cada elemento individualmente iterando sobre toda a coleção
algoritmos  nada  mais  são  do  que  estratégias  escritas  numa  linguagem  que parece muito com o português
os primeiros trabalhos de linguagem de programação, ou programas, foram  criados  por ada augusta byron king
os computadores da chamada primeira geração foram criados prioritariamente para uso bélico
o que foram os computadores da primeira geração
quem eram os usuários da primeira geração
os usuários da primeira geração possuíam formação muito especializada e eram muito mais cientistas e pesquisadores
o que era a primeira geração
na primeira geração, os programadores se comunicavam em linguagem de máquina com os equipamentos
linguagem de programação na primeira geração, era um conjunto de zeros e uns
em mil novecentos e trinta e sete, o norte americano howard aiken cria o primeiro computador eletromecanico, denominado mark um
em mil novecentos e quarenta e cinco, os primeiros computadores continham válvulas, programação com fios e outros apetrechos
colossus trabalhava com símbolos perfurados em fita de papel, que eram lidos por célula fotoelétrica
em mil novencentos e quarenta e três, através das idéias de alan turing, foi criado o colossus
o primeiro computador eletrônico digital de grande porte, foi o eniac
em mil novecentos e quarenta e nove, surge o primeiro computador para uso comercial, o univac;
o univac universal automatic computer era uma máquina eletrônica capaz de armazenar programas de computadores através de uma fita magnética
em mil novecentos e sessenta e quatro, surgiu a ibm deu início na terceira geração de computadores
a segunda geração de computadores após criação dos chips componentes que substituiam as válvulas e ocupar muito menos espaço
o que é a segunda geração de computadores
o que é a terceira geração de computadores
o que é a lei de moore
quem foi moore
gordon earle moore nasceu em são francisco,  de janeiro de mil novecentos e vinte e nove foi um químico estadunidense cofundador da intel
lei de moore diz que o número de transistores dos chips terá um aumento de cem por cento, pelo mesmo custo, a cada período de dezoito meses
o altair oito mil oitocentos foi o primeiro computador pessoal portátil,
as linguagens de programação de primeira geração, era o assembly que era feito em linguagem de máquina
uma linguagem de alto nível consiste em usar uma línguagem que seja natural ao ser humano
uma línguagem de baixo nível consiste em usar uma línguagem que seja próximo ao comando da máquina
qual a primeira geração de linguagem de programação
qual a segunda geração de linguagem de programação
a linguagem de segunda geração é  a  linguagem  assembler 
qual a terceira geração de linguagem de programação
na terceira geração de computadores, a ibm introduz o fortran que era a primeira linguagem de alto nível
em mil novecentos e cinquenta e nove, surge o cobol, ainda na terceira geração
linguagem comum orientada para os negócios é uma linguagem de programação orientada para o processamento de banco de dados comerciais
em mil novecentos e setenta, surge o pascal, ainda na terceira geração
pascal é uma linguagem de programação estruturada, que recebeu este nome em homenagem ao matemático e físico blaise pascal 
a linguagem c surgiu em mil novecentos e setenta e três
quando surgiu a linguagem c
c é uma das linguagens de programação mais populares e existem poucas arquiteturas para as quais não existem compiladores para c
c tem influenciado muitas outras linguagens de programação por exemplo, c mais mais originalmente começou como uma extensão para c
o que é um ponteiro em línguagem de programação
em programação, um ponteiro ou apontador é um tipo de dado de uma linguagem de programação cujo valor se refere diretamente a um outro valor 
um ponteiro é uma simples implementação do tipo referência da ciência da computação
ponteiros são diretamente suportados sem restrições em c, c mais mais e pascal, entre outras linguagens
ponteiros são utilizados para construir referências, elemento fundamental da maioria das estruturas de dados
linguagens como c, c mais mais permitem que ponteiros possam ser utilizados para apontar para funções
as funções, também conhecidas como  sub rotinas, são muito utilizadas para não precisar copiar o código todas as vezes que precisar
a estrutura de como é formado uma função, varia de linguagem para linguagem
funções e procedimentos podem ou não receber parametros
parametros são variáveis que uma função ou método deve receber para sua execução
metódos são comportamentos de objetos
objetos são coisas que existem na vida real e possuem caracteristícas
um atríbuto é uma caracteristíca de um objeto
boolean é um tipo de dado que armazena true ou false
integer é um tipo de dado que armazena inteiros
float é um tipo de dado que armazena números decimais
string é um tipo de dado que armazena caractéres
na quarta geração, surgiu linguagens orientadas á objetos e para banco de dados
atualmente, as linguagens orientada objetos dominam o mercado brasileiro, c# e java são as principais
é possível trabalhar com orientação a objetos em diversas linguagens
qual a diferença de uma línguagem para outra
apesar de muitas linguagens possuírem semelhanças e diferenças, no geral o que realmente muda são suas funcionalidades
o python pode ser usado tanto para orientação objeto ou de forma estruturada e também para aplicações web e data mining como machine learning
algoritmo deriva de al karizmi, matemático persa do século nove, se atribui a construção dos primeiros processos para operações aritméticas,
antes de desenvolver um algorítmo, é necessário compreênder o que será desenvolvido
é muito importante que para o algoritmo ser lógico, ele primeiramente seja desenvolvido com uma boa lógica
algoritmos são desenvolvidos para resolver um problema específico
char é um tipo de dado que armazena apenas uma letra
para realização de operações na programação, é usado o mais, menos, asterístico, barra invertida e porcentagem
para que é usada a porcentagem
a porcentagem é usada para pegar o resto de uma divisão por algum número
operadores lógicos são aqueles que são usados para verificação
os operadores lógicos consistem em sinal de igual, maior ou igual, menor ou igual, menor, maior e diferente
todos os operadores lógicos obedecem a notação da matemática
um repositório de dados são variáveis
as variáveis existem para que um algoritmo possa ser reutilizado em diversas ocasiões
sempre ao desenvolver um algoritmo, uma boa prática e deixar seu código o mais reutilizável possível
muitas variáveis podem deixar seu código lento
sempre ao criar uma variável, é importante levar em conta se aquilo é algo que o usuário possa querer mudar ou não
variáveis tipadas armazenadas em um vetor ou matrizes, são as que equipam mais espaço de memória
vetores na programação são semelhantes aos conceitos da matemática, porém podem armazenar várias variáveis
matrizes, são vetores dentro de vetores
em algumas linguagens de programção, vetores podem conter diferentes tipos de dados
em algumas linguagens de programação, as matrizes podem conter diferentes tipos de dados
vetores são manipulados por posições que começam do índice zero
matrizes são manipuladas por posições que começam do índice zero, mas podem ter mais do que uma dimensão contínua
quando usar uma matriz
porque utilizar uma matriz
porque usar um vetor
como é declarado um vetor
como é declarado uma matriz
o que é uma lista
quem foi alan turing
alan turing foi um matemático britanico, pioneiro da computação e considerado o pai da ciência computacional e da inteligência artificial
em ciência da computação, uma lista ou sequência é uma estrutura de dados abstrata que implementa uma coleção ordenada de valores
normalmente dados de entrada são representados pela palavra input
normalmente dados de saída são representados pela palavra print ou output
para usar uma línguagem de programação, é sempre necessário verificar se ela já está instalada no seu sistema operacional por padrão
muitas linguagens de programação necessitam ser instaladas antes de se utilizar
algums linguagens de programação se tornam muito diferentes com o passar atualizações
o que é um fluxograma
um fluxograma é composto por um diagrama de blocos que servem para representar o algoritmo de uma maneira lógica
o que é um pseudocódigo
um pseudocódigo é um código falso, que não é uma línguagem de programação
um fluxograma possuí muitos blocos, cada bloco serve para representar uma função, sendo entrada, saída ou condição lógica
o fluxograma não é muito ultilizado devido que ele não é muito eficiente se o algoritmo for muito extenso
o fluxograma é bastante usado para ensinar lógica de programação
o pseudocódigo é bastante usado para ensinar lógica de programação para iniciantes
estrutura de repetição é bastante usada para validações
para se usar uma função, os valores de entrada sempre devem ser verificados por meio de um laço de repetição
a palavra if, serve para testar uma determinada condição
a palavra else, serve para executar um bloco de código caso a condição do if não seja verdade
else if é usado para blocos de códigos que devem ser executados caso a condição do if não seja verdadeira
um bloco de código significa comandos que estão entre duas chaves ou colchetes dependendo da linguagem de programação
ao testar condições, pode ser usado o e lógico ou a palavra ou lógico
teste de mesa nada mais é do que um teste antes do código ser finalizado
a estrutura switch case, é basicamente um if de outra maneira
o switch case é usado para tratar casos específicos
switch case é muito comúm de ser usado em menus
um bom algoritmo além de ser simples de se entender, é muito eficiente
não existe segredo para se desenvolver um algoritmo considerado bom, isso vem com a maturidade
normalmente, o visual g é o pseudocógido mais ultilizado
o visual g além de ser uma linguagem estruturada em português, ele é de fácil entendimento para iniciantes
linguagens orientadas objetos são bastante usadas em aplicações, jogos e muitos outros cenários
laço infínito é um termo usado quando o algoritmo não possuí o incremento no contador
incremento significa adicionar mais um sempre que um laço terminar antes de reiniciar
decremento significa remover um sempre que o laço chegar em um determinado ponto
lógica de programação não é decorar, mas sim práticar
um algoritmo pode ser feito de diversas maneiras para chegar em um mesmo resultado
loop é um termo usado para representar o número de vezes que o laço de repetição será executado
c sharp é uma linguagem orientada objetos que surgiu em dois mil, mas que é atualizada até os dias de hoje
o c sharp também é muito ultilizado em conjunto com o aspnet
o c sharp e o java possuem muitas semelhanças e partem do mesmo princípio
o java é uma linguagem muito pesada e complexa, por isso seu uso é recomendado apenas para grandes projetos
o c sharp foi desenvolvido pela microsoft
o c sharp vem em conjunto com o visual studio da microsoft;
o visual basic é uma linguagem desenvolvida pela microsoft;
em uma linguagem de programação, muitas usam o ponto e vírgula como o final de uma linha
um sinal de igual equivale a uma atribuição
dois sinais de igual equivale a uma comparação de valores
herança é um fenômeno do paradigma orientado objeto que permite que uma classe herde atributos ou métodos de uma outra classe
casting é um fenômeno que representa a conversão do tipo de dados
em muitas linguagens, é necessário declarar o tipo de dado antes de inicializar uma variável
é necessário sempre declarar o tipo de dado
para que usar o paradigma orientado objeto
onde devo usar linguagem estruturada
é possível converter uma variável para outro tipo 
o que é um compilador
qual a diferença de um compilador e um tradutor na programação
o que é coleta de lixo e gerenciamento de memória
é possível um algoritmo travar o computador
todo laço de repetição tem um contador
o que é um contador
contador é uma variável que normalmente indica quantas vezes o laço será executado
o que é um for
como é feito laço de repetição no visual g
para , enquanto , faça , são alguns exemplos de laço de repetições no visual g
os vetores são matrizes de uma só dimensão
vetores e matrizes são estruturas de dados muito simples que podem nos ajudar muito quando temos muitas variáveis do mesmo tipo em um algoritmo
matriz é um array multi dimensional com vetor de vetores
um array é uma sequência não ordenada de dados 
o tipo array consiste em uma matriz ou coleção de dados ou matriz de um mesmo tipo
para acessar os elementos de um vetor usa se índices
o índice define a posição da variável dentro do vetor
todos os vetores tem o primeiro elemento na posição zero
todas as matrizes tem o primeiro elemento na posição zero
enquanto, é estrutura de repetição é também chamada de loop prétestado, pois a expressão booleana é verificada antes da primeira execução
as estruturas de repetição são muito utilizadas em desenvolvimento de softwares
a estrutura de repetição para, implementa um contador implicitamente
na estrutura para, não é necessário incrementar nem inicializar o contador, isso é feito automaticamente
instanciar é criar um objeto, é montar na memória um valor para este objeto
inicializar podemos dizer que que é sinônimo de atribuir um primeiro valor, não necessariamente na declaração
declaração é algo que o código faz para mostrar ao compilador que uma variável existirá no código
algumas linguagens que são dinamicamente tipadas, não exigem declaração formal da variável antes de seu uso
a estrutrura repita até, repete uma seqüência de comandos até que uma determinada condição de uma expressão lógica seja satisfeita
caractere é um tipo de dado no visual g que define variáveis do tipo string, ou seja, cadeia de caracteres
real é um tipo de dado no visual g para definir variáveis numéricas do tipo real, ou seja, com casas decimais
logico é um tipo de dado no visual g para definir variáveis do tipo booleano, ou seja, com valor verdadeiro ou falso
inteiro é um tipo de dado no visual g que define variáveis numéricas do tipo inteiro, ou seja, sem casas decimais
o visual g contém  tipos de dados, inteiro, logico, real, caractere
constantes são usadas em expressões para representar vários tipos de valores
constantes inteiras são valores numéricos sem ponto decimal, precedidos ou não por um sinal
constantes inteiras longas são constantes armazenadas em um número maior de bits se comparado a inteiras comuns
constantes octais são constantes representadas na base oito
constantes hexadecimais, são constantes representadas na base dezesseis
constante em ponto flutuante são também conhecidos como constantes reais
constantes de caracteres é uma constante de um único caractere escrito entre aspas simples
constantes em cadeia de caracteres é um constante de string
em programação, existem  tipos de constante, inteiras, inteiras longas, octais, hexadecimais, ponto flutuante, caractere e cadeia de caractere
constantes são sempre variáveis ou valores que não podem ser mudados durante o programa
no visual g, existem tres tipos de constantes, numéricos, lógicos, caracteres
constantes do tipo numérico são valores numéricos escritos na forma usual das linguagens de programação podem ser inteiros ou reais  
contantes do tipo caracteres são qualquer cadeia de caracteres delimitada por aspas duplas
constantse do tipo lógicos admite os valores verdadeiro ou falso
linguagens fortemente tipadas são aquelas em que todas as variáveis tem um tipo específico e seus tipos são importantes para a linguagem
linguagens fortemente tipadas também são estaticamente tipadas, uma variável que é declarada com um tipo, será até o seu fim do mesmo tipo
linguagens fortemente tipadas e dinamicamente tipadas são linguagens em que é declarado o tipo de variável, mas que se altera durante o programa
linguagens fracamente tipadas são aquelas que não se importam com o tipo de dados contido em uma variável
linguagens não tipadas, são aquelas em que existe apenas um tipo genérico ou mesmo nenhum tipo de dados
uma lista ou sequência é uma estrutura de dados abstrata que implementa uma coleção ordenada de valores
classes de programação são objetos, aonde têm características e comportamentos, permitindo assim armazenar propriedades e métodos dentro dela
objetos computacionais são caracterizados por atributos e métodos
atributos são as características de um objeto
métodos são as ações que os objetos podem exercer quando solicitados
linguagens estruturadas são linguagens que solucionam um único problema
é considerado programação estruturada o algoritmo que segue passos sequencia, subrotina, condicional, repetição e incursão
o cobol foi criado por investigadores de várias instituições civis e governamentais durante o ano de mil novecentos e cinquenta e nove
cobol é uma linguagem simples, com alcance limitado da função sem ponteiros, sem tipos definidos pelo usuário e sem funções definidas pelo usuário
machine learning é uma área da computação que envolve inteligência artificial
python foi projetadao com a filosofia de enfatizar a importancia do esforço do programador sobre o esforço computacional 
o python prioriza a legibilidade do código sobre a velocidade ou expressividade
o python é uma linguagem que combina uma síntaxe coesa com muitas bibliotecas poderosas por padrão
o python foi criado em mil novecentos e noventa e um
o java funciona através do interpretador chama de java virtual machine
o java foi criado em mil novecentos e noventa e cinco
o mascote do java é o duke
o java inicialmente era chamado de green project em mil novecentos e noventa e um na empresa sun mycrosystems
o visual g foi criado pelo professor cláudio morgado de souza da apoio informática, e teve a ajuda do professor antonio carlos nicolodi
microsoft visual studio é um ambiente de desenvolvimento integrado ide da microsoft
no visual studio, é contido o c sharp, visual basic, dot net, c, c mais mais e f sharp
o visual studio foi lançado em mil novecentos e noventa e sete
o visual studio esta disponível em duas versões, enterprise e community
f sharp é uma linguagem de programação multiparadigma para a plataforma dot net, que engloba funcões, imperativos e orientação a objetos
o c mais mais, surgiu em mil novecentos e setenta e sete
o c mais mais pode ser usada para programar qualquer tipo de hardware, desde os mais simples até os mais complexos
o c mais mais funciona independentemente da presença de sistemas operacionais
alguns exemplos genéricos de algoritmos são uma coreografia, um manual de instruções, uma receita culinária
torre de hanói é um quebra cabeça que consiste em uma base contendo três pinos, em um dos quais são dispostos alguns discos uns sobre os outros
o eniac foi o primeiro computador digital eletrônico no mundo
o eniac foi criado em fevereiro de mil novecentos e quarenta e seis pelos norte americanos john eckert e john mauchly
o eniac era usado na segunda guerra mundial para computar trajetórias táticas que exigissem conhecimento substancial em matemática
o eniac pesava trinta toneladas, media de cinco vírgula cindo metros de altura e vinte e cinco metros de comprimento
o eniac ocupava cento e oitenta métros cúbicos de área construída 
o eniac foi construído sobre estruturas metálicas com dois vírgula setenta métros de altura e contava com setenta mil resistores
o eniac tinha dezessete e quatrocentas mil válvulas a vácuo ocupando a área de um ginásio desportivo 
o eniac ao ser ligado, segundo tom forester, o eniac consumiu tanta energia que as luzes de filadélfia piscaram
tipos de variáveis ou dados é uma combinação de valores e de operações que uma variável pode executar
tipos de dados são utilizados para indicar ao compilador ou interpretador as conversões necessárias para obter os valores em memória durante a construção do programa
a verificação do tipo de um dado é feita de forma estática em tempo de compilação ou de forma dinamica em tempo de execução
um tipo composto pode ser construído em uma linguagem de programação a partir de tipos primitivos e de outros tipos compostos, em um processo chamado composição
um tipo primitivo também conhecido por nativo ou básico é fornecido por uma linguagem de programação como um bloco de construção básico 
tipos primitivos mais sofisticados incluem tuplas, listas ligadas, números complexos, números racionais e tabela hash, presente sobretudo em linguagens funcionais
há muitos exemplos de algoritmos, um deles são os manuais de instruções 
um algoritmo pode ser representado pelo chamado português estruturado, que é uma ferramenta que usa combinações de sequências, seleções e repetições
em java byte é o tipo de dado capaz de armazenar oito bits de informação, um número inteiro entre menos cento e vinte e sete e cento e vinte e sete 
em java short é o tipo de dado que é capaz de armazenar números inteiros de dezesseis bits, um número inteiro entre menos trinta e dois mil e trinta e dois mil
em java double é o tipo de dado capaz de armazenar números reais de precisão dupla, sessenta e quatro bits de informação em forma de número real
em java float é o tipo de dado capaz de armazenar números reais de precisão simples, trinta e dois bits de informação representando um número real
o primeiro método estruturado para o fluxo de um processo, o fluxograma, foi introduzido por frank gilberth
onde ficaram tão famosos, os fluxogramas chegaram na computação em mil novecentos e quarenta e sete
o fluxograma pode ser definido também como o gráfico em que se representa o percurso ou caminho percorrido por certo elemento
a existencia de fluxogramas para cada um dos processos é fundamental para a simplificação e racionalização do trabalho 
o termo fluxograma designa uma representação gráfica de um determinado processo ou fluxo de trabalho
através do fluxograma é possível compreender de forma rápida e fácil a transição de informações ou documentos entre os elementos que participam no processo em causa
os fluxogramas são muito utilizados em projetos de software para representar a lógica interna dos programas
fluxogramas podem também ser usados para desenhar processos de negócio e o workflow que envolve diversos atores corporativos no exercício de suas atribuições
pseudolinguagem é uma linguagem de programação genérica e rica em detalhes 
pseudolinguagem assemelha-se bastante à forma como os programas são escritos
a diferença entre a descrição narrativa e o pseudocódigo está principalmente no vocabulário finito e bem menor do pseudocódigo
os livros sobre a ciência de computação utilizam frequentemente o pseudocódigo para ilustrar os seus exemplos
no caso da língua portuguesa existem alguns interpretadores de pseudocódigo
a tela principal do visual g é composta pela barra de tarefas no topo, o editor de texto, o quadro de variáveis, o simulador de saída e a barra de status
entrada é um termo utilizado quase que exclusivamente no ramo da computação, indicando entrada de dados por meio de algum código ou programa
saída é um termo utilizado quase que exclusivamente no ramo da computação, indicando entrada de dados por meio de algum código ou programa
são exemplos de unidades de entrada de um computador microfone, teclado, mouse, scanner
são exemplos de unidades de saída de um computador monitor, caixas de som, impressora
algumas unidades são de entrada e saída de dados ou também chamados dispositivos híbridos como disquete, tela sensível ao toque, celular
chamamos de dispositivos de entrada, os responsáveis por incorporar informação de um sistema de computador
chamamos de dispositivos de saída os responsáveis por extrair informação de um sistema de computador  
programação é o processo de escrita, teste e manutenção de um programa de computador
o programa é escrito em uma linguagem de programação 
é possível programar diretamente em linguagem de máquina
diferentes partes de um programa podem ser escritas em diferentes linguagens
diferentes linguagens de programação funcionam de diferentes modos
os programadores podem criar programas muito diferentes para diferentes linguagens
a maioria das linguagens podem ser usadas para criar qualquer programa
há várias décadas se debate se a programação é mais semelhante a uma arte, a uma ciência, à matemática, à engenharia , ou se é um campo completamente novo
a criação de um programa de computador consiste em cinco passos principais
o primeiro passo para se programar, é reconhecer a necessidade de um programa para resolver um problema ou fazer alguma coisa
o segundo passo para se programar é planificar o programa e selecionar as ferramentas necessárias para resolver o problema
o terceiro passo para se programar é escreve o programa na linguagem de programação escolhida
o quarto passo para se programar é a tradução do código fonte legível pelo homem em código executável pela máquina, o que é feito através de compiladores e outras ferramentas
o quinto passo para se programar é testar o programa para ter a certeza de que funciona, se não, regressar ao terceiro passo de como programar
heron de alexandria no século primeiro inventou teatros automatizados que usavam programação análoga para controlar os fantoches, portas, luzes e efeitos de som
a mais antiga programadora de computadores que se conhece é ada lovelace, filha de anabella e de lord byron o poeta
ada lovelace traduziu e expandiu uma descrição da sua máquina analítica
um dos primeiros programadores que se tem notícia de ter completado todos os passos para a computação sem auxílio, incluindo a compilação e o teste, é wallace jay eckert
o trabalho de wallace antecede a ascensão das linguagens de computador, porque ele usou a linguagem da matemática para solucionar problemas astronômicos  
wallace trabalhou em um laboratório de computação para a universidade de columbia com equipamentos fornecidos pela ibm
wallace usou cartões perfurados para armazenar os resultados intermediários de seus cálculos
a diferença entre eckert e os programadores dos dias de hoje é que o exemplo do seu trabalho influenciou o projeto manhattan 
seu trabalho foi reconhecido por astrônomos do observatório da universidade de yale e muitas outras universidades
alan turing é frequentemente encarado como o pai da ciência de computadores e, por afinidade, da programação 
linguagem de montagem é uma notação legível por humanos para o código de máquina que uma arquitetura de computador específica usa
em assembly existe uma correspondência de um para um do código programado, uma instrução do programa equivale a uma operação do computador
um compilador é um programa de computador que, a partir de um código fonte escrito , cria um programa semanticamente equivalente
um compilador traduz um programa de uma linguagem textual facilmente entendida por um ser humano para uma linguagem de máquina
são comuns compiladores que geram código para uma máquina virtual que é, depois, interpretada por um interpretador
nos primeiros anos da programação automática, existiam programas que percorriam bibliotecas de sub-rotinas e as reunia, ou compilava
o nome compilador é usado principalmente para os programas que traduzem o código fonte para uma linguagem de programação de baixo nível
interpretadores são programas de computador que leem um código fonte de uma linguagem de programação interpretada e o converte em código executável
o interpretador lê o código fonte linha a linha e o converte em código objeto à medida que o executa
estrutura de seleção é uma expressão condicional que faz o desvio do fluxo de controle
nas linguagens de programação, usamos as palavras em inglês para expressar uma estrutura de seleção, como if, else if e else
quando o interpretador encontra o identificador se, ele espera em seguida uma condição booleana sob forma de expressão relacional 
caso uma condição seja falsa, o bloco de código seguido de senão é executado
a estrutura senão se é formada pela composição de estruturas de seleção
nem toda estrutura de seleção necessite de um senão
o operador ternário é uma estrutura de seleção composta presente em linguagens de programação derivadas de c
a seleção de múltipla escolha compara um dado valor a constantes
um asserto é uma estrutura de seleção usada em programação que indica que o desenvolvedor asserta que a condição dada é sempre verdadeira 
uma operação ternária é uma operação com três operandos
a estrutura para cada é usada para iterar itens de uma coleção
a construção para ou repetição com variável de controle, é uma estrutura de repetição que designa uma variável de controle para cada iteração
uma cadeia de caracteres é uma sequência de caracteres, geralmente utilizada para representar palavras
em ciência da computação, um heap é uma estrutura de dados especializada
o vetor pode ser considerado uma variável multidimensional indexada
a matriz é uma variável multidimensional indexada, o seu diferencial é que somente na matriz é possível trabalhar com colunas e linhas
a evolução dos computadores acompanhou a evolução da sociedade durante os séculos século vinte e vinte e um
computadores são aparelhos eletrônicos que recebem, armazenam e produzem informações de maneira automática
computadores fazem parte do nosso cotidiano, sendo cada vez maior o número de computadores usados no mundo
a palavra computador vem do verbo computar
computador significa calcular
uma das primeiras máquinas de computar foi o ábaco
o ábaco é instrumento mecânico de origem chinesa criado no século cinco antes de cristo
o ábaco é considerado o primeiro computador
o ábaco foi uma espécie de calculadora que realizava operações algébricas 
século dezessete, o matemático escocês john napier foi responsável pela invenção da régua de cálculo
a régua de cálculo foi o primeiro instrumento analógico de contagem capaz de efetuar cálculos logaritmos
a régua de cálculo foi considerada a mãe das calculadoras modernas
por volta de mil seiscentos e quarenta, o matemático francês pascal inventa a primeira máquina de calcular automática 
a primeira máquina de calcular foi sendo aperfeiçoada nas décadas seguintes até chegar no conceito que conhecemos hoje
a primeira calculadora de bolso capaz de efetuar os quatro principais cálculos matemáticos, foi criada por gottfried wilhelm leibniz
leibniz foi um alemão que desenvolveu o primeiro sistema de numeração binário moderno que ficou conhecido com roda de leibniz
a primeira máquina mecânica programável foi introduzida pelo matemático francês joseph marie jacquard
a máquina de jacquard tratava-se de um tipo de tear capaz de controlar a confecção dos tecidos através de cartões perfurados
george boole foi um dos fundadores da lógica matemática
a lógica se tornou uma poderosa ferramenta no projeto e estudo de circuitos eletrônicos e arquitetura de computadores
no seculo vinte e um, o matemático inglês charles babbage criou uma máquina analítica
a máquina de charles babbage é comparada com um computador
por conta da invenção de charles babbage, ele é considerado o pai da informática
o computador não possui um inventor
computadores foram evoluindo juntamente com a engenharia e matemática da época
a terceira geração foi o período que os chips foram criados e a utilização de computadores pessoais começou
atualmente, estamos na quarta geração de computadores
alguns especialistas consideram os supercomputadored de hoje em dia como de quinta geração
o dia da informática é comemorado em quinze de agosto, data que marca o surgimento do primeiro computador digital eletrônico, o eniac 
a primeira programadora da história, foi uma mulher
a primeira linguagem de programação, surgiu também de uma mulher
o dia do programador, é comemorado no dia doze de setembro
a primeira linguagem de programação é chamada de flow matic
na russia, o dia do programador é um feriado nacional
existem quarenta linguagens de programação usadas e reconhecidas
existem no total mais de mil cento e cinquenta linguagens, a maioria são abstratas
o brasil possui três linguagens de programção
lua, elixir e boo, são linguagens brasileiras
o ponto e vírgula em algumas linguagens como assembly, é usado para comentários
estudos mostram que a maior causa de irritações em programadores é o código mal indentado
na ciência da computação, indentação é um termo aplicado ao código fonte de um programa para ressaltar ou definir a estrutura do algoritmo
existe uma linguagem de programação que ao invés de ter a saída no computador, ela produz reações químicas
linguagem de programação é um método padronizado para comunicar instruções para um computador
a programação é um conjunto de regras sintáticas e semânticas usadas para definir um programa de computador
programação permite que um programador especifique precisamente sobre quais dados um computador vai atuar
a programação é responsável por armazenar ou transmitir dados e quais ações devem ser tomadas sob várias circunstâncias
linguagens de programação podem ser usadas para expressar algoritmos com precisão
o conjunto de palavras lexemas classificados em tokens, constituem o código fonte de um software
o código fonte é depois traduzido para código de máquina, que é executado pelo microprocessador
uma das principais metas das linguagens de programação é que programadores tenham uma maior produtividade 
linguagem de programação permite expressar intenções mais facilmente do que quando comparado com a linguagem que um computador entende nativamente
linguagens de programação são projetadas para adotar uma sintaxe de nível mais alto
a responsabilidade de uma linguagem de programação é ser mais facilmente entendida por programadores humanos
linguagens de programação são ferramentas importantes para que programadores e engenheiros de software possam escrever programas mais organizados
uma linguagem de programação permite que um programa seja feito com maior rapidez
linguagens de programação também tornam os programas menos dependentes de computadores ou ambientes computacionais específicos
programas escritos em linguagens de programação são traduzidos para o código de máquina do computador no qual será executado
uma meta ambiciosa do fortran, uma das primeiras linguagens de programação, era esta independência da máquina onde seria executada
uma das primeiras linguagens de programação para computadores foi provavelmente plankalkül
o plankalkul foi criado por konrad zuse na alemanha nazista
o plankalkul teve pouco ou nenhum impacto no futuro das linguagens de programação
o primeiro compilador foi escrito por grace hopper
o primeiro compilador foi apresentado em mil novecentos e cinquenta e dois
o primeiro compilador foi para a linguagem de programação a zero
a primeira linguagem de programação de alto nível amplamente usada foi fortran
o frotran foi criado em mil novecentos e cinquenta e quatro
em mil novecentos e cinquenta e sete foi criada b zero, sucessora da a zero
o b zero deu origem a flow matic
o flow matic foi antecessor imediato do cobol
o cobol foi uma linguagem de ampla aceitação para uso comercial
a linguagem algol foi criada em mil novecentos e cinquenta e oito
o algol sessenta teve grande influência no projeto de muitas linguagens posteriores
a linguagem lisp foi criada em mil novecentos e sessenta e nove e se tornou amplamente utilizada na pesquisa na área de ciência da computação
o lisp foi mais proeminentemente na área de inteligência artificial
uma lniguagem relacionada ao campo da ia, surgiu em mil novecentos e setenta e dois, a linguagem prolog
o prolog foi uma linguagem do paradigma lógico
a orientação a objetos é um marco importante na história das linguagens de programação
a linguagem simula sessenta e sete introduziu o conceito de classes
a linguagem smalltalk expandiu o conceito de classes
a linguagem smalltalk se tornou a primeira linguagem de programação que oferecia suporte completo à programação orientada a objetos
a linguagem c mais mais popularizou a orientação a objetos
a linguagem c mais mais era originalmente conhecida como c com classes
diversas linguagens de programação surgiram desde o c mais mais
dentre as linguagens influenciadas pelo c mais mais incluem se c sharp, vb, java, pascal, php e python
o processo da compilação consiste em uma linguagem de programação pode ser convertida, ou traduzida, em código de máquina por compilação
o processo da compilação também pode ser compilado por um processo denominado interpretação
tanto na compilação como na interpretação ocorre a tradução do código fonte para código de máquina
se o método utilizado traduz todo o texto do programa, para só depois executar o programa, então diz-se que o programa foi compilado
o mecanismo utilizado para a tradução é um compilador
o compilador por sua vez nada mais é do que um programa
a versão compilada do programa tipicamente é armazenada
a versão compilada de um programa pode ser executado um número indefinido de vezes sem que seja necessária nova compilação
o armazenamento da compilação compensa o tempo gasto na compilação
armazenamento de compilação acontece com linguagens como pascal e c
se o texto do programa é executado à medida que vai sendo traduzido como em javascript ou python então diz-se que o programa foi interpretado
quando um programa é interpretado se diz que o mecanismo utilizado para a tradução é um interpretador
programas interpretados são geralmente mais lentos do que os compilados
programas interpretados são geralmente mais flexíveis
programas interpretados podem interagir com o ambiente mais facilmente
existe distinção entre linguagens interpretadas e compiladas
há linguagens compiladas para um código de máquina virtual como java e c sharp
há outras formas de interpretar códigos fontes, ao invés de ser interpretado linha a linha existe blocos compilados para a memória
blocos compilados para memória vão de acordo com as necessidades
blocos compilados por memória aumentam a performance dos programas quando os mesmos módulos são chamados várias vezes
blocos compilados por memória é uma técnica conhecida como jit
na linguagem java, o compilador traduz o código java para o código intermediário e portável da jvm
as jvms originais interpretavam esse código, de acordo com o código de máquina do computador hospedeiro
atualmente a jvm compila, segundo a técnica jit o código jvm para código hospedeiro
a tradução é tipicamente feita em várias fases, sendo as mais comuns a análise léxica ou análise sintática
em compiladores também é comum a geração de código intermediário
programação estruturada é uma forma de programação que prega que todos os programas possíveis podem ser reduzidos a apenas três estruturas
as estruturas de uma programação estruturada são sequência, decisão e repetição
um dos primeiros a preconizar a programação estruturada foi haskell b curry
com o passar do tempo, na prática, a programação estruturada foi sido transformada na programação modular
a programação estruturada orienta os programadores para a criação de estruturas simples em seus programas, usando as sub-rotinas e as funções
programação estruturada foi a forma dominante na criação de software entre a programação linear e a programação orientada por objetos
apesar de ter sido sucedida pela programação orientada por objetos, pode-se dizer que a programação estruturada ainda é marcantemente influente
grande parte das pessoas ainda aprendem programação através da programação estruturada 
a orientação a objetos superou o uso das linguagens estruturadas no mercado
niklaus wirth foi criador da linguagem pascal entre outras
programação modular é uma forma de programação no qual o desenvolvimento das rotinas de programação é feito através de módulos
modulos na programação modular são interligados entre si através de uma interface comum
programação modular foi apresentada originalmente pela information and systems institute
programação modula foi introduzida em mil novecentos e sessenta e oito
o líder da programação modular foi larry constantine
exemplos de linguagens modulares são as linguagens modula dois
modula dois foi desenvolvida por niklaus wirth
modula três foi desenvolvida por niklaus wirth
modula três foi a sucessora do modula dois
a orientação a objetos, também é conhecida como programação orientada a objetos p o o
a orientação a objetos é conhecida em inglês como object oriented programming o o p
orientação a objetos é um paradigma de programação de sistemas de software baseado na idéia de diversas unidades de software chamadas de objetos
o extensivo uso de objetos, particularmente em conjunção com o mecanismo de herança, caracteriza o estilo de programação orientada a objetos
em alguns contextos, prefere se usar modelagem orientada ao objeto uml em vez de programação
o paradigma orientação a objetos tem bases conceituais e origem no campo de estudo da cognição 
a orientação objetos influenciou a área de inteligência artificial e da linguística no campo da abstração de conceitos do mundo real
na qualidade de método de modelagem, é tida como a melhor estratégia
eliminar o gap semântico retira a dificuldade recorrente no processo de modelar o mundo real
a análise e projeto orientados a objetos tem como meta identificar o melhor conjunto de objetos para descrever um sistema de software
o funcionamento da p o o se dá através do relacionamento e troca de mensagens entre objetos
na programação orientada a objetos, implementa-se um conjunto de classes que definem os objetos presentes no sistema de software
cada classe determina o comportamento e estados possíveis de seus objetos
em p o o é possível fazer relacionamento entre objetos 
em p o o, métodos representam comportamentos de um objeto
em p o o, atributos são características únicas daquele objeto
o fenômeno chamado de herança, é quando um objeto herda de outra em p o o
sobrecarga de métodos é um fenômeno que ocorre quando um método de mesmo nome tem outro paramêtro
problemas de programação linear são problemas de otimização nos quais a função objetivo e as restrições são todas lineares
programação linear é uma importante área da otimização por várias razões
muitos problemas práticos em pesquisa operacional podem ser expressos como problemas de programação linear
certos casos especiais de pl, tais como problemas de network flow e problemas de multicommodity flow são considerados importantes
vários algoritmos para outros tipos de problemas de otimização funcionam resolvendo problemas de pl como sub-problemas
historicamente, ideias da programação linear inspiraram muitos dos conceitos centrais de teoria da otimização
na maioria das linguagens de programação, a indentação é empregada com o objetivo de ressaltar a estrutura do algoritmo
a indentação aumenta a legibilidade do código
em algumas linguagens, entretanto, a indentação é obrigatória como python, occam e haskell, por exemplo
python, occam e haskel utilizam a mudança de indentação para definir a hierarquia dentre blocos de código
a indentação pode mudar completamente a aparência de um código
o jeito certo de indentar um código, é seguindo a hierarquia do que será executado em um bloco de código
programação lógica é um paradigma de programação que faz uso da lógica matemática 
john mccarthy foi o primeiro a publicar uma proposta de uso da lógica matemática para programação
a primeira linguagem de programação lógica foi a planner
planner permitia a invocação orientada a padrões de planos procedimentais de asserções e de objetivos
planner surgiu da necessidade de adaptação aos sistemas de memória muito limitada que eram disponíveis quando ela foi desenvolvida
a linguagem planner usava estruturas de controle de backtracking
a estrutura backtracking funciona de tal forma que apenas um único caminho computacional tinha que ser armazenado por vez
o prolog foi desenvolvido como uma simplificação do planner
o prolog permitia a invocação orientada a padrões apenas a partir de objetivos
o prolog foi inspirado pelo backtracking
a partir do planner, foram desenvolvidas as linguagens de programação q a quatro, popler, conniver, e qlisp 
as linguagens de programação mercury, visual prolog, oz e frill, foram desenvolvidas a partir do prolog
atualmente existem linguagens de programação lógica concorrente derivadas do planner
o ether é uma linguagem que existe hoje que foi seguida pelo planner 
hoje em dia, linguagens que seguiram o planner, não usam mais o backtracking
em programação lógicam o programa básico formará conclusões imediatas a partir de uma lista de premissas
conclusões serão tanto sentenças declarativas quanto imperativas em promação lógica
em programação lógica, quando uma sentença imperativa é deduzida, o programa toma uma ação correspondente
a lógica de programação tem como objetivo realizar funções ou esquemas lógicos por meio de parâmetros e metas
a linguagem de programação prolog foi explicitamente apresentada como baseada na lógica matemática
a alegação do prolog ser apresentado como lógica matemática, era que um programa prolog podia literalmente ser lido como um conjunto de fórmulas
prolog foi desenvolvida em mil novecentos e setenta e dois por alain colmerauer
o prolog veio de uma colaboração entre colmerauer em marselha e robert kowalski em edinburgo
colmerauer trabalhava na compreensão da linguagem natural, usando lógica para representar semânticas
algoritmo de ordenação em ciência da computação é um algoritmo que coloca os elementos de uma dada sequência em uma certa ordem
existem várias razões para se ordenar uma sequência
uma das razões de se ordenar uma sequência é a possibilidade se acessar seus dados de modo mais eficiente
em ciência da computação, a análise de algoritmos tem como função determinar os recursos necessários para executar um dado algoritmo
a eficiência ou complexidade de um algoritmo é função do tamanho do problema
a eficiência de um algoritmo também é dado pelo número de passos necessário ou de memória do sistema usado para executar o algoritmo
um dos maiores exemplos de algoritmos da anciedade, são a peneira de eratóstenes e o algoritmo de euclides
existe uma grande variedade de linguagens de programação, cada uma com características específicas
a seleção multípla desvia o fluxo de código para o ponto indicado pela primeira constante onde há casamento
wallace usou cartões perfurados para armazenar os resultados intermediários de seus cálculos
a máquina de alan turing e o cálculo lambda de alonzo church, formaram a fundação da programação 
é chamado de código intermediário, o que pode ser diretamente executado por um programa chamado interpretador
em algoritmos é necessário que os passos sejam finitos e operados sistematicamente
se um algoritmo trava é porque, não foram considerados todos os cenários
atualmente, o algoritmo do google verifica questões como as preferências do usuário, aparelho usado, qualidade do conteúdo e localização
assembly é considerada  de  segunda  geração pois não é uma linguagem nativa do microprocessador
um programador que use a linguagem assembler ainda deve compreender as características da arquitetura do microprocessador
um asserto é uma estrutura de seleção usada em programação que indica que o desenvolvedor asserta que a condição dada
estrutura de seleção é sempre verdadeira
a estrutura de seleção básica segue uma asserte
uma asserte é uma estrutura usada para auxiliar a especificação de programas
o asserte também é para indicar pré requisitos de blocos de códigos
uma pré-condição é um asserto adicionado no início de um bloco de código
o asserto determina o conjunto de estados em que o código é esperado ser executado
uma pós condição é um asserto adicionado no final de um bloco de código
a pós condição determina o conjunto de estados em que o código é esperado após ser executado
a pós condição é uma técnica que é parte do paradigma de programação por contratos
diversas linguagens de programação modernas oferecem essa estrutura de seleção
a estrutura de seleção é verificada em tempo de execução
caso uma condição seja falsa, a execução é abortada
quando a execução é abortada, facilita a depuração de um sistema
estrutura de seleção é, na ciência da computação, uma estrutura de desvio do fluxo de controle
estrutura de seleção, nada mais é do que uma expressão condicional
a estrutura de seleção, também pode ser considerada uma construção adicional
a estrutura de seleção é presente em linguagens de programação que realiza diferentes computações
a estrutura de seleção também é presente em ações que dependem de uma condição que é verdadeira ou falsa
na estrutura de seleção, a expressão é processada e transformada em um valor booleano 
nas linguagens de programação, usamos as palavras em inglês para expressar uma estrutura de seleção, como if, else if e else
seleção simples e composta são estruturas de seleção diferentes
a condição se então é uma estrutura de seleção comum em diversas linguagens de programação
a condição se não também é uma estrutura de seleção comum
a estrutura de uma seleção simples é a seguinte se condição então, bloco de código, senão bloco de código fim se
quando o interpretador encontra o identificador se, ele espera em seguida uma condição booleana
uma condição booleana também é um expressão relacional 
uma condição boolean pode ser verdadeira ou falsa
se a condição é verdadeira, o bloco de código seguido de então é executado
caso a condição seja falsa, o bloco de código seguido de senão é executado
execução do bloco de código da estrutura de seleção, o fluxo do programa é retornado para o ponto indicado por fim se
a parte do senão é opcional e pode ser omitida
caso o senão seja omitido, a estrutura é chamada de seleção simples
caso o senão, não seja omitido é chamada seleção composta
a estrutura senão se é formada pela composição de estruturas de seleção
operador ternário é uma estrutura de seleção composta presente em linguagens de programação derivadas de c
a estrutura básica de um operador ternário é a seguinte condição interrogação bloco de código do então dois pontos senão
a estrutura de seleção de múltipla escolha compara um dado valor a constantes
a estrutura de seleção desvia o fluxo de código para o ponto indicado pela primeira constante onde há casamento
normalmente contadores de um laço são constantes
normalmente contadores de um laço são chamados de i
a sintaxe é do pseudocódigo é genérica e muitas vezes não está disponível em algumas linguagens de programação
o término de um bloco de código dentro de uma estrutura de múltipla escolha depende da implementação
tipicamente, uma palavra reservada é usada no final do bloco
palavras reservadas, são palavras que se usa em um linguagem para indicar algum comando
quando um palavra reservada é encontrada, o fluxo de código é desviado para fim escolha
quando o fluxo do código é desviado, é terminado a estrutura 
caso uma palavra reservada não seja encontrada, várias linguagens especificam o fluxo de execução de código é continuado
casamento de padrões é uma alternativa mais sofisticada para as estruturas tradicionais de seleção
casamento de padrões é disponibilizada em algumas linguagens funcionais
a linguagem de programação c possui o operador ternário
linguagens derivadas de c também possuem o operador ternário
a operação ternária avalia para operação um se a condição é verdadeira
caso a condição da operação ternária não seja verdadeira, avalia a operação dois
o uso de um operador ternário para representar uma expressão condicional foi antecipado pelo algol
o algol permitia construções se então senão em expressões
construções semelhantes ao algol são encontradas em linguagens que suportam programação funcional
o condicional material ou simplesmente condicional, é uma operação lógica
o condicional material conecta duas proposições através de uma constante lógica
uma condição lógica, ou simplesmente condição, é quando um fator só pode ocorrer se um outro fator ocorrer também
uma condição lógica são fatores lógicos que determinarão uma ação
o condicional material pretende ser a versão formal do condicional na linguagem natural
o condicional material se expressa por meio de palavras
o condicional material se expressa pelas palavras se, então, vou
em lógica proposicional, o condicional material é uma função de verdade binária, que devolve falso quando a é verdadeira
em lógica proposicional, o condicional material é uma função de verdade binária, que devolve true quando a é falsa
em lógica proposicional é devolvido verdadeiro em qualquer outro caso além de a e b
lógica de predicados, pode ser visto como uma relação de subconjunto entre a extensão de predicados possivelmente complexos
em lógica binária, ocorrem apenas dois estados zero e um
em lógica binária, o zero representa o false
em lógica binária, o um representa verdadeiro
em ciência da computação, estrutura de controle refere-se à ordem em que instruções e chamadas de função são executadas ou avaliadas
estrutura de controle também pode ser chamado de fluxo de controle
os tipos de estruturas de controle disponíveis diferem de linguagem para linguagem
estruturas de controle podem ser cruamente caracterizados por seus efeitos
a primeira característica de uma estrutura de controle é a continuação da execução em uma outra instrução
como na estrutura sequencial ou em uma instrução jump a estrutura de controle continua sua execução em outra instrução
a execução de um bloco de código ocorre somente se uma condição é verdadeira em uma estrutura de seleção
a execução de um bloco de código enquanto uma condição é verdadeira, ou de forma a iterar uma coleção de dados é uma estrutura de repetição
interrupções e sinais são mecanismos de baixo nível que podem alterar o fluxo de controle de forma similar a uma sub-rotina
interrupções e sinais geralmente ocorrem em resposta a algum estímulo externo ou um evento ao invés de uma estrutura de controle
em nível de linguagem de máquina, as instruções de estruturas de controle geralmente funcionam ao alterar o contador de programa
para algumas cpus, as únicas instruções de estruturas de controle disponíveis são os diversos tipos de jump condicional
uma etiqueta é um nome ou um número explícito atribuído a uma posição fixa no código fonte
uma etiqueta pode ser referenciada pelas instruções de fluxo de controle
um exemplo de uma etiqueta é a atribuição de um número para cada linha do código fonte, frequente em linguagem de máquina
linguagens como c definem uma etiqueta como um identificador
a etiqueta geralmente aparece no início da linha
o gotwo é a forma mais simples de transferência de controle incondicional
o efeito do gotwo é fazer com que a próxima instrução executada seja aquela imediatamete após a etiqueta indicada
o notável cientista da computação edsger dijkstra tinha posição contrária ao gotwo
gotwo era um recurso bastante comum na programação da época de edsger
em mil novecentos e sessenta e oito surgiu o artigo a case against the go two statement 
dijkstra alegava que o gotwo era motivo para vários erros de programação
o artigo a case against the go two statement é considerado como um grande passo para a depreciação do comando
o abandono do gotwo acabou fazendo que estruturas de controle como o laço de repetição fossem tomando mais espaço
o título mais famoso para o artigo, go to statement considered harmful, foi um trabalho não de dijkstra mas de niklaus wirth
a terminologia de sub rotina varia porque ela pode ser conhecida como rotina, procedimento, função ou método
durante a década de mil novecentos e cinquenta, a memória disponível era pequena, e sub rotinas reduziam o tamanho dos programas
sub rotinas resumem somente uma vez alguma rotina que poderia ser usada em diversas partes do código
atualmente sub rotinas são usadas para ajudar na estruturação dos programas
sub rotinas isolam algoritmos ou ainda encapsulam algum método
uma estrutura sequencial realiza um conjunto predeterminado de comandos de forma sequencial
uma estrutura sequencial é um conjunto predeterminado na ordem em que foram declarados no código fonte 
a cada instrução de uma estrutura sequencial, o contador de programa é incrementado
também chamada de expressão condicional ou ainda construção condicional, a estrutura de seleção realiza diferentes computações ou ações
a expressão condicional dependem se a seleção é verdadeira ou falsa 
a condição é uma expressão processada e transformada em um valor booleano
uma estrutura de repetição realiza e repete diferentes computações ou ações dependendo se uma condição é verdadeira ou falsa
a condição é um expressão processada e transformada em um valor booleano 
está associado a uma condição além da condição bloco de código
uma expressão verifica a condição
se uma expressão seja verdadeira, o bloco é executado
após o final de uma execução do bloco, uma condição é verificada novamente
caso uma expressão ainda seja verdadeira, o código é executado novamente
caso um bloco de código nunca modificar o estado da condição, a estrutura será executada para sempre
uma situação que o bloco de código nunca modifica é dechamada laço infinito
é possível especificar uma estrutura em que o bloco de código modifica o estado da condição, mas esta é sempre verdadeira
algumas linguagens de programação especificam ainda uma palavra reservada para sair da estrutura de repetição de dentro do bloco de código
também é oferecido por algumas linguagens uma palavra reservada para terminar uma iteração específica do bloco de código
é possível forçar uma nova verificação da condição
em ciência da computação, uma estrutura sequencial é uma estrutura de desvio do fluxo de controle presente em linguagens de programação
a estrutura sequencial realiza um conjunto predeterminado de comandos de forma sequencial, de cima para baixo
a estrutura sequencial é realizada na ordem em que é declarada
a estrutura básica de uma sequencial é a repetição de comandos sequencialmente
uma estrutura sequencial é feito por ação, ação, ação, ação e ação
se não for apropriado ao problema, o algoritmo é ineficaz
um algoritmo eficaz permite solucionar classes semelhantes de problemas
informações fornecidas para um computador são as entradas
os tipo mais comuns de dados são texto, inteiro, lógico e real
um algoritmo sempre visa atingir um resultado
java foi influenciado pela paradigma e estrutura da linguagem c
um ponteiro atribui o valor alocado em outra área da memória, através de seu endereço
em uma lista o mesmo valor pode ocorrer mais de uma vez 
else ifs ainda sim precisam ser tratada com uma condição
ciência da computação é a ciência que estuda as técnicas, metodologias e instrumentos computacionais
ciência da computação também sereve para automatizar processos 
a ciência da computação desenvolve soluções baseadas no uso do processamento de dados 
ciência da computação não se restringe apenas ao estudo dos algoritmos
as aplicações da ciência da computação e implementações na forma de software, extrapolam para todo e qualquer conhecimento pautado no computador
tudo que envolve também a telecomunicação, o banco de dados e as aplicações tecnológicas que possibilitam atingir o tratamento de dados de entrada e saída, fazem parte da ciência da computação
a ciência da computação também abrange as técnicas de modelagem de dados e os protocolos de comunicação
a ciência da computação aborda princípios que abrangem outras especializações da área
enquanto ciência, classifica-se como ciência exata,tudo que representar problemas decidíveis, ie, os que são susceptíveis de redução a operações elementares básicas, capazes de serem reproduzidas
um dos dispositivos da ciência é o computador digital, de uso generalizado, nos dias de hoje
também de fundamental importância para a área de ciência da computação são as metodologias e técnicas ligadas à implementação de software que abordam a especificação, modelagem, codificação, teste e avaliação de sistemas
os estudos oriundos da ciência da computação podem ser aplicados em qualquer área do conhecimento humano em que seja possível definir métodos de resolução de problemas baseados em repetições previamente observadas
avanços recentes na ciência da computação têm impactado fortemente a sociedade contemporânea, em particular as aplicações relacionadas às áreas de redes de computadores, internet, web e computação móvel
avançoes da ciência da computação têm sido utilizadas por bilhões de pessoas ao redor do globo
a primeira ferramenta conhecida para a computação foi o ábaco
a invenção do ábaco é atribuída a habitantes da mesopotâmia
o ábaco foi criado em torno de dois mil antes de cristo
o uso original do ábaco era desenhar linhas na areia com rochas
versões mais modernas do ábaco ainda são usadas como instrumento de cálculo
no século sete antes de cristo, na antiga índia, o gramático panini formulou a gramática de sanscrito usando três mil regras conhecidas como ashtadhyayi, de forma bastante sistemática e técnica
panini usou transformações e recursividade com tamanha sofisticação que sua gramática possuía o poder computacional teórico tal qual a máquina de turing
entre duzentos antes de cristo, os indianos também inventaram o logaritmo
apartir do século oito tabelas logarítmicas eram produzidas por matemáticos islâmicos
quando john napier descobriu os logaritmos para uso computacional no século dezesseis, seguiu-se um período de considerável progresso na construção de ferramentas de cálculo
no século sete, o matemático indiano brahmagupta explicou pela primeira vez o sistema de numeração hindu arábico e o uso do zero
aproximadamente em oitocentos e vinte e cinco, o matemático persa al khwarizmi escreveu o livro calculando com numerais hindus
o livro de numerais hindus foi responsável pela difusão do sistema de numeração hindu arábico no oriente médio, e posteriormente na europa
por volta do século doze houve uma tradução do livro de numerais hindus para o latim
livros de numerais hindus apresentaram novos conceitos para definir sequências de passos para completar tarefas, como aplicações de aritmética 
por derivação do nome do matemático brahmagupta, atualmente usa se o termo algoritmo
por volta do século três antes de cristo, o matemático indiano pingala inventou o sistema de numeração binário
o sistema de numeração binária ainda usado atualmente no processamento de todos computadores modernos
o sistema de numeração binária estabelece que sequências específicas de uns e zeros podem representar qualquer informação
em mil setecentos e três gottfried leibniz desenvolveu a lógica em um sentido formal e matemático, utilizando o sistema binário 
no sistema de leibniz, uns e zeros também representam conceitos como verdadeiro e falso, ligado e desligado, válido e inválido
mais de um século depois de leibniz desenvolver a lógica matemática, george boole publicou a álgebra booleana
a algebra booleana era um sistema completo que permitia a construção de modelos matemáticos para o processamento computacional
em mil oitocentos, apareceu o tear controlado por cartão perfurado
o cartão perfurado foi invenção de joseph marie jacquard, no qual buracos indicavam os uns e, áreas não furadas, indicavam os zeros
o cartão perfurado era longe de ser um computador, mas ilustrou que as máquinas poderiam ser controladas pelo sistema binário
foi com charles babbage que o computador moderno começou a ganhar forma, através de seu trabalho no engenho analítico
o equipamento descrito originalmente no século dezoito, mais de um século antes de seu sucessor, nunca foi construído com sucesso, mas possuía todas as funções de um computador moderno
o dispositivo de babbage se diferenciava por ser programável, algo imprescindível para qualquer computador moderno
durante sua colaboração, a matemática ada lovelace publicou os primeiros programas de computador em uma série de notas para o engenho analítico
análise de sistemas é a atividade que tem como finalidade a realização de estudos de processos a fim de encontrar o melhor caminho racional para que a informação possa ser processada
os analistas de sistemas estudam os diversos sistemas existentes entre hardwares, softwares e o usuário final
os seus comportamentos e aplicações são desenvolvidos a partir de soluções que serão padronizadas e transcritas da forma que o computador possa executar
os profissionais da área de desenvolvimento geram softwares, que são executados em hardwares operados por usuários, preparados e treinados em procedimentos operacionais padronizados
a análise de sistemas é uma profissão cujas responsabilidades concentram se na análise do sistema e na administração de sistemas computacionais 
cabe ao desenvolvedor parte da organização, implantação e manutenção de aplicativos e redes de computadores
o analista de sistemas é o responsável pelo levantamento de informações sobre uma empresa a fim de utilizá las no desenvolvimento de um sistema para a mesma
o profissional de desenvolvimento geralmente possui conhecimento adquirido em faculdades de sistemas de informação, sistemas para internet, ciência da computação, análise de sistemas, engenharia de computação
a ausência de restrições para um analista permite a profissionais capacitados de outras áreas ou mesmo que não possuem educação superior cumprirem este papel nas empresas
como é uma ênfase, o foco e o núcleo de trabalho de um analista está voltado para o processo de desenvolvimento de software, levando em conta a área tecnológica em que irá auxiliar
o analista de sistemas deve servir como um tradutor entre as necessidades do usuário e o programa a ser desenvolvido pelo programador
o analista deve ter conhecimento abrangente da área de negócio na qual o sistema será desenvolvido
o analista é responsável por implementar corretamente as regras de negócio
o tecnólogo em análise e desenvolvimento de sistemas é um profissional de nível superior formado em um curso superior de tecnologia
análise e desenvolvimento visa formar profissionais para atender campos específicos do mercado de trabalho 
análise e desenvolvimento é um curso mais compacto, com duração média menor que a dos cursos de graduação tradicionais 
os tecnólogos podem dar continuidade ao seus estudos cursando a pós graduação stricto sensu mestrado e doutorado e lato sensu especialização
a designação atual da profissão de análise e desenvolvimento foi estabelecida pelo decreto dois mil e duzento de dezessete de abril de mil novecentos e noventa e sete
no brasil, o conselho regional de administração , emitee a carteira profissional dos analistas de sistemas que tenham concluído o curso
o analista de sistemas tem a responsabilidade de construir algoritmos com padrões de qualidade e implementá los em linguagens de programação
o analista de sistemas tem a responsabilidade de compreender os fundamentos da programação procedural e orientada a objetos
o analista de sistemas tem a responsabilidade de utilizar a linguagem sql na construção e acesso a banco de dados de sistemas de informação
o analista de sistemas tem a responsabilidade de compreender os fundamentos teóricos e práticos de sistemas operacionais 
o analista de sistemas tem a responsabilidade de compreender os modelos de estrutura organizacional e funções empresariais
o analista de sistemas tem a responsabilidade de reconhecer a importância dos sistemas de informação se estabelecerem de maneira competitiva
o analista de sistemas tem a responsabilidade de reconhecer os benefícios e impactos das tecnologias de informação para a sociedade
um software deve atuar de maneira ética e socialmente responsável
o analista de sistemas tem a responsabilidade de compreender as características dos sistemas de informação operacionais
o analista de sistemas tem a responsabilidade de analisar, projetar, implementar e validar sistemas de informações para as organizações
o analista de sistemas tem a responsabilidade de compreender os fundamentos do desenvolvimento orientado a objetos
o analista de sistemas tem a responsabilidade de modelar sistemas de informação utilizando a uml
o analista de sistemas tem a responsabilidade de projetar e implementar bancos de dados para sistemas de informação
o analista de sistemas tem a responsabilidade de analisar, projetar e avaliar a usabilidade de sistemas de informação
o analista de sistemas tem a responsabilidade de compreender os fundamentos da inteligência artificial
o desenvolvedor tem a responsabilidade de realizar aplicações em sistemas de informação
o analista de sistemas tem a responsabilidade de compreender os fundamentos teóricos
o desenvolvedor tem a responsabilidade de realizar práticos de redes de computadores e de sistemas distribuídos
o analista de sistemas tem a responsabilidade de planejar e especificar a infra estrutura tecnológica capaz de suportar os sistemas
o analista de sistemas tem a responsabilidade de diagnosticar e mapear problemas e pontos de melhoria nas organizações
o analista também deve ir propondo alternativas de soluções baseadas em sistemas de informações
o analista de sistemas tem a responsabilidade de auxiliar os profissionais das outras áreas a compreenderem os sistemas de informação
o analista de sistemas tem a responsabilidade de planejar e gerenciar projetos de desenvolvimento de sistemas de informação
o analista de sistemas tem a responsabilidade de aplicar as recomendações de qualidade e de segurança em sistemas de informação
o analista de sistemas tem a responsabilidade de compreender, representar e manipular dados utilizando xml
o analista de sistemas tem a responsabilidade de liderar e participar de grupos de desenvolvimento de sistemas de informação
o analista de sistemas tem a responsabilidade de identificar oportunidades de negócio
o analista também deve criar e gerenciar empreendimentos relacionados a sistemas de informação e tecnologia da informação
o analista de sistemas tem a responsabilidade de capacidade de criar testes após desenvolver o sistema
o analista levanta uma necessidade específica do cliente
os levantamentos são feitos com base nas informações colhidas se desenvolver este programa específico
a aprendizagem da programação tem enfrentado vários desafios
por ser de difícil aprendizagem, vários estudos propõe soluções para ajudar no processo de aprendizagem da programação
a dificuldade de programar existe no nível do ensino secundário e universitário por diversas razões
um das soluções para a dificuldade de aprendizagem de programação, destaca se os sistemas de apoio
o sistema de apoio permite que os estudantes visualizem de imediato o resultado do código que vão escrevendo
outros estudos também sugerem o uso de artefatos como a robótica para que os alunos interajam com algo tangível como o robot
a interação durante o aprendizando da programção melhora a interação e motivação ao mesmo tempo
foram realizados estudos que provam que o uso da gamificação em contextos de aprendizagem da programação, produziu resultados com sucesso
a gamificação aumenta o nível de interação dos alunos, bem como a motivação para continuar a aprender
software, é um termo técnico que é uma sequência de instruções a serem seguidas e ou executadas
o software manipula, redireciona ou modifica um dado ou acontecimento
software também é o nome dado ao comportamento exibido por uma sequência de instruções quando executada em um computador ou máquina 
o software não só incluí o programa de computador propriamente dito, mas também manuais e especificações
para fins contábeis e financeiros, o software é considerado um bem de capital
um software normalmente é composto por diversas funções, bibliotecas e módulos que gera um programa executável ao final
o processo de desenvolvimento de software, quando executado, recebe algum tipo de entrada de dados e processa as informações
o software executa segundo uma série de algoritmos ou sequências de instruções lógicas e libera uma saída
como resultado do software, ele retorna um output
um software bem desenvolvido é normalmente criado pela área engenharia de software
um sofware inclui não apenas o programa de computador em si, mas também manuais, especificações e configurações
um software passa por várias etapas como análise econômica, análise de requisitos, especificação, codificação, teste, documentação 
o processo de desenvolver um software também inclui treinamento, manutenção e implantação nos ambientes
um programa de computador é composto por uma sequência de instruções
as instruções de um programa é interpretada e executada por um processador ou por uma máquina virtual
em um programa correto e funcional, as instruções seguem padrões específicos que resultam em um comportamento desejado
o termo software foi criado na década de quarenta, e é um trocadilho com o termo hardware
hardware, em inglês, significa ferramenta física 
software seria tudo o que faz o computador funcionar excetuando se a parte física dele
um programa pode ser executado por qualquer dispositivo capaz de interpretar e executar as instruções de que é formado
se um software está representado instruções que podem ser executadas diretamente por um processador,ele está escrito em linguagem de máquina 
a execução de um software também pode ser intermediada por um programa interpretador
o interpretador é responsável por interpretar e executar cada uma de suas instruções
uma categoria especial e o notável de interpretadores são as máquinas virtuais
exemplos de máquinas virtuais jvm
máquinas virtuais simulam um computador inteiro, real ou imaginado
o dispositivo mais conhecido que dispõe de um processador é o computador
atualmente, com o barateamento dos microprocessadores, existem outras máquinas programáveis, como telefone celular e máquinas de automação
um programa é um conjunto de instruções para o processador
pode se utilizar linguagens de programação, que traduza comandos em instruções para o processador
normalmente, programas de computador são escritos em linguagens de programação
linguagens de programação foram projetadas para aproximar se das linguagens usadas por seres humanos 
raramente a linguagem de máquina é usada para desenvolver um programa
atualmente existe uma quantidade muito grande de linguagens de programação
alguns programas para usos específicos, como por exemplo software embarcado ou software embutido, ainda são feitos em linguagem de máquina
linguagem de máquina aumenta a velocidade ou diminui o espaço consumido
a melhoria dos processadores dedicados também vem diminuindo essa prática, sendo a c uma linguagem típica para esse tipo de projeto
muito raramente,é utilizado o código de máquina, a representação numérica utilizada diretamente pelo processador
o programa é, inicialmente, carregado na memória principal
após carregar o programa, o computador encontra o entry point do programa que carregou e lê as instruções sucessivamente byte por byte
entry point é o ponto aonde o programa se inicia
as instruções do programa são passadas para o sistema ou processador onde são traduzidas da linguagens de programação
instruções são executadas diretamente para o hardware, que recebe as instruções na forma de linguagem de máquina
qualquer computador moderno tem uma variedade de programas que fazem diversas tarefas
um software é um sistema que incluiu o firmware e tipicamente uma interface gráfica que, permitem ao usuário interagir com o computador
o software também permite que o usuário interaja com seus periféricos computacionais
software aplicativo, permite ao usuário fazer uma ou mais tarefas específicas 
aplicativos podem ter uma abrangência de uso de larga escala, muitas vezes em âmbito mundial
aplicativos mundiais, tendem a ser mais robustos e mais padronizados 
programas escritos para um pequeno mercado têm um nível de padronização menor
software embutido indica que o software é destinado a funcionar dentro de uma máquina que não é um computador de uso geral
software aplicativo é aquele que permite aos usuários executar uma ou mais tarefas específicas
software aplicativo pode ser automatizado no computador, especialmente no campo dos negócios
software como serviço, é um tipo de software armazenado num computador que se acessa pela internet
não é necessário instalár um software como serviço no computador do usuário
geralmente software como serviço é gratuito e tem as mesmas funcionalidades das versões armazenadas localmente
o software como serviço surgiu apenas em anos recentes
software de sistema tem como objetivo separar usuário e programador de detalhes do computador específico que está sendo usado
o software do sistema lhe dá ao usuário interfaces de alto nível e ferramentas que permitem a manutenção do sistema
software de programação é o conjunto de ferramentas que permitem ao programador desenvolver programas de computador
o software de programação permite a utilização de diferentes alternativas e linguagens de programação, de forma prática
alguns exemplos de software de programação incluem editores de texto, compiladores, intérpretes e depuradores
ambientes de desenvolvimento integrado são agrupamento de ferramentas, geralmente em um ambiente visual
i d e s permitem que o programador não precisa digitar vários comandos para a compilação, interpretação, depuração, etc
geralmente i d e s são equipadas com uma interface de usuário gráfica avançada
a maioria de softwares são publicados sob uma licença de software
licença de software define e até restringe qual a forma que se pode utilizar o software definido números de licenças
exemplos de licenças são gnu general public license, licença bsd, licença apache, licença comercial e licença de software livre
vetores e matrizes são variáveis compostas homogêneas
matrizes e vetores são agrupamentos de dados que individualmente ocupam o mesmo tamanho na memória e são referenciados pelo mesmo nome
geralmente matrizes e vetores são individualizados usando se índices
vetores distinguem se das matrizes apenas pela característica de ter dimensão um x n ou n x um
essencialmente vetores são matrizes linha ou matrizes coluna
em linguagem c vetores e matrizes são usados abundantemente para compor estruturas de dados necessárias para composição de diversos recursos
em c são usados vetores de caracteres para definir cadeias de texto, o que é conhecido como o mais trivial uso de vetores
o c também define meio de criação de matrizes tipo n x m
matrizes formam os recursos necessários para criação destes conjuntos de dados n x m
a linguagem c mais mais suporta os mesmos recursos e permite a criação de matrizes de objetos
um objeto é essencialmente um tipo de dado criado pelo programador
todas as características básicas legadas aos tipos em geral são observados nos tipos criados
uma matriz é um conjunto de vetores que ocupam uma determinada área de memória referenciada por um nome comum
matrizes de tipos primitivos são conseguidas através de associações do operador colchetes
matrizes permitem declarar muitas variáveis de uma forma bem simples, poupa escrita e é bastante compreensível
algoritmo de ordenação em ciência da computação é um algoritmo que coloca os elementos de uma dada sequência em uma certa ordem
algoritmo de ordenação efetua sua ordenação completa ou parcial 
as ordens mais usadas para algoritmos de ordenação são a numérica e a lexicográfica
em matemática, uma ordem lexicográfica, é uma estrutura de ordem natural do produto cartesiano de dois conjuntos ordenados
a ordem lexicográfica sobre o produto cartesiano a vezes b é definida como menor ou igual se e somente se a menor que a
existem várias razões para se ordenar uma sequência, uma delas é a possibilidade se acessar seus dados de modo mais eficiente
métodos simples de se organizar um algoritmo são, insertion sort, selection sort, bubble sort, comb sort, métodos sofisticados, merge sort, heapsort e shell sort
métodos de pesquisa de um algoritmo de ordenação, pesquisa binária, busca linear, bogobusca
insertion sort, ou ordenação por inserção, é o algoritmo de ordenação que, dado uma estrutura constrói uma matriz final com um elemento de cada vez, uma inserção por vez
o bubble sort, é um algoritmo de ordenação dos mais simples
a ideia do bubble sort é percorrer o vector diversas vezes, e a cada passagem fazer flutuar para o topo o maior elemento da sequência
bubble sort também é conhecido por ordenação por flutuação
o algoritmo comb sort é um algoritmo de ordenação relativamente simples, e faz parte da família de algoritmos de ordenação por troca 
o algoritmo comb sort foi desenvolvido em mil novecentos e oitenta por wlodzimierz dobosiewicz
comb sort foi redescoberto e popularizado por stephen lacey e richard box em um artigo publicado na revista byte em abril de mil nocentos e noventa e um
o comb sort melhora o bubble sort, e rivaliza com algoritmos como o quicksort
a ideia básica do comb sort é eliminar as tartarugas ou pequenos valores próximos do final da lista
em um bubble sort os valores no final da lista retardam a classificação tremendamente
o comb sort repetidamente reordena diferentes pares de itens, separados por um salto, que é calculado a cada passagem
comb sort é semelhante ao bubble sort, porém mais eficiente
na bubble sort, quando quaisquer dois elementos são comparados, eles sempre têm um gap de um
a ideia básica do comb sort é que a diferença pode ser muito mais do que um
o shell sort também é baseado na ideia do comb sort, mas é uma modificação do insertion sort em vez do bubble sort
o selection sort é baseado em se passar sempre o menor valor do vetor para a primeira posição
o selection sort também pode ordenar pelo maior dependendo da ordem requerida
o selection sort funciona do segundo menor valor para a segunda posição e assim sucessivamente, até os últimos dois elementos
no selection sort é escolhido um número a partir do primeiro, e este número escolhido é comparado com os números a partir da sua direita
quando encontrado um número menor o selection sort faz com que o número escolhido ocupa a posição do menor número
um asserto é uma estrutura de seleção usada em programação que indica que o desenvolvedor asserta que a condição dada é sempre verdadeira
um asserto é estrutura usada para auxiliar a especificação de programas, e para indicar pré requisitos de blocos de códigos
uma pré condição é um asserto adicionado no início de um bloco de código, e determina o conjunto de estados em que o código é esperado ser executado
uma pós condição é um asserto adicionado no final de um bloco de código, determinando o conjunto de estados em que o código é esperado após ser executado
no uso prático, diversas linguagens de programação modernas oferecem o asserto, que é verificado em tempo de execução
caso uma condição seja falsa, a execução é abortada do algoritmo é terminada, facilitando a depuração de um sistema
em ciência da computação, estrutura de controle refere se à ordem em que instruções, expressões e chamadas de função são executadas ou avaliadas em programas de computador sob programação imperativa ou funcional
os tipos de estruturas de controle disponíveis diferem de linguagem para linguagem
estruturas de controle podem ser cruamente caracterizados por seus efeitos
o primeiro efeito de uma estrutura de controle é a continuação da execução em uma outra instrução, como na estrutura sequencial ou em uma instrução jump
o segundo efeito de uma estrutura de controle é a execução de um bloco de código somente se uma condição é verdadeira, uma estrutura de seleção
o terceiro efeito de uma estrutura de controle é a execução de um bloco de código enquanto uma condição é verdadeira, ou de forma a iterar uma coleção de dados, uma estrutura de repetição
o quarto efeito de uma estrutura de controle é a execução de instruções distantes entre si, em que o controle de fluxo possivelmente volte para a posição original posteriormente, como chamadas de subrotinas e corotinas 
o quinto efeito de uma estrutura de controle é a parada do programa de computador
interrupções e sinais são mecanismos de baixo nível que podem alterar o fluxo de controle de forma similar a uma sub rotina, mas geralmente em resposta a algum estímulo externo ou um evento
em nível de linguagem de máquina, as instruções de estruturas de controle geralmente funcionam ao alterar o contador de programa
para algumas cpus, as únicas instruções de estruturas de controle disponíveis são os diversos tipos de jump condicional
a terminologia de sub rotina varia, pois ela pode ser conhecida como rotina, procedimento, função ou método
durante a década de cinquenta, a memória disponível em computadores era pequena, e as sub rotinas reduziam o tamanho dos programas ao resumir aguma rotina que poderia ser usada em diversas partes do código
atualmente sub-rotinas são usadas para ajudar na estruturação dos programas, isolando algoritmos ou ainda encapsulando algum método
algumas linguagens de programação especificam ainda uma palavra reservada para sair da estrutura de repetição de dentro do bloco de código
é possível quebrar a estrutura de repetição
também é oferecido por algumas linguagens uma palavra reservada para terminar uma iteração específica do bloco de código, forçando nova verificação da condição
uma estrutura sequencial realiza um conjunto predeterminado de comandos de forma sequencial, na ordem em que foram declarados no código fonte 
a cada instrução de uma estrutura sequencial, o contador de programa é incrementado
o comando goto é uma estrutura de controle para salto de instruções
a sintaxe do goto é, em geral goto destino , onde destino pode ser um label ou um número, que representa um determinado endereço
no goto instruções passam a ser executadas no endereço apontado por destino
algoritmo é a palavra tecnológica da moda
os algoritmos fazem isto e aquilo
vão tomar nossos trabalhos
é apenas uma série de instruções simples
realizadas para resolver um problema.
conjunto de regras
aplicadas sistematicamente a alguns dados de entrada apropriados
resolvem um problema em um número finito de passos elementares
é importante notar que o algoritmo tem de ser finito
executa instruções de forma sistemática
um algoritmo poderia ser uma receita de cozinha
instruções para fabricar um avião de papel a partir de uma folha.
os algoritmos têm uma entrada imput euma saída output
entre ambas estão as instruções a entrada poderia ser a carne moída, o tomate, as folhas de massa e a saída seria a lasanha perfeitamente  
algoritmos mais  computadores  igual a  revolução
porque embora os algoritmos existam pelo menos desde o tempo dos babilônios
com a chegada dos computadores eles ganharam muito mais destaque
a união de máquinas e algoritmos é o que está mudando o mundo
o matemático britânico alan turing
foi um dos primeiros a relacionar algoritmo e computadores
inclusive chegou a pensar que as máquinas poderiam pensar e até escrever poemas de amor
a máquina de turing não é uma máquina que existe no mundo físico
consiste em uma faixa infinita sobre a qual vão sendo feitas operações repetitivas até oferecer soluções
vem a ser uma definição informática do algoritmo e de um computador
em essência, é o precursor dos computadores tem memória
operações elementares
uma entrada e uma saída
o mais interessante é que é uma máquina universal, que pode executar qualquer programa que lhe for solicitado
dentro dos problemas do mundo existem dois tipos aqueles que podem ser resolvidos por uma máquina de turing
chamados computáveis e aqueles que não podem os não computáveis
assim como vemos no mundo real tarefas que as máquinas podem executar
todos os computadores, tablets, smartphones,que conhecemos são máquinas de turing
em suma, o trabalho dos programadores de computador consiste em traduzir os problemas do mundo para uma linguagem
que uma máquina possa entender, diz pena.
em algoritmos que a máquina manipule
para isso é necessário destrinchar a realidade em pequenos problemas em sucessão
pôr o computador a tarefa
um programa de computador é um algoritmo
escrito em uma linguagem de programação
se torna milhares de operações simples que são realizadas com correntes elétricas no processador
correntes representadas pelos famosos uns e zeros
os dígitos que caracterizam o digital
a máquina está realizando numerosas operações com pequenas correntes elétricas
a chave é que são muitas operações ao mesmo tempo
um computador de quatro ghz pode fazer quatro bilhões de operações em apenas um segundo.
em essência, isso são os algoritmos e isso é informática.
na verdade, o que é exatamente um algoritmo
meus problemas com os algoritmos
apesar da longevidade dos algoritmos e da maturidade dos computadores
a palavra algoritmo entrou na moda nos últimos anos
os computadores podem calcular muito mais rápido do que um cérebro humano
desde o surgimento da internet há um salto e estamos chegando a coisas que pareciam impossíveis
em disciplinas em plena ebulição, como o big data e a inteligência artificial.
os algoritmos são usados para prever resultados eleitorais
conhecer os nossos gostos e o mundo do trabalho está se algoritmizando
as diferentes tarefas se tornam algoritmos
o trabalho está sendo automatizado
as únicas tarefas não algoritmizáveis, no momento, são aquelas relacionadas à criatividade
a revolução tecnológica criará novos empregos
nunca serão tantos quanto os empregos destruídos e que se concentram em pessoas e países com preparação suficiente.
é por isso que uma ideia que parecia própria à esquerda
um dos exemplos mais marcantes de como os algoritmos podem operar sem a supervisão humana é o chamado flash crack
os algoritmos trabalham realizando transações em velocidades inimagináveis para um cérebro humano,
em questão de microssegundos, para conseguir a máxima rentabilidade.
é o high frequency trading. 
a interação das operações dos algoritmos produziu uma queda de mil pontos,
casos como esses ocorrem quando os algoritmos começam a competir e ninguém tem a imagem do processo completo,
por isso os algoritmos devem operar sob supervisão humana
existem algoritmos que já fazem parte de conselhos de empresas.
os algoritmos contribuíram para a evolução tecnológica
os algoritmos datam de tempos babilônicos
alguns exemplos de algoritmos que podemos citar são receitas culinárias, manual de instrução de aparelhos,
funções matemáticas e até mesmo páginas da web
dados de entrada
passo a passo para realizar a receita 
processamento ou instruções lógicas
atinge um resultado
informações mediadas pelas instruções.
uma sequência de instruções simples
pode se tornar mais complexa conforme a necessidade de considerar outras situações
o algoritmo vai crescendo e ficando mais complexo para englobar todos os cenários possíveis
quando um programa de computador trava, por exemplo, é porque ele está recebendo informações que não foi programado para processar
a estrutura siga uma lógica sistemática
com o código, é a mesma coisa, sendo necessário ler linha por linha para que ele atinja o objetivo final.
variáveis são as informações de entrada inseridas que determinam aonde o algoritmo poderá ir.
as mais comuns são texto, inteiro, lógico e real
comandos de repetição consiste no uso de se e enquanto,
para que o algoritmo saiba o que fazer quando determinados processos ocorrerem e o que fazer se eles mudarem.
o algoritmo fica mais completo e capaz de englobar múltiplas situações para permitir que o resultado final seja alcançado.
por meio de comandos, ele permite que a mais b mais c resulte em d, é preciso conhecer os benefícios proporcionados pela adoção do modelo.
diversas polêmicas estão relacionadas a como as grandes empresas de tecnologia têm usado os algoritmos para impactar a vida das pessoas.
um dos casos mais famosos é o algoritmo do facebook
o algoritmo pode ser alterado para determinados fins
o recurso proporciona uma mediação mais neutra sobre o que é exibido para cada usuário.
assuntos mais comentados tendem a aparecer para mais pessoas
o algoritmo busca fazer essa mediação mais equilibrada entre tudo que está disponível online e filtrar o que é mais relevante de ser exibido.
automação
os programas são compostos por sequências de algoritmos.
sistematização que viabiliza todo tipo de softwares
facilitam a vida e também permitem a automação dos processos
os processos são aprendidos pelas máquinas e reproduzidos
um algoritmo complexo que faz a entrada e o processamento dos dados
em que a saída torna-se a entrada de uma estrutura 
fornecendo lógica e capacidade de aprendizado aos softwares.
evolução
a evolução humana nas últimas décadas está totalmente atrelada à ideia de algoritmos
aparelhos como smartphones, computadores, smart tvs e tablets funcionam com sistemas baseados em algoritmos.
conforme novos comandos e possibilidades de uso surgem
mais aprimorados e complexos estão os níveis de instrução de um algoritmo.
assim como a tecnologia em si, as aplicações estão difundidas em diferentes áreas, como marketing, vendas, relacionamento
o algoritmo faz a recomendações de investimentos após a análise de grandes quantidades de dados e testes clínicos.
é preciso estar atento ao uso dos algoritmos, principalmente, quando não supervisionados.
os algoritmos usam variáveis e um processo para alcançar um objetivo. 
é como quando uma pessoa quer fazer um bolo e leva em conta a receita e as experiências que já teve ao preparar o doce.
decisões são tomadas de forma automática por meio de software.
quando você faz uma pesquisa há um robô que, de maneira automática, detecta quais são os resultados de páginas
como todo algoritmo é uma máquina, é preciso realizar testes. 
um algoritmo é um esquema de resolução de um problema. 
pode ser implementado com qualquer sequência 
valores ou objetos que tenham uma lógica infinita 
qualquer coisa que possa fornecer uma sequência lógica. 
então um programa de computador já é por si um algoritmo
para escrever um programa com lógica, o próprio programa que provém desse algoritmo já é um algoritmo.
até um esquema mental é um algoritmo.
interessa ao estudo da programação
com isto não esquecemos a lógica que queremos dar ao programa e será menos comum o aparecimento de erros.
uma máquina computacional é qualquer máquina
geralmente de origem eletro-eletrônica com capacidade de receber dados
executar operações sobre estes dados e retornar os dados transformados por estas operações.
as máquinas computacionais eletro-eletrônicas possuem geralmente dois componentes básicos software e hardware.
chamamos de hardware sua parte física,
software os programas que tratam os dados imputados.
quando inserimos algum dado em um computador, os dados inseridos são transformados em sinais elétricos
o bit do inglês binary digit representa os dois estados ligado ou desligado que o sinal elétrico pode assumir.
para trabalhar com estes dados, podemos associar estes estados de ligado e desligado a zero e um. quando utilizamos um computador,
há um fluxo de sinais elétricos, que representam os dados inseridos, processados e retornados. 
um conjunto de oito bits formam um byte, que é uma unidade completa de informação.
dentro do byte, o estado de cada um dos oito bits, assim como sua posição relativa um ao outro, faz com que o byte assuma um valor específico 
serve para estruturá-lo em relação a outros bytes e criar um sistema de dados que sirva ao usuário externo.
logicamente torna-se trabalhoso trabalhar com dados de computador bit-a-bit.
como forma de manipular este fluxo de estados elétricos e estruturá-lo de forma a permitir operações mais simplificadas
otimizadas sobre os bytes, surgiu o conceito de programação.
as linguagens de programação são geralmente em dois níveis
linguagens de baixo nível são linguagens de programação que tratam a informação na linguagem de máquina.
linguagens de alto nível são linguagens de programação modeladas quase como a linguagem comum humana
quando compiladas são convertidas para linguagem de máquina. 
cada linguagem deste tipo possui uma sintaxe própria
deve ser respeitada e aprendida para que possa ser corretamente processada por seu compilador.
compilador é um programa que permite que determinada programação em uma linguagem específica seja adaptada para linguagem de máquina.
no entanto, não é necessário que o programador aprenda todas as diversas linguagens disponíveis no mercado.
cada linguagem é recomendada para determinadas aplicações
assim como possuem suas sintaxes próprias, mas todas são estruturadas logicamente.
com o aprendizado da lógica de programação o aluno entenderá os conceitos básicos da programação
poderá com menor ou maior dificuldade, dependendo da linguagem escolhida, aprender a linguagem que quiser.
as linguagens de programação tratam os dados de um computador através do uso de algoritmos.
um algoritmo é uma estruturação passo-a-passo de como um determinado problema deve ser resolvido de forma não-ambígua
como muitos comparam "uma receita de bolo.
para realizar esta estruturação é necessário o uso de ferramentas e operações oriundas da lógica
principalmente da lógica matemática.
antes de estruturar-se de forma lógica para programação, devemos saber qual o tipo de problema proposto
as informações que serão imputadas e os passos a serem efetuados para atingir-se um fim específico.
um algoritmo é um conjunto finito de diretrizes que descrevem como executar uma tarefa
algo tão inócuo quanto uma receita ou uma lista de direções para a casa de um amigo pode ser entendido como um algoritmo.
um algoritmo é uma seqüência de instruções dizendo a um computador o que fazer.
um código ou alguma coisa assim norteando o que acontece na internet deixa de ser tão vaga quando se começa a entender o papel do algoritmo. 
processar repetidamente um conjunto estável de instruções, os sistemas baseados em aprendizado de máquina se reescrevem enquanto trabalham.
eles são usados hoje em dia para uma infinidade de finalidades
a automação da negociação no mercado de ações ou a veiculação de anúncios para visitantes do site
uma das primeiras aplicações dessa tecnologia foi a chamada visão de máquina,
os computadores tentam identificar os vários elementos de uma imagem.
é o tipo de sistema que pode dizer ou reivindicar o quão quente você fica em uma foto ou identificar
alguns algoritmos pode ser sua capacidade de decidir o que vemos e como o vemos.
as operações algorítmicas informam tanto o sentido do que você pediu quanto a informação que elas fornece em resposta.
o aprendizado de máquina também ajuda o maps a determinar a melhor rota de um local para outro.
e há um conjunto virtualmente ilimitado de outras funções que os algoritmos podem atender
algumas das primeiras aplicações comerciais de algoritmos envolveram tarefas de automação
gerenciamento de folha de pagamento
aumento do aprendizado de máquina contemporâneo
elas são usadas para tarefas muito mais sofisticadas.
as operações algorítmicas informam tanto o sentido do que você pediu quanto a informação que elas fornece em resposta.
quando se trata de computadores, a definição de algoritmo é quase a mesma como uma série de passos para que um programa realize uma ação. para que isso ocorra corretamente, há algumas regras básicas.
a ação precisa ter início e fim.
todos os passos e comandos devem estar descritos de maneira clara e objetiva
o computador não pensa sobre a ação. ele somente segue os passos.
o fluxograma é uma representação bem prática para entendermos o conceito de algoritmo na computação.
o algoritmo nada mais é do que uma receita um passo a passo dos procedimentos que levam até a resolução de uma tarefa
em termos técnicos, é uma sequência lógica, finita e definida de instruções que devem ser seguidas para resolver um problema
executar uma tarefa.
como procedimento computacional, o primeiro passo para escrever um algoritmo é entender que ele recebe um ou mais valores de entrada
produz um ou mais valores de saída.
o algoritmo será aquela fórmula matemática,
o pedaço de código que fica no meio entre a entrada e a saída e que faz o primeiro se transformar no segundo.
os dois tipos mais comuns de escrita de algoritmos são o pseudocódigo
escrito de uma forma mais estruturada, semelhante a linguagem de programação, ou os fluxogramas que empregam figuras geométricas
o aparecimento da automação substituiu a mão de obra humana por máquinas
e parte do seu labor intelectual para os computadores.
a tecnologia informática transformou em bits as gestões de negócios
o mundo tornou-se virtual.
a possibilidade de programação lógica e a precisão e rapidez de processamento deram à computação um status de poder intelectivo
programar significa aplicar lógica e algoritmos para solucionar problemas reais do nosso dia-a-dia.
a primeira parte de um algoritmo é saber com que tipo de dados que o algoritmo está lidando. 
uma forma de construir esse algoritmo seria tendo um contador que inicie em zero e vá aumentando a cada letra que for adicionada.
um exemplo seria contar todas as letras e palavras apenas após todas elas terem sido inseridas.
muita gente acredita que não pode ser programador, pois não domina a matemática.
é possível aprender algoritmos e lógica de programação mesmo sem ser um craque nas exatas.
uma boa forma de entender melhor o que é lógica de programação e de saber exemplos de como ela se aplica em nosso dia-a-dia,
quando falamos de lógica de programação e algoritmos, existem alguns padrões que são necessários para se ter uma melhor compreensão
apenas texto pode ser aceito no campo de nome, como letras e palavras.
inteiros são aqueles números sem vírgula, ou seja, a idade do sujeito é um exemplo perfeito.
sobre o trabalho da pessoa, ela pode responder apenas sim ou não, sendo assim, trata-se de uma variável que armazena verdadeiro” oufalso também conhecida como booleana.
na hora de executar o código, ele vai ler linha por linha assim como nós lemos, uma após a outra.
dessa forma, o programa contabilizará cada uma das letras que foi colocada, exibindo um valor final apenas quando não houverem mais letras. 
ilustrar a lógica das estruturas de repetição que existem por trás de praticamente todos os algoritmos.
aprender algoritmos e lógica de programação não é um bicho de sete cabeças.
talvez você possa ter receios de entrar nessa área, mas confie em nós aprender algoritmos é possível sim afinal de contas,
o primeiro passo que você precisa dar para ser um programador ou desenvolvedor de software.
embora as vezes não percebemos, utilizamos algoritmos no nosso dia-a-dia e não sabemos. 
para a execução de alguma tarefa ou mesmo resolver algum problema, muitas vezes inconscientemente executamos algoritmos.
algoritmo é simplesmente uma receita para executarmos uma tarefa ou resolver algum problema.
e como toda receita, um algoritmo também deve ser finito. se seguirmos uma receita de bolo corretamente,
a computação utiliza muito esse recurso, então se você pretende aprender programação, obviamente deve saber o que é algoritmo.
todas as tarefas executadas pelo computador, são baseadas em algoritmos. 
um algoritmo deve também ser bem definido,
é uma máquina que o executará.
uma calculadora por exemplo, para executar a operação de multiplicação, executa um algoritmo que calcula somas até um determinado número de vezes.
utilizando variáveis e controle de fluxo, é muito comum em programação.
se você quer aprender programação, é necessário entendê-lo, se não conseguiu, leia-o novamente com mais atenção.
variável é um espaço alocado na memória para armazenar dados.
o comando ler numero um , significa que o algoritmo está lendo o que o usuário digita e armazenando na variável numero um 
o comando enquanto é uma estrutura de controle de fluxo do tipo estrutura de repetição.
com o tempo, a leitura e criação de algoritmos passa a ser uma coisa muito simples para um programador.
o é preciso bastante prática então, você pode começar fazendo um exercício, crie algoritmos para as suas tarefas do dia-a-dia a partir do momento em que você acorda.
um tipo de dado nada mais que é algo do mundo real que pode ser representado computacionalmente. 
as linguagens de programação implementam formas de representar e manipular esses dados, 
podem ser classificados em dois grandes grupos os tipos de dados primitivos e os tipos de dados não primitivos.
os tipos de dados primitivos são os tipos básicos que devem ser implementados por todas as linguagens de programação,
os números reais, inteiros, booleanos, caracteres e strings.
tipos de dados não primitivos, normalmente são os vetores, matrizes, classes, enumerações que costumam ser estruturas de dados mais complexas do que os tipos de dados primitivos.
um tipo de dado caracteriza um conjunto de valores,
a natureza caracteriza o tipo representado, que pode ser, por exemplo, um caractere, um número inteiro, um número real ou uma cadeia de caracteres.
 o tamanho determina o tamanho a quantidade em bits necessário para armazenar os valores do tipo. 
a representação determina a forma como os bits armazenados devem ser interpretados.
a imagem ou faixa de representação determina a faixa de valores válidos para o tipo.
a expressão usada para identificar um tipo de dado é chamada de especificador de tipo.
algo importante sobre os tipos de dados, e que quase ninguém se dá conta, é que eles devem primeiro ser possíveis de existirem, e de ser manipulados, pelo hardware. 
isso significa que é o hardware quem diz quais os tipos de dados primitivos que podem ser processados por uma máquina computacional. 
a ula é responsável por realizar os cálculos lógicos e aritméticos,
então só é possível realizar adições, subtrações, comparações, multiplicações, entre outras operações matemáticas, em seu software,
existe um hardware que faz isso. se você quiser realizar a soma quinze mais dez, em seu programa, você pode, pois existe um circuito digital, dentro do seu microprocessador, 
a fpu, que trabalha com números de ponto flutuante, que é uma unidade funcional especifica para trabalhar com esse tipo de dado.
para os tipos de dados multimídia, como áudio, vídeo e imagem, também existem outras unidades funcionais para realizar a representação e o processamento desses tipos de dados específicos.
os tipos de dados primitivos que podem ser implementados em uma linguagem de programação quaisquer, 
só são possíveis de existirem pois o hardware o permite.
cada linguagem de programação pode representar e manipular esses tipos de formas diferente,
alguns tipos devem seguir um padrão, para haver menor impacto na compatibilidade. 
java e c costumam seguir os padrões determinados pela ieee, iso/iec, e outros órgãos reguladores.
todos os tipos de dados primitivos devem ser representados de alguma forma em bits,
vocês notarão a palavra unsigned nos slides, que significa sem sinal, e signed, que significa sinal.
um número inteiro normalmente é representado por trinta e dois bits,
para cada número inteiro que você usar em seu programa, trinta e dois bits da sua memória será reservada para esse número. 
hoje consumir memória não é um problema para microprocessadores,
no começo da computação, os programadores tinham que ficar atentos às quantidades de bits consumidas pelos seus tipos de dados,
os dados manipulados por um algoritmo podem possuir natureza distinta, 
podem ser números, letras, frases, etc. dependendo da natureza de um dado,
algumas operações podem ou não fazer sentido quando aplicadas a eles.
para poder distinguir dados de naturezas distintas e saber quais operações podem ser realizadas com eles,
os algoritmos utilizam o conceito de tipo de dados.
o tipo de um dado define o conjunto de valores ao qual o dado pertence, 
conjunto de todas as operações que podem atuar sobre qualquer valor daquele conjunto de valores. 
inteiro consiste dos números inteiros e das operações de adição, subtração, multiplicação, divisão inteira e resto
real consiste dos números reais e das operações de adição, subtração, multiplicação, divisão. 
para evitar ambigüidades na escrita de algoritmos, assumimos que todo número escrito sem a parte fracionária é do tipo inteiro. 
o primeiro é do tipo inteiro e o segundo, do tipo real.
os números inteiros negativos, números reais negativos são representados com o sinal menos na frente do número
caractere consiste de um único símbolo ou de uma concatenação de símbolos do alfabeto
os elementos do conjunto de valores do tipo caractere devem ser escritos, nos algoritmos, entre aspas duplas,
um algoritmo manipula dados,
podem ser dados variáveis ou constantes.
dados variáveis são representados por variáveis, enquanto dados constantes são representados por constantes.
uma variável pode ser imaginada como um caixa para armazenar valores de dados.
o valor armazenado na caixa pode mudar inúmeras vezes durante a execução do algoritmo. 
em um ambiente computacional de verdade, a caixa correspondente a uma variável é uma posição da memória do computador.
uma variável possui nome, tipo e conteúdo. 
o nome de uma variável deve ser único,
identificar, de forma única, a variável no algoritmo.
o tipo de uma variável define os valores que podem ser armazenados na variável.
o conteúdo de uma variável é o valor que ela armazena.
é importante lembrar que uma variável só pode armazenar um valor de cada vez.
variavel pode assumir vários valores distintos do mesmo tipo durante a execução do algoritmo.
o ato de se criar uma variável é conhecido como declaração de variável
é uma instrução de leitura que atribui um valor à variável lado.
o valor atribuído pela instrução deve ser fornecido como entrada para o algoritmo durante a sua execução. 
é uma instrução de atribuição que atribui o valor da variável lado ao quadrado à variável area.
o que vemos no lado direito do operador de atribuição, lado a lado, é um exemplo de expressão aritmética.
um valor atribuído a uma variável permanece associado a ela até que uma instrução de atribuição,
enquanto não atribuirmos um valor a uma variável, a variável permanecerá com valor desconhecido.
é importante lembrar que uma variável só poderá receber uma valor através de uma instrução de leitura ou atribuição.
nomes de variáveis podem ter, no máximo, cento e vinte e sete caracteres
de acordo com a regra , nomes de variáveis não podem conter espaços em branco.
de acordo com a regra , nomes de variáveis não podem ser palavras reservadas da linguagem 
uma palavra reservada é uma palavra que possui um significado especial para a linguagem
uma palavra reservada identifica uma instrução. 
tornando	ao	aspecto	computacional,	os	dados	numéricos	 representáveis	em	 um	computador	são	divididos	em	apenas	duas	classes	os	inteiros	e	os reais
os	números	inteiros	são	aqueles	que	não	possuem	componentes	decimais	ou	fracionários,
os	dados	de	gpo	real	são	aqueles	que	podem	possuir	componentes	decimais	ou	fracionários,
dado literal é constituido por uma	 sequencia	 de	 caracteres	 contendo	letras,	dígitos	e	símbolos	especiais.		
algoritmos são compostos por instruções e dados. 
instruções manipulam os dados para chegar ao resultado desejado.
dados possuem tipos, que determinam o que se pode fazer com eles. 
trabalharemos com os tipos maiscomuns de dados, presentes na grande maioria das linguagens.
é importante reconhecer e diferenciar os diversos tipos de dados pois muitos erros em programação podem vir do uso impróprio de dados de diferentes 
um computador é uma máquina que manipula dados a partir de uma lista de instruções.
os computadores podem ser mecânicos computador analógico ou eletrônicos computadores digitais.
internamente os computadores modernos podem ser caracterizados por três partes distintas,
a ucp ou cpu da sigla em inglês, central processing unit é um conjunto de dispositivos eletrônicos responsável pelas operações de processamento referentes aos cálculos
unidade aritmética e lógica ual responsável por realizar cálculos matemáticos mais complexos de maneira mais rápida.
registradores memória temporária para armazenar dados a serem processados
unidade de controle uc controla o fluxo de dados na ucp
a memória é o dispositivo responsável por armazenar dados.
os vários tipos de memória no computador são classificadas de maneira geral de acordo com a sua capacidade de leitura, escrita e volatilidade. 
ram sigla para memória de acesso aleatório,
uma memória em que se pode ler eescrever, mas cujo conteúdo é perdido uma vez que o computador é desligado.
é a memória principal do computador e a mais usada pelos aplicativos e sistema operacional
os dispositivos de entrada e saída de dados são de suma importância pois qualquer informação que deva entrar ou sair do computador será feita através deles.
dentre os dispositivos de entrada podemos citar teclado, mouse, câmera, digitalizador.
os dispositivos de saída podem ser monitor, impressora, saída de som, por exemplo.
os dispositivos  se comunicam com o computador através de portas específicas de comunicação, como porta paralela, porta serial, porta usb, porta scsi,
o dispositivo de entrada padrão é o teclado, enquanto que a saída padrão é o monitor.
sempre que não for explicitamente especificado, um programatentará ler do teclado e escrever para o monitor
sempre que desenvolvemos um algoritmo estamos estabelecendo um padrão de comportamento que deverá ser seguido para alcançar o resultado de um problema.
para o desenvolvimento de um algoritmo eficiente é necessário obedecermos algumas premissas básicas no momento de sua construção
na parte de entrada, são fornecidas as informações necessárias para que o algoritmo possa ser executado.
informações podem ser fornecidas no momento em que o programa está sendo executado ou podem estar embutidas dentro do mesmo.
na parte do processamento são avaliadas todas as expressões algébricas, relacionais e lógicas, assim como todas as estruturas de controle existentes no algoritmo
na parte de saída, todos os resultados do processamento ou parte deles são enviados para um ou mais dispositivos de saída, como monitor, impressora
os fluxogramas são uma apresentação do algoritmo em formato gráfico.
tomadas de decisões são indicadas por caixas especiais, possibilitando ao fluxo de ações tomar caminhos distintos.
o início e o fim e o algoritmo são marcados com uma figura elíptica;
estruturas de controle condicionais estão em losangos
qualquer tipo de informação que deva ser transferida, processada ou armazenada na forma de uma linguagem. 
a linguagem é imprescindível para o processo de comunicação. 
duas máquinas trocam informação por uma linguagem
um computador armazena suas instruções em código de máquina.
estas diferentes linguagens não podem ser traduzidas diretamente entre sí, pois além de serem representadas de modos diferentes, também referem-se a coisas muito distintas
para que um ser humano possa programar, armazenar e buscar informações num computador, é necessário que saiba instruí-lo na sua linguagem de máquina
uma linguagem de programação que possa ser facilmente traduzida para o computador.
a linguagem natural é a maneira como expressamos nosso raciocínio e trocamos informação. 
como é a expressão da cultura de uma sociedade, desenvolvida através das gerações e em diferentes situações, raramente constitui um sistema de regras rígidas
além da linguagem falada, fazem parte da nossa comunicação gestos e posturas, que não podem ser diretamente adaptados para compreensão de uma máquina.
toda a comunicação eficiente pressupõe um conhecimento prévio comum entre os interlocutores, por exemplo a mesma língua,
um computador não é por si só uma máquina inteligente no sentido que não pode aprender com a própria experiência para melhorar seu comportamento futuro
ao contrário, um computador é somente capaz de realizar estritamente as tarefas que lhe forem delegadas e que façam parte do conjunto daquelas ações que ele pode executar
é necessário compreender que tipo de instruções podem ser executadas pelos computadores para que possamos programá-los
sequência de ações necessárias para resolver um determinado problema o
além do fato de o computador necessitar que lhe instruam com ações bem específicas, estas ações devem ser passadas para o computador numa linguagem que ele possa entendê-las,
chamada linguagem de máquina.
esta linguagem é composta somente por números, representados de forma binária,
sob o ponto de vista do computador, representam as operações e os operandos que serão usados no processamento do programa.
para um ser humano, a linguagem de máquina é dificílima de se compreender.
existe uma linguagem representada por comandos mas que reproduz
as tarefas que serão executadas dentro do computador, a linguagem de montagem 
a linguagem de montagem é difícil de programar
programas feitos para um determinado processador, por conterem instruções específicas deste, não funcionarão em um processador de outro tipo.
para facilitar a tarefa de programar um computador, foram criadas várias linguagens
estas linguagens são um maneira de tentar escrever as tarefas que o computador vai realizar de maneira mais parecida com a linguagem natural.
embora ainda seja muitas vezes complexo em comparação com a linguagem natural, um programa escrito em uma linguagem de programação é muito mais fácil de ser implementado, 
as linguagens de programação são um meio termo entre a linguagem de máquina
são classificadas de acordo com o nível entre a linguagem natural ou de máquina que ocupam.
as linguagens muito parecidas com linguagem de máquina são chamadas de linguagens de baixo nível
as linguagens de alto-nível são as que guardam mais semelhanças com a linguagem natural.
exemplo de linguagens de baixo nível é a linguagem de montagem assembly. 
exemplos de linguagens de alto-nível são pascal, c, fortran, java, perl, python, lisp, php, entre outras.
o processador não pode executar o código numa linguagem de programação, esta deve ser traduzida em código de máquina
textbfcompilação  é responsável por converter os comandos da lingugem de programação nas instruções em código de máquina que o processador poderá utilizar.
o pseudocódigo é uma maneira intermediária entre a linguagem natural
uma linguagem de programação de representar um algoritmo.
ela utiliza um conjunto restrito de palavras-chave, em geral na língua nativa do programador, 
o pseudocódigo não requer todo a rigidez
sintática  é necessária numa linguagem de programação
lógica do algoritmos e não no formalismo da sua representação.
na medida em que se obtém mais familiaridade com os algoritmos, então o pseudocódigo pode ser traduzido para uma linguagem de programação
este conjunto de regras demonstra como o compilador  requer estruturas bem rígidas para poder processar  o programa.
para que seja possível armazenar e manipular dados no computador é necessário representá-los internamente de alguma forma.
nós seres humanos, representamos nossos números usando um sistema que chamamos de sistema decimal
nos caso dos computadores digitais, a notação que é utilizada possui apenas dois algarismos ou dígitos para representar uma quantidade desejada,
sistema de representação é chamado de sistema binário ou sistema na base dois e utiliza a noção de ligado/desligado, ou verdadeiro/falso,
pelo fato de um número precisar de muitos algarismos para ser expresso no sistema binário, outras formas de representação auxiliares também são utilizadas nos computadores
a quantidade de algarismos necessária para representar um determinado número varia de acordo com o sistema de representação utilizado
um único algarismo binário é chamado bit, uma sequência de oito bits é um byte e uma sequência de dezeseis bits é uma palavra.
a lógica utilizada para realizar a conversão de números entre diferentes bases é similar a lógica que usamos para representar um número no sistema decimal,
algarismos irão representar diferentes quantidades dependendo da sua posição no número em questão.
os dados em um computador devem ser armazenados de acordo com o tipo de informação
a representação correta e adequada de uma informação permite otimizar os recursos computacionais disponíveis, 
os tipos de dados mais comuns encontrados na maioria das linguagens de programação e que constituem a base de como qualquer informação será armazenada no mesmo.
dentro de um algoritmo podemos encontrar basicamente duas classes diferentes de dados
os dados constantes e os variáveis.
um dado é uma constante quando seu valor não se altera ao longo do tempo em que o algoritmo é executado,
um dado que pode ter seu valor alterado durante a execução do programa é tido como uma variável.
para que os dados sejam manipulados no computador, é necessário que estes estejam associados a um nome, um identificador.
o conteúdo deste identificador será o dado em si e o seu nome será usado para acessar o dado e realizar operações com o mesmo.
uma analogia útil para entender o conceito e a necessidade de utilização do identificador seria pensar no mesmo como uma placa de sinalização
uma determinada região ou espaço na memória do computador onde o dado desejado está localizado.
toda vez que se deseja acessar uma determinada informação utilizamos o nome dessa placa de sinalização e recuperamos o conteúdo que está localizado dentro do espaço¸ 
ao nomearmos os identificadores dos nossos dados é conveniente usarmos palavras mnemônicas,
palavras que nos façam lembrar o caráter do conteúdo armazenado.
ao armazenarmos o nome completo, a idade e a quantidade de filhos de uma pessoa, é mais prático e coerente usarmos os identificadores nomesobrenome, idade e numfilhos 
o dado será manipulado através do nome do seu identificador,
o primeiro passo para utilizarmos os dados é a nomeação do seu idenficador e a definição do seu tipo
a definição dos dados em algoritmos também é conhecida como declaração
um identificador sendo ele variável ou constante declarado com um determinado tipo de dados ficará restrito a armazenar valores daquele tipo específico
na maioria dos casos, se houver uma tentativa de atribuir a um identificador um tipo diferente daquele para o qual ele foi definido irão ocorrer erros
ao declaramos um identificador variável, estamos reservando na memória do computador um espaço para armazenar valores do tipo declarado para o mesmo. podemos comparar a memória de um computador com um móvel cheio de gavetas etiquetadas, onde cada gaveta marcada pela etiqueta corresponde a um identificador
após realizada a declaração de um identificador, é possível iniciar a manipulação dos dados que esse identificador irá representar a partir da atribuição de valores 
processo de atribuir ou alterar o valor dos dados de um identificador é chamado de atribuição
uma varíavel pode armazenar apenas um único valor por vez,
sempre que um novo valor é atribuído a variável o valor anterior que estava armazenado é perdido
quando a execução passa pela linha um é reservado um espaço na memória do computador para armazenarmos valores do tipo inteiro, que acessaremos através da variável numero
é importante ressaltar que inicialmente, a variável numero não contém nenhum valor.
as expressões aritméticas são aquelas em que os operadores são aritméticos e os operandos são valores do tipo numérico
esses valores numéricos podem ser acessados por meio de identificadores constantes ou por meio de variáveis.
as operações aritméticas fundamentais são adição, subtração, multiplicação, divisão, potenciação, divisão inteira e o resto . 
quando uma expressão aritmética precisa ser avaliada num algoritmo, o analisador processa a expressão dando prioridade para certos operadores. 
as sub-expressões que contém estes operadores serão avaliadas primeiro e seu valor substituído pela sub-expressão inteira.
cada operação aritmética em um algoritmo deve ser escrita em apenas uma única linha. 
quando uma expressão matemática usual é escrita precismamos utilizar parênteses para garantir que todas as operações sejam executadas na ordem adequada.
ao desenvolvermos um algoritmo é bastante comum deixarmos parênteses não pareados nas expressões aritméticas,
um teste prático para evitarmos esse tipo de contratempo consiste em contar na expressão quantos parênteses esquerdos e direitos existem,
para a maioria das expressões aritméticas executadas em um algoritmo é possível associar um valor definido,
nem todas as expressões aritméticas possuem um valor definido matematicamente, é o caso de divisões de números pelo valor  zero ou de raízes quadradas de números negativos
as expressões lógicas são aquelas cujo valor só pode ser verdadeiro ou falso. 
as expressões lógicas também podem ser compostas por resultados de expressões aritméticas.
os operadores relacionais são aqueles que comparam dois valores do mesmo tipo
o retorno da expressão relacional indica se o resultado da comparação foi verdadeiro ou falso.
os operadores lógicos são usados para representar situações lógicas que não podem ser representadas por operadores aritméticos.
os operadores lógicostambém são chamados conectivos lógicos por unirem duas expressões simples numa composta.
podem ser operadores binários, que operam em duas sentenças ou expressões, ou unário que opera numa sentença só.
quando duas expressões são unidas por este operador, a expressão resultante só é verdadeira se ambas expressões constituintes também são.
por exemplo chove e venta só é verdadeiro se as duas coisas forem verdadeiras, 
o segundo operador é o operador binário de disjunção ou ou lógico, representado por ou ou or. 
tanto a parte dois menor que  tres como cinco maior que um  são verdadeiras, logo a expressão completa também é.
o operador ou é complementar ao operador e. 
para imprimirmos algum tipo de informação na tela do computador utilizamos o comando escreva seguido da informação que será escrita.
se quisermos imprimir uma mensagem como por exemplo ola mundo isto seria feito com a instrução escreva olá mundo
as aspas servem para delimitar uma sequência de caracteres,
para imprimir o valor de uma variável, basta colocar o seu identificador diretamente. 
é possível escrever valores de qualquer tipo existente, como valores reais, valores lógicos, valores inteiros, do tipo sequência de caracteres, resultados de expressões
da mesma maneira que necessitamos enviar informações de dentro do algoritmo para a saida padrão  também necessitamos receber informações de fora do algoritmo, 
para realizarmos a entrada de dados utilizaremos o comando leia.
ao utilizar o comando leia o programador deve saber de antemão qual a variável que irá armazenar o valor que será fornecido pelo usuário.
os valores que seriam fornecidos pelo usuário são referentes ao código do cliente e ao nome da fita que o mesmo está locando. 
é necessário declarar variáveis que possam armazenar valores que sejam compatíveis com as informações solicitadas ao usuário.
a informação do código do cliente pode ser um valor do tipo inteiro
é necessário que declaremos no algoritmo uma variável desse tipo,
a informação do nome da fita pode ser uma informação do tipo caractere, sendo também necessário que declaremos no algoritmo uma outra variável para receber essa informação
após declaradas as variáveis que receberão os valores fornecidos pelo usuário podemos utilizar o comando leia para receber esses valores.
leia seguido da variável que receberá os valores entre parênteses.
é possível avisarmos o usuário sobre qual tipo de informação o algoritmo está precisando,
utilizamos o comando de saída de dados escreva imediatamente antes do leia que informa ao usuário o que deve entrar.
informar ao usuário o que digitar antes de executar o comando leia e esperar pela entrada do usuário.
num processo geral de execução de um algoritmo implementado em uma linguagem de programação, a execução começa na primeira linha e vai avançando sequencialmente
executando o código linha após linha até chegar no final.
necessidade de colocar instruções dentro de um programa que só serão executadas caso alguma condição específica aconteça. 
para esta finalidade a maioria das linguagens possui estruturas de condição para realizar esta tarefa.
podemos solicitar valores de entrada aos usuários do sistema utilizando o comando leia,
podemos ainda enviar valores de saída do sistema por meio do comando escreva.
as possibilidades de construção de algoritmos que temos até o presente momento são bastante limitadas
ainda não estamos aptos a tomar decisões durante o tempo de execução do algoritmo ou até mesmo de classificar determinados valores de variáveis.
para um intervalo de valores da idade o algoritmos executa um conjunto de ações e para outro intervalo executa um outro conjunto de ações.
onde um determinado valor é avaliado para a partir do resultado dessa avaliação executar alguma ação, utilizamos as estruturas de condição.
a expressão lógica é uma expressão que deverá retornar um valor de verdadeiro  ou de falso
caso o resultado dessa expressão for verdadeiro, será executado o bloco de comandos que está dentro da estrutura.
caso seja falso, a execução do programa ignora o bloco de comando e continua na linha seguinte à estutura de condição.
o bloco de comandos é uma sequência de código que será executado somente quando o resultado da expressão lógica for verdadeiro. 
por fim, a instrução se entao indica que a estrutra se-entao chegou ao final, servido para delimitar o bloco de instruções.
a estrutura de condição se então, oferece a possibilidade de executarmos uma determinada ação ou comando se o resultado da expressão lógica 
quando o processamento do algoritmo chega numa estrutura se-então a expressão lógica nela contida é avaliada
se o seu valor é verdadeiro então o bloco de comandos seguinte ao se, chamado bloco-verdade é executado
caso o resultado da expressão lógica seja o bloco de comandos posterior ao comando senão, chamado de bloco-falso, é executado.
se a estrutura de condição não possui uma cláusula senão, então no caso da expressão lógica ser falsa, 
a execução do algoritmo continua na linha subsequente ao bloco se-então.
é possível compor expressões lógicas utilizando operadores relacionais 
também é possível compor expressões lógicas utilizando os operadores lógicos 
a expressão lógica que será avaliada na estrutura de condição se entao também pode ser formada por uma expressão lógica composta.
dentro de uma estrutura se-então-senão é perfeitamente possível utilizarmos mais de uma linha de comando,
existem situações em que os caminhos para a tomada de uma decisão acabam formando uma espécie de árvore com diversas ramificações,
cada caminho é um conjunto de ações.
podemos recorrer à utilização de várias estruturas se então senão embutidas umas dentro das outras, comumente chamadas de ninhos.
nas estruturas de decisão encadeadas, uma estrutura de condição é aninhada dentro de outra, como bloco verdade ou falsidade.
para que a estrutura de condição mais interna seja avaliada, é necessário que uma determinada condição seja satisfeita na estrutura de condição mais externa
uma outra alternativa para trabalhar com comandos condicionados a um determinado valor é a estrutura caso seja.
na estrutura caso seja  o valor de uma determinada variável é avaliado e caso esse valor coincida com determinado valor pré-estabelecido um determinado comando é executado
a estrutura de condição caso também nos oferece essa opção, chamada opção padrão. 
uma das principais características que consolidaram o sucesso na utilização dos computadores para a resolução de problemas foi a sua capacidade de repetir o processamento de um conjunto de operações para grandes quantidades de dados. 
conjuntos de tarefas que repetimos diversas vezes dentro de uma situação específica podem ser observados largamente no nosso dia a dia
as estruturas de repetição provém uma maneira de repetir um conjunto de procedimentos até que determinado objetivo seja atingido, quando a repetição se encerra.
todas as estruturas de repetição têm em comum o fato de haver uma condição de controle, expressa através de uma expressão lógica,
as estruturas de repetição são basicamente três enquanto-faça, faça-enquanto e parafaça.
a diferença básica é que enquanto-faça primeiro testa a condição para depois realizar o bloco de comando,
a estrutura para faça tem embutida um mecanismo de controle para determinar quando o laço deverá ser terminado.
antes de entrar na estrutura de repetição, uma expressão lógica é avaliada e caso o resultado da mesma for verdadeiro, os comandos que estão dentro da estrutura serão executados.
após a execução dos comandos, a expressão lógica é novamente avaliada.
caso o resultado da expressão lógica for falso, o algoritmo sai da estrutura de repetição e segue para a próxima linha.
de maneira geral, o mecanismo que altera o valor da expressão lógica que controla o laço está embutido 
dentro do bloco de comandos ou depende de alguma variávelexterna que será fornecida em tempo de execução.
a estrutura enquanto-faça é usada principalmente quando não se sabe com antecedência a quantidade de repetições que precisam serrealizadas.
caso desejemos que o usuário possa executar várias vezes as opções dispostas no menu, não temos como adivinhar quando o usuário irá optar por sair do algoritmo
a estrutura faça-enquanto difere da estrutura enquanto-faça somente por executar o bloco de comando antes de testar se a condição é verdadeira,
o teste da condição é realizado apenas ao final da estrutura.
utilizando o faça-enquanto o bloco de comandos será sempre executado pelo menos uma vez,  mesmo que a expressão de controle seja falsa. 
a estrutura para-faça é composta de um mecanismo de controle que estabelece de antemão quantas vezes o laço será executado.
uma determinada variável assumirá valores pertencentes ao intervalo identificado pelos valores de inicio e fim
em situações onde é necessário realizarmos contagens de ocorrências,
devemos utilizar variáveis específicas para fazer o armazenamento dos resultados. 
chamamos de contadores para as variáveis que realizam a contagem de ocorrências de um determinado valor
acumuladores são as variáveis responsáveis por armazenar os resultados de somatórios e produtórios de valores.
os contadores são normalmente inicializados com valor zero e incrementados em um a cada vez que uma nova ocorrência ou situação é observada.
como comentado anteriormente, os acumuladores são utilizados em dois tipos de situações, para a realização de somatórios e para a realização de produtórios
dos somatórios, o acumulador é normalmente inicializado com o valor zero e incrementado no valor de um outro termo qualquer, dependendo do problema em questão.
um algoritmo para calcular a média das idades das pessoas do sexo feminino com dezoito anos ou mais, pode ser facilmente desenvolvido utilizando um contador
no caso de utilizarmos acumuladores para armazenar produtórios é necessário a inicialização do mesmo com o valor neutro da multiplicação
a cada iteração o acumulador é então multiplicado por um outro termo qualquer, dependendo do problema em questão.
vetores são varíaveis compostas que podem armazenar um conjunto de valores.
todos estes valores são referenciados através do nome do vetor o mesmo para todo o conjunto de valore e de um índice distinto para cada valor.
as variáveis vetoriais são análogas aos vetores usados na matemática e na física
ao contrário de um escalar que possui só um valor, x é uma variável composta por tres valores. 
as variáveis vetoriais na prática são constituídas por um grande número de valores.
as valores armazenados numa variável vetorial são todos do mesmo tipo, 
os vetores são chamados de variáveis compostas homogêneas.
os vetores são imprescindíveis quando se quer armazenar diversos valores de um mesmo tipo e referenciá-los com o mesmo nome.
para armazenar as idades de vários alunos de uma turma, poderia-se criar um vetor idade com oito posições
cada índice de zero a sete corresponderia a um funcionário.
os vetores são declarados anexando-se ao nome da variável um colchete com o número de posições que o vetor porerá conter
cada uma das posições do vetor são referenciadas através do nome do vetor seguido do respecivo índice colocado entre colchetes.
é importante notar que uma variável de n posições possui índices de zero a n menos um.
na variável idade de oito posições usam-se os índices zero a sete; qualquer índice fora desta faixa resulta em erro.
a grade vantagem de se usar índices dentro do nome da variável é a possibilidade de referenciar um dado elemento do vetor através de um índice variável.
para imprimir todos os valores da variável idade, é muito mais simples colocar a instrução que se repete dentro de uma estrutura de repetição
cada linguagem de programação obedece à regras específicas. 
essas regras de sintaxe definem como são expressadas as instruções a serem executadas
uma variável é um espaço da memória principal reservado para armazenar dados tendo um nome para referenciar o seu conteúdo.
o valor armazenado em uma variável pode ser modificado ao longo do tempo.
cada programa estabelece o número de variáveis que serão utilizadas
pseudolinguagem  é  uma  linguagem  de  programação,  logo  tem  sua  sintaxe  e  sua  semântica. 
comandos de entrada e saída de dados,  por  exemplo,  não  consideram  a  forma  particular  de  entrada  ou  exibição de dados
os  tipos  básicos,  elementares,  de  informação,  são  os  utilizados  com  mais  freqüência,  e  são  praticamente  obrigatórios em qualquer linguagem de programação.
hoje em dia os computadores são utilizados nas mais diversas atividades desenvolvidas pelo homem,
o poder computacional distribuído nas casas de pessoas comuns é muito grande. s
se todas estas máquinas fossem usadas de forma inteligente poderiam juntas resolver problemas complexos tais como a decodificação genética, 
uma variável é uma entidade que possui um nome e que poderá conter um dado a ser manipulado pelo programa,
na programação as variáveis podem ter tipos diferentes
quando declaramos uma variável informamos o seu nome e o seu tipo.
os tipos básicos podem ser numéricos shortint, byte, integer, single, real, double, comp e extended, caractere char, cadeias de caracteres string ou lógico boolean.
diferenciação é feita porque cada tipo utiliza uma quantidade diferente de memória para armazenar eu respectivo dado.
quando um programa é compilado, os nomes das variáveis são transformados em endereços de memória onde os dados das respectivas variáveis serão manipulados.
todo espaço de memória necessário para as variáveis declaradas é reservado alocado durante a compilação 
as variáveis numéricas podem conter somente números.
uma variável do tipo integer pode conter um número inteiro negativo, nulo ou positivo, mas jamais um número fracionário ou com casas decimais separadas por uma vírgula.
se o programa precisar manipular números fora desta faixa então deverá usar uma variável de outro tipo.
números fracionários ou com casas decimais são considerados números reais.  o tipo string pode conter uma cadeia de caracteres limitada a duzentos e cinquenta e cinco também chamada de literal.
cada declaração deve especificar o número de caracteres envolvidos na cadeia. 
 normalmente o compilador um byte a mais em cada cadeia para armazenar o tamanho válido da mesma.
o tipo boolean pode conter um entre dois valores possíveis
true  verdadeiro ou false falso, não sendo necessário mais do que um bit,
utiliza-se um byte pela comodidade na compilação.
observe que não é necessário utilizar mais do que uma palavra reservada var para declarar todo um conjunto de variáveis.
os nomes de variáveis, chamados de identificadores, não podem ser coincidentes com palavras reservadas da linguagem e existem regras para a sua formação,
declare as variáveis necessárias para armazenar as seguintes informações título de livro, nome do autor, ano de publicação, número de página, preço unitário
uma expressão é uma combinação de operadores e operandos variáveis e constantes que depois de ser avaliada produz um valor.
o tipo da expressão é dado pelo tipo do valor resultante da sua avaliação. 
precisamos ainda apresentar os conceitos de constantes e operadores.
uma constante representa o dado  propriamente dito que poderá ser ou não armazenado dentro de uma variável.
as constantes podem ser dos mesmos tipos que as variáveis. 
assim, temos constantes numéricas, caracteres, literais e lógicas.
note que os caracteres e os literais são delimitados por aspas simples.
os operadores são os elementos ativos de uma expressão, ou melhor, são os elementos que exercem operações sobre as variáveis e constantes produzindo novas constantes.
quando um operador é aplicado a somente um operando ele é dito unário e quando é aplicado a dois operandos ele é dito binário.
os operadores podem ser aritméticos, lógicos ou relacionais.
os operadores aritméticos são parecidos com aqueles conhecidos da matemática e funcionam como tal.
os principais são adição  subtração multiplicação, divisão real , divisão inteira  e resto da divisão inteira
uma expressão contendo operadores aritméticos dever ser avaliada considerando a existência de prioridade entre eles.
a prioridade dos operadores define a ordem segundo a qual eles devem ser avaliados.
as operações de multiplicação e divisão devem ser resolvidas antes das operações de soma e subtração.
o resultado da avaliação de uma operação aritmética é sempre um valor numérico. 
quando na expressão existir parênteses, a parte interna de cada parêntese deve ser analisada antes da parte externa. 
os operadores lógicos são aplicados em expressões lógicas e produzem como resultados valores do tipo boolean .
por questões de simplicidade usaremos as notações v e f para true e false, respectivamente.
os principais operadores lógicos são conjunção , disjunção  e negação , sendo que a ordem de maior prioridade é not, and e or. 
o funcionamento destes operadores pode ser visualizado na tabela verdade, para operações sobre dois valores lógicos a e b os quais podem ser variáveis, constantes ou expressões lógicas.
uma outra classe de operadores é a dos operadores relacionais.
operador deve ser aplicado em expressões comparativas, produzindo resultados booleanos.
vetores e matrizes são estruturas de dados muito simples que podem nos ajudar muito quando temos muitas variáveis do mesmo tipo em um algoritmo. 
vetor array uni-dimensiona é uma variável que armazena várias variáveis do mesmo tipo.
matriz array multi-dimensional é um vetor de vetores. 
repare que os arrays vetores ou matrizes aliados a estrutura de repetição para é um ótimo recurso para algoritmos que precisam de muitas variáveis do mesmo tipo.
vetores e matrizes são, na verdade, a mesma coisa array a diferença é que o vetor é um array de apenas uma dimensão e a matriz é um array de duas ou mais dimensões.
array é uma das estruturas de dados mais simples que existe e uma das mais utilizadas também. 
os índices podem mudar dependendo da linguagem, algumas começam os índices do array com um e outras com zero,
no caso das linguagens que começam os arrays com o índice zero, o último elemento do array recebe o índice 
se o programador não tiver atenção com os limites de validade para os índices ele corre o risco de ter variáveis sobrescritas ou de ver o computador travar.
inúmeros bugs podem surgir. 
a lógica de programação é essencial para pessoas que desejam trabalhar com desenvolvimento de programas para computadores.
lógica de programação pode ser definida como um conjunto de técnicas para encadear pensamentos a fim de atingir determinado objetivo.
o objetivo fundamental de toda programação é construir algoritmos.
em outras palavras, quando criamos um algoritmo, apenas apontamos uma sequência de atividades que levam à solução de um problema.
até mesmo as soluções para os problemas cotidianos mais simples podem ser descritas por sequências lógicas de atividades, ou seja, por algoritmos
para que os computadores sejam capazes de interpretar os algoritmos que desenvolvemos, precisamos transformar a sequência de passos que
escrevemos em linguagem natural para uma linguagem que possa ser
entendida pelo computador. 
essas linguagens são chamadas de linguagens de programação. 
existem diversas linguagens de programação em uso atualmente. 
ao desenvolvermos nossos algoritmos, frequentemente precisamos armazenar dados referentes ao problema,
para armazenar esses dados, precisamos solicitar ao computador que ele reserve uma área da memória para nosso uso.
a forma de solicitar ao computador que reserve memória é chamada de declaração de variáveis.
a palavra var é utilizada em portugol para indicar que estamos declarando uma variável
precisamos informar o tipo de dados que armazenaremos na variável para que o computador saiba o tamanho do espaço de memória que reservará.
sempre que criamos uma variável, nós o fazemos com o objetivo de armazenar algum tipo de valor específico. 
 o nome dado à variável deve deixar claro o objetivo da mesma, ou seja, devemos utilizar nomes sugestivos. 
quando declaramos uma variável, devemos ter em mente os valores que serão armazenados naquele espaço de memória.
declararemos variáveis do tipo literal cadeia para armazenar uma sequência de caracteres,
se precisarmos de uma variável para armazenar o nome de uma pessoa, esse seria o tipo literal.
tipo lógica declararemos variáveis do tipo lógico para armazenar valores lógicos,
como aprendemos, o valor de uma variável pode ser alterado ao longo de seu algoritmo.
às vezes, precisamos armazenar valores que não se alteram.
existem as constantes. 
as constantes são criadas obedecendo às mesmas regras já vistas para variáveis. 
diferem apenas no fato de armazenar um valor constante, ou seja, que não se modifica durante a execução de um programa.
a palavra const é utilizada em portugol para indicar que estamos declarando uma constante.
é o nome através do qual vamos nos referir à constante.
 eve obedecer às mesmas regras que os nomes de variáveis.
aconselha-se que todas as letras dos nomes das constantes sejam maiúsculas. valor
depois que declaramos nossas variáveis e constantes, geralmente precisamos indicar que elas armazenarão um determinado valor
utilizamos o comando de atribuição que, em portugol, é representado por uma seta
frequentemente, na construção de algoritmos, precisamos solicitar que usuários informem, por meio do teclado, 
alguns valores a serem utilizados durante a execução.
se fizermos um algoritmo para calcular a média das notas de um aluno, precisaremos solicitar quais foram as  notas,
valores informados devem ser armazenados em variáveis para que sejam utilizados quando necessário.
o comando de entrada de dados será responsável pela leitura e armazenamento desses dados na variável que indicarmos.
através da utilização do comando de saída de dados conseguimos exibir mensagens ou valores para o usuário de nossos programas.
nosso algoritmo consegue se comunicar com os usuários para solicitar a entrada de dados ou para fornecer saídas de dados.
o comando de saída de dados exibe no monitor valores de constantes, variáveis ou expressões.
além da ordem de prioridades definida , podemos utilizar parênteses.
resolvemos primeiro as expressões contidas nos parênteses mais internos, seguindo a ordem de precedência entre operadores,
para entender o conceito e o uso de expressões lógicas, primeiro precisamos conhecer os operadores lógicos e os operadores relacionais,
as expressões lógicas são formadas a partir da utilização de operadores
a uma comparação realizada utilizando um operador relacional se dá o nome de relação.
o resultado obtido de uma relação é sempre um valor lógico, ou seja, verdadeiro ou falso.
os operadores lógicos retornam verdadeiro ou falso de acordo com seus operandos.
os operadores lógicos também são conhecidos como conectivos,
são utilizados para formar novas proposições a partir da junção de duas outras.
quando utilizamos o operador lógico e, o resultado só será verdadeiro se as duas condições relacionadas forem verdadeiras
para o operador ou, basta que uma das condições seja verdadeira que o resultado será verdadeiro
para o operador ou, para que o resultado seja falso, as duas condições devem ser falsas.
para visualizar todas as opções possíveis ao utilizar operadores lógicos, tilizamos as tabelas-verdade.
as tabelas-verdade definem os resultados apresentados pelos operadores lógicos de acordo com todas as combinações possíveis
as expressões lógicas são expressõesformadas a partir do uso de variáveis e constantes, operadores relacionais e operadores lógicos.
as expressões lógicas são avaliadas e retornam sempre um valor lógico verdadeiro ou falso
podem ser combinados, em uma mesma expressão, operadores relacionais, lógicos e aritméticos.
é importante compreender a ordem de precedência entre eles, pois isso irá definir a forma de solução da expressão.
uma forma de você evitar confusão é definir as precedências usando parênteses. 
as expressões dentro dos parênteses mais internos são resolvidas primeiro.
você pode testar o uso de parênteses também usando uma planilha de cálculo como o excel.
 muitas vezes precisamos tomar decisões que podem interferir diretamente no andamento do algoritmo. 
 a representação dessas decisões em nossos programas é feita através do uso de estruturas de seleção, ou estruturas de decisão.
os comandos de seleção ou de decisão são técnicas de programação que conduzem a estruturas de programas uma estrutura de
seleção permite a escolha de um grupo de ações a ser executado quando determinadas condições,
expressões lógicas, são ou não satisfeitas.
a estrutura de seleção que utilizaremos em portugol será a estrutura se então senão
a palavra reservada se indica o início da estrutura de seleção.
após essa palavra, vem a condição que definirá o bloco a ser nexecutado.
qualquer expressão lógica poderá ser utilizada como condição, pois deverá retornar verdadeiro ou falso. 
caso a expressão de condição seja verdadeira, o bloco de instruções então será executado.
caso contrário, o bloco senão o será. 
a palavra reservada fim se indica o final da estrutura de seleção.
no capítulo anterior construímos nossos algoritmos utilizando uma linguagem conhecida como portugol. 
portugol é muito utilizada para iniciar o ensino de programação por ter regras formais e rígidas como uma linguagem de programação
com a linguagem natural entendida pelos humanos.
é necessário que utilizemos uma linguagem de programação que disponha de um compilador que transforme o algoritmo em um programa a ser executado.
as duas linhas indicam a inclusão de bibliotecas que possuem as funções de entrada e saída de dados necessárias à execução do nosso
programa multiplicacao.
veremos mais adiante que outras bibliotecas serão necessárias.
a função mainé sempre a primeira a ser executada no programa c.
em todo programa desenvolvido em c, existirá uma função main .
para toda chave  que inicia um bloco de comandos, teremos uma chave  que seráresponsável por informar o fechamento desse bloco.
observe a existência de um ponto-e-vírgula. 
toda instrução em c é finalizada por um ponto-e-vírgula.
a função printf  é uma função de saída de dados.
permite que uma mensagem seja exibida no monitor.
as mensagens devem ser escritas entre aspas.
a função scanf  é responsável por ler os dados que forem digitados pelo teclado.
já vimos que a função printf  permite a exibição de mensagens no monitor.
nesse comando o conteúdo da variável soma também é exibido.
system pause possibilita uma pausa no programa a fim de visualizarmos o resultado na tela.
return  zero indica o número inteiro que está sendo retornado pela função, em nosso caso, o número zero.
em c há distinção entre caracteres maiúsculos e minúsculos. 
uma boa prática é salvar periodicamente o arquivo,
não espere finalizar toda a digitação para então salvar. 
salvando, caso ocorra algum problema, você não perderá todo o trabalho.
note que a janela para nomear o arquivo só aparece na primeira vez em que o mesmo é salvo. 
nas demais vezes o arquivo será apenas atualizado, não sendo necessário informar novamente seu nome e tipo.
depois de salvar o arquivo, devemos compilar e executar o programa a fim de visualizarmos seu resultado.
caso você solicite a compilação antes de salvar o arquivo, automaticamente aparecerá a janela de salvar arquivo
quando compilamos um programa e o ambiente encontra algum erro no mesmo, a linha que contém o erro fica sombreada em destaque 
na parte inferior da janela do ambiente são exibidas mensagens indicando o erro encontrado.
essas mensagens são muito úteis para que possamos compreender o motivo do erro e corrigi-lo. 
é muito importante ficar atento a tais mensagens.
já aprendemos que constantes e variáveis alocam espaço em memória e são utilizadas para armazenar valores necessários
a diferença entre constantes e variáveis está no fato de que o valor de uma constante nunca se altera,
o valor de uma variável pode mudar durante a execução do programa.
a declaração de variáveis em c é muito parecida com a forma que aprendemos em portugol,
indicamos o tipo da variável e, em seguida, o nome da mesma.
o tipo da variável define, além do tipo de dado que ela pode armazenar, o tamanho do espaço de memória que deve ser alocado
o tamanho do espaço de memória é medido em uma unidade chamada byte.
quanto aos nomes de variáveis, valem as mesmas regras apresentadas quando estudamos portugol,
o primeiro caractere do nome deve ser uma letra e os demais podem ser letras, números ou o caractere underline
vale lembrar que em c há distinção entre caracteres maiúsculos e minúsculos.
para evitar erros , aconselhamos evitar o uso de caracteres maiúsculos nos nomes das variáveis,
após declarar uma variável, pode-se atribuir um valor a ela através da utilização do comando de atribuição igual.
em c, a atribuição pode ser feita em qualquer ponto do programa após a criação da variável,
também é permitido fazer uma atribuição na mesma linha em que é feita a declaração.
os valores atribuídos a variáveis do tipo char devem estar sempre entre aspas. 
também é importante ressaltar que o separador decimal utilizado em variáveis do tipo float é o ponto e não a vírgula
como vimos em nosso exemplo do programa multiplicacao, a função printf é a função de saída de dados em c.
o printf funciona em c como a função escreva funcionava em portugol
é através dessa função que imprimimos mensagens na telan print f.
ainda em nosso exemplo anterior vimos que a função printf usa o caractere de percentual seguido de uma letra para identificar o formato
utilizamos o porcentagem d, pois estávamos imprimindo um número inteiro.
nesse exemplo utilizamos o porcentagemd quando imprimimos a variável matricula, que é do tipo int, poscentagem c para a variável turma,
caracteres contrabarra n que aparecem no final de cada printf são utilizados para pular uma linha; 
caso não tivéssemos utilizado barra n, todas as mensagens seriam impressas na mesma linha.
no exemplo do programa multiplicacao também pudemos observar a utilização do comando scanf . 
o scanf funciona em c como a função leia em portugol, 
é através desta função que lemos entradas de dados através do teclado.
a exemplo do printf , o scanf  também utiliza os códigos de formatação. 
no printf  esses códigos eram utilizados para indicar o formato dos dados a serem escritos
no scanf  esses mesmos códigos indicam o formato dos dados a serem lidos.
quando desenvolvemos programas, devemos colocar textos que expliquem o raciocínio seguido durante seu desenvolvimento 
outras pessoas, ou nós mesmos, ao ler o programa mais tarde, 
não tenhamos dificuldades em entender sua lógica. 
esses textos são chamados de comentários.
os comentários podem aparecer em qualquer lugar do programa.
em c, há dois tipos de comentários os comentários de linha e os comentários de bloco.
os comentários de linha são identificados pelo uso de barra barra.
quando usamos barra barra  em uma linha, tudo o que estiver nessa linha depois do barra barra  são considerados comentários.
os comentários de bloco são iniciados por barra asterisco  e finalizados por asterisco barra . 
tudo o que estiver entre esses dois símbolos são considerados comentários.
os comentários de bloco podem ocupar várias linhas.
os operadores aritméticos são símbolos que representam operações aritméticas,  as operações matemáticas básicas. 
a maior parte dos operadores aritméticos de c são os mesmos que vimos em portugol. 
apenas acrescentamos o incremento unário mais mais  e o decrementounário menos menos 
o operador de incremento unário mais mais  incrementa de um ao seu operando.
se eu quiser incrementar em um o valor de uma variável x, posso fazer x igual x mais um  ou fazer simplesmente x mais mais.
de forma análoga, o operador de decremento unário menos menos  decrementa de um ao seu operando. 
se eu quiser decrementar de um o valor de uma variável x, posso fazer x igual x menos um ou fazer simplesmente x menos menos 
devemos evitar a utilização de operadores unários em expressões aritméticas, pois seu uso pode dificultar o entendimento da expressão.
recomendo a utilização desses operadores apenas em ocasiões em que se deseja apenas incrementar ou decrementar o operando
a ordem de precedência entre os operadores em expressões aritméticas é a mesma já estudada,
primeiro as multiplicações  divisões e só depois as somas e subtrações.
em c também podemos utilizar os parênteses em expressões aritméticas, como fizemos em portugol.
dentre os operadores relacionais, a única alteração que temos em c em relação ao que aprendemos em portugol refere-se ao operador igua
em c, o operador igual é representado por dois sinais de igual
ao desenvolver programas deparamos comsituações nas quais o fluxo de execução do programa depende de determinadas condições,
existem os comandos de seleção ou decisão.
para realizar essa tomada de decisão na linguagem c temos os comandos de seleção if e switch.
o comando if deve ser utilizado quando a execução de uma ou mais instruções do programa depender de uma ou mais condições simples.
o comando if é equivalente ao comando se então do portugol.
se a expressão de teste que se encontra entre os parênteses for verdadeira, a instrução da linha subsequente será executada; 
mais de uma instrução que dependa do resultado da condição para ser executada, essas instruções devem ficar entre chaves,
if deve ser utilizado em situações nas quais um bloco de instruções só deve ser executado se uma determinada situação for verdadeira. 
muitas vezes deparamos com situações nas quais o programa deve seguir um fluxo caso uma determinada condição seja verdadeira
um outro fluxo caso essa condição seja falsa.
evemos utilizar o comando if else.
o comando if else é equivalente ao comando se então senão de portugol 
assim como o comando if, o comando switch é uma estrutura de decisão.
devemos utilizar o comando switch quando o programa deve escolher uma entre várias alternativas para um determinado valor.
o comando if é utilizado para decisão simples.
o comando if else é utilizado quando, com baseem uma condição, o programa pode executar um ou outro bloco de comandos.
podemos utilizar comandos if else aninhados, ou seja, dentro de um bloco de comandos executados em um if else podemos ter outra 
o comando switch é utilizado quando temos condições que não sejam expressões e temos uma listade valores possíveis para a condição.
ao desenvolver nossos programas, deparamos com situações nas quais precisamos que um determinado bloco de instruções seja repetido
o comando for é ideal para situações nas quais um bloco de instruções deve ser repetido um número fixo ou conhecido de vezes.
os parênteses que seguem a palavra for contêm três expressões separadas por ponto-e-vírgula
expressão de inicialização, expressão de teste e expressão de incremento.
a expressão de inicialização é uma instrução de atribuição executada apenas uma vez, no início do laço. 
a expressão de inicialização geralmente utilizada para inicializar uma variável que irá controlar o número de repetições do laço.
a expressão de teste é a condição que controla o laço.
normalmente é uma expressão lógica que utiliza a variável de controle do laço.
essa expressão é verificada antes da execução do laço.
se for verdadeira, o laço é executado mais uma vez.
a expressão de incremento define a maneira como a variável de controle do laço será alterada a cada vez que o laço for repetido.
ela é executada ao final da execução de cada repetição do corpodo laço.
ao declararmos uma variável, estamos reservando um espaço na memória, oqual não é necessariamente um espaço limpo.
variável no momento da declaração armazena apenas lixo. 
ao atribuirmos o valor zero para ela, garantimos que os valores sejam acumulados corretamente.
a linha do comando for controla a quantidade de vezes que o loop será executado.
observe que ele inicia a variável conta de zero , controla o loop para ser executado dez vezes  e finalmente incrementa a variável conta 
é importante notar que o comando conta mais mais  é o mesmo que conta iagual a  conta mais  um
o comando while é ideal para situações nas quais não sabemos o número exato de vezes que o bloco de instruções deve ser repetido,
while pode ser utilizado para substituir laços for
a variável resp será responsável por armazenar a resposta do usuário perceba que ela é inicializada igual a um. isso se faz necessário para que o programa execute o laço a primeira vez
a variável contador guardará a quantidade de vezes em que o usuário digitou uma nota,  o que corresponderá à quantidade de alunos.
o comando do while é muito parecido com o comando while que acabamos de aprender. 
a única diferença é que com o comando do while asseguramos que o bloco de instruções do laço seja executado ao menos uma vez.
depois da primeira execução, o bloco de instruções só é executado novamente se a condição for verdadeira.
os comandos for, while e do while são responsáveis por repetições do programa.
cabe ao programador decidir qual deles melhor responderá às necessidades para a solução de cada problema.
um vetor é uma estrutura de dados utilizada para representar certa quantidade de variáveis de valores homogêneos,
um conjunto de variáveis, todas do mesmo tipo.
no capítulo anterior, fizemos um programa que calculava a média de notas de uma turma
nesse programa sempre líamos a nota de cada aluno utilizando a mesma variável para armazenar o valor.
a cada rodada do laço, a variável assumia a nota de um aluno e essa nota era acumulada numa variável soma.
um vetor é como uma coleção de caixinhas enumeradas.
cada caixinha é capaz de armazenar um valor e tem o seu endereço.
o endereço de cada caixinha é conhecido como índice e serve para identificar qual posição do vetor queremos acessar. 
a diferença entre a atribuição de valores quando utilizamos variáveis e quando utilizamos vetores é que no uso de vetores precisamos indicar o índice a ser utilizado.
para utilizar vetores para armazenar valores obtidos através do comando scanf, a única diferença é também a informação do índice do vetor a
queiramos ler um número e armazená-lo no índice zero do nosso vetor
note que o fato de termos declarado o vetor com dez posições não significa que estejamos livres do controle do índice.
a linguagem c não verifica se o índice que você usou está dentro dos limites válidos.
você é quem deverá ter o cuidado de controlar os limites,
o primeiro índice de um vetor é o índice zero.
se tenho um vetor com n posições, seus índices vão de zero a n menos um
matrizes são estruturas indexadas utilizadas para representar certa quantidade de valores de um mesmo tipo.
se você estiver atento, deve estar se perguntando mas esse não é o conceito de vetor.
vetor é um tipo especial de matriz.
dizemos que vetor é uma matriz unidimensional. 
enquanto o vetor tem apenas uma dimensão, a matriz pode ter tantas dimensões quantas forem necessárias.
trabalharemos sempre com matrizes de duas dimensões.
sempre que nos referirmos a matrizes, estaremos falando de matrizes bidimensionais.
a única diferença entre a declaração de matrizes de duas dimensões e a declaração de vetores é que, ao declarar vetores, informamos apenas uma dimensão o seu tamanho, enquanto em matrizes bidimensionais informamos duas dimensões.
vale ressaltar que a linguagem c permite a criação de matrizes de quantas dimensões o programador quiser, 
assim, uma matriz de duas dimensões é como um vetor onde cada elemento é também um vetor
é responsabilidade do programador manter o controle sobre a faixa de índices acessíveis. 
a linguagem c não fará o controle automaticamente.
ou seja, se você definir um vetor de dez posições  e tentar acessar a posição de índice dez, não ocorrerão erros de compilação. 
ao executar o programa, será acessada uma posição de memória não alocada para o mesmo e estará sujeito a erros.
em linguagem c as strings são representadas por meio de vetores de caracteres
assim, para tentar reduzir essa complexidade e facilitar o desenvolvimento e a manutenção dos programas, surge a ideia de modularização.
a ideia da modularização baseia-se no famoso princípio de dividir para conquistar. 
as técnicas de modularização têm como objetivo principal dividir um programa grande e complexo em vários programas mais simples.
são desenvolvidos vários programas menores que se integram para resolver o problema maior.
suponha que tenhamos de desenvolver um programa para calcular a folha de pagamento de uma empresa.
note que conseguimos dividir nosso problema inicial em vários problemas menores, ou seja, começamos a modularizar nosso programa.
a maneira mais simples de modularizar nossos programas é através da sua divisão em funções ou em procedimentos. 
cada uma das partes do nosso problema seria resolvida através da construção de uma função ou de um procedimento.
é muito mais fácil pensar em cada um dos programas menores do que no programa maior como um todo;
é mais fácil verificar o funcionamento e encontrar as falhas em pequenos programas com objetivos específicos do que em um grande e
complexo programa;
programas modularizados são mais fáceis de serem lidos e entendidos;
é mais fácil alterar programas modularizados. por exemplo, imagine se a tabela de recolhimento do imposto de renda for alterada.
se nosso programa estiver modularizado como pensamos , basta alterar a função que calcula o imposto de renda e nada mais será afetado.
a modularização facilita o reaproveitamento de trabalhos executados anteriormente.
uma função é uma unidade de código de programa autônoma desenvolvida para cumprir uma determinada tarefa em particular
a única diferença que há entre os conceitos clássicos de procedimento e função está no fato de que uma função sempre retorna um valor como resultado de sua execução, enquanto um procedimento não provê um retorno.
a linguagem c fornece ao programador um conjunto de funções e procedimentos prontos para o uso. nós já utilizamos algumas delas, como a printf  e a scanf .
tipo_de_retorno é o tipo de dado a ser retornado pela função. 
os tipos de retornos possíveis são exatamente os mesmos tipos de variáveis que já vimos.
assim como demos nomes a nossas variáveis, precisamos nomear nossas funções. 
é através desse nome que vamos executar a função. 
é importante dar nomes que reflitam o objetivo da função.
uma função pode receber dados como entrada para efetuar suas ações esses dados são conhecidos como parâmetros.
a declaração de parâmetros funciona de forma parecida com a declaração de variáveis.
corpo da função é o conjunto de comandos que a função irá executar.
a diferença entre os conceitos de função e procedimento está no fato de uma função sempre gerar um retorno, 
um procedimento não gera retorno. 
em linguagem c não há uma sintaxe para definição de procedimento.
quando uma função em c não vai retornar valor algum, definimos o tipo de retorno dessa função void.
assim, em linguagem c, definimos procedimentos como funções que têm como tipo de retorno o tipo especial void.
modularização é uma técnica de programação que utilizamos para dividir um programa maior em programas menores. 
aos programas menores denominamos funções ou procedimentos.
a diferença entre função e procedimento está no fato de funções fornecerem um retorno, enquanto procedimentos não o fazem.
procedimentos são definidos em linguagem c como funções cujo retorno é do tipo void.
variáveis definidas dentro de uma função só podem ser utilizadas dentro da própria função, pois, ao finalizar a execução da função, elas são apagadas da memória.
quando passamos um parâmetro por valor para uma função, mesmo que a variável passada como parâmetro sofra alterações dentro da função chamada, o valor dela não é alterado no contexto do programa principal.
todas as passagens de parâmetros que fizemos até aqui em nossos exemplos foram passagens por valor.
quando queremos que as alterações nos valores de um determinado parâmetro sejam refletidas no valor da variável passada como argumento, devemos utilizar a passagem de parâmetro por referência.
em linguagem c, para simular a passagem de parâmetro por referência, utilizamos ponteiros. 
os ponteiros são variáveis utilizadas para fazer referência a outras variáveis. 
neste momento não devemos nos preocupar com o conceito de ponteiro.
o importante é entender como fazer a passagem por referência.
o termo parâmetro muitas vezes é utilizado como sinônimo de argumento, mas geralmente utilizamos “parâmetros” quando fazemos referência às variáveis situadas na assinatura de um método ou função e argumentos aos valores atribuídos a esses parâmetros.
passagem de parâmetro por referência a mudança do valor de um parâmetro dentro de uma função afeta o valor da variável original.
 alterações no parâmetro não afetam a variável externa.
usando protótipo de função, poderemos apenas declarar as funções antes da função principal e escrever o corpo das funções após o programa principal.
o compilador tomará conhecimento do seu formato antes da compilação. 
o protótipo de função consiste apenas em apresentar a assinatura da função, ou o seu cabeçalho o tipo de retorno, o nome da função e os parâmetros que ela receberá.
funções recursivas são funções que contêm em seu corpo chamadas para si próprias.
em outras palavras, uma função f é dita recursiva se no corpo dessa função há chamadas à própria função f.
a implementação de alguns algoritmos fica muito mais fácil usandose recursividade.
quando uma função é chamada recursivamente, criase um ambiente local para cada chamada. 
as variáveis locais de chamadas recursivas são independentes entre si, como se estivéssemos chamando funções diferentes.
a série de fibonacci é muito conhecida na matemática.
por definição, o primeiro e o segundo termos da série de fibonacci são o número um.
aprender programação ajuda muito a forma como as pessoas pensam, principalmente por desenvolver a disciplina da lógica,
um campo da filosofia criado por aristóteles que cuida das regras do bem pensar, ou do pensar correto, sendo portanto, um instrumento do pensar.
a lógica guia o raciocínio humano através de argumentos para chegar a conclusões de verdade.
quando uma pessoa aprende programar, ela desenvolve uma nova forma de pensar. 
todas as decisões passam a ser tomadas levando em consideração pensamentos sistêmicos e racionais que convergem para o bom-senso da razão humana.
muitas pessoas pensam que programação é só pra quem fica o dia inteiro na frente do computador e tem facilidade para mexer na máquina.
já parou pra pensar na quantidade de coisas que estamos direta e indiretamente em contato e que são controladas por softwares
diferente do que muitos pensam, programação não é um monte de código que poucos conseguem entender. 
no fundo, programar é ensinar uma máquina a resolver problemas. 
sem perceber, todos nós resolvemos problemas e tomamos decisões o tempo todo
para programar, você precisa organizar e entender a forma como você resolve os problemas. 
você já toma decisões e realiza tarefas o tempo todo, programar nada mais é do que ensinar uma máquina a fazer isso.
programação é uma forma de automatizar decisões e atividades através de instruções que um equipamento eletrônico pode seguir para executar uma tarefa autonomamente.
ao entender este conceito, códigos que você achava que eram coisas de outro mundo começam a fazer sentido.
é verdade que é possível aprender programação sem saber inglês.
se você é iniciante e não sabe nada de programação, procure uma linguagem de programação que te ajude a aprender lógica de programação.
só depois de aprender o básico que você deve aprender uma outra linguagem mais profissional.
muitas pessoas já começam aprendendo lógica de programação com linguagens como java, c, python, c#,
então, para quem nunca programou antes, indico fortemente que comece com uma linguagem que o ajude aprender lógica de programação.
se o seu objetivo agora é aprender lógica de programação, começar no mundo do desenvolvimento de softwares, utilize uma linguagem que vai te ajudar a aprender lógica de programação
ou se você já domina lógica e quer aprender uma linguagem pra arrumar um emprego, pesquise no mercado a linguagem que está sendo mais pedida nas vagas de emprego atualmente e vá fundo nos estudos
se você quer criar um software embarcado para foguetes, sondas, satélites, mísseis, procure uma linguagem apropriada e mais usada para softwares embarcados.
o mercado muda, a linguagem da moda hoje pode não estar tão em alta amanhã. 
sempre que você decidir aprender uma linguagem nova de programação, pense no seu objetivo de curto, médio e longo prazo.
você deve aprender a modelar um roteiro que explica quando tomar decisões e quando realizar determinadas tarefas, esse roteiro é chamado de algoritmo.
você sabia que os primeiros processadores só sabiam realizar somas
a partir dessa operação básica que o computador sabia fazer, você já imagina um algoritmo para fazer multiplicações
talvez você ainda não saiba exatamente como é esse algoritmo, mas com certeza já imaginou que precisa fazer repetidas somas.
é assim que nós aprendemos fazer multiplicação na escola. 
e essa também é uma forma de ensinar uma máquina a fazer multiplicação.
programas de computador utilizam os recursos de hardware mais básicos para executar algoritmos. 
enquanto o processador executa os cálculos, a memória é responsável por armazenar dados e servi-los ao processador.
o recurso que nós utilizamos em nossos programas para escrever e ler dados da memória do computador é conhecido como variável, que é simplesmente um espaço na memória o qual reservamos e damos um nome.
por exemplo, podemos criar uma variável chamada idade para armazenar a idade de uma pessoa.
você pode imaginar uma variável como uma gaveta “etiquetada” em um armário.
chamamos este espaço alocado na memória de variável, porque o valor armazenado neste espaço de memória pode ser alterado ao longo do tempo, ou seja, o valor ali alocado é variável ao longo do tempo. 
diferente das constantes, que é um espaço reservado na memória para armazenar um valor que não muda com o tempo.
para otimizar a utilização da memória, nós definimos um tipo de dados para cada variável. 
por exemplo, a variável nome, deve armazenar textos, já a variável idade deve armazenar apenas números inteiros sem casa decimal, 
na variável sexo podemos armazenar apenas um caractere m ou f. 
seria correto armazenarmos o valor m na variável idade não né por isso devemos especificar em nossos algoritmos o tipo de cada variável.
podemos classificar os tipos de dados em basicamente duas categorias, os tipos de dados primitivos e os tipos de dados customizados.
existem quatro tipos de dados primitivos, algumas linguagens subdividem estes tipos de dados em outros de acordo com a capacidade de memória necessária para cada variável,
inteiro é  este é o tipo de dados para valores numéricos negativos ou positivos, sem casas decimais. por exemplo uma variável idade.
real é  este é o tipo de dados para valores numéricos negativos ou positivos, com casas decimais. por exemplo uma variável peso.
lógico é  este tipo de dados pode assumir apenas dois valores verdadeiro ou falso.  também é conhecido como booleano. 
booleano um bit na memória, onde o valor um representa verdadeiro e o valor zero representa falso.
texto é tipo de dados para variáveis que armazenam textos.
algumas linguagens de programação dividem esses tipos primitivos de acordo com o espaço necessário para os valores daquela variável. 
na linguagem java por exemplo, o tipo de dados inteiro é dividido em quatro tipos primitivos byte, short, int e long. 
a capacidade de armazenamento de cada um deles é diferente.
divisão é uma particularidade da linguagem de programação.
o objetivo é otimizar a utilização da memória.
em algumas linguagens de programação não é necessário especificar o tipo de dados da variável, eles são identificados dinamicamente.
é necessário informar o tipo de dados de cada variável em algoritmos.
a partir dos tipos de dados primitivos podemos criar outros tipos de dados utilizando uma combinação de variáveis.
são estruturas de dados, classes, vetores, matrizes, etc.
por exemplo, uma classe chamada carro é um tipo de dados que agrupa outras variáveis básicas como marca, cor, ano, modelo, etc.
um vetor é um agrupamento de variáveis do mesmo tipo, uma matriz é um agrupamento de vetores.
enfim, a base de todos os tipos de dados são os tipos de dados primitivos, independente da linguagem de programação.
claro, em programação orientada a objetos há todo um conceito para a criação de classes que, além de atributos também tem operações, o estudo de estruturas de dados também vai muito além de apenas formar tipos de dados a partir de outros.
são tipos de dados formatos a partir de outros tipos de dados.
diferente dos tipos de dados primitivos que já são implementados internamente pelas linguagens de programação, esses tipos de dados são criados pelo programador. 
saber como funcionam as variáveis/constantes e os tipos de dados é de suma importância para você se tornar um bom programador. 
olhe para qualquer objeto que esteja perto de você e identifique as suas características, para cada uma delas pense no tipo de dados que você utilizaria se fosse utilizar essa informação no seus software.
por exemplo, estou olhando agora para o meu notebook e identificando algumas características nele, ele tem cor texto, teclas caracteres, botões de mouse para click booleano, ou seja, pode ter dois estados clicado ou não clicado, tela acesa ou apagada.
da mesma forma que na matemática, os operadores de multiplicação e divisão têm precedência de execução em relação aos operadores de soma e subtração.
aliás se tiver parênteses na expressão estes têm precedência ainda maior.
então, enquanto os operadores aritméticos trabalham com números, os operadores lógicos trabalham com dados lógicos, ou booleanos.
a ideia dos operadores continua a mesma relacionar valores para resultar um outro valor.. 
os operadores lógicos relacionam valores lógicos verdadeiro falso
o operador e ou and resulta em um valor verdadeiro se os dois valores de entrada da operação forem verdadeiros, caso contrário o resultado é falso. 
o operador ou ou or resulta em um valor verdadeiro se ao menos um dos dois valores de entrada da operação for verdadeiro, caso contrário o resultado é falso. 
o operador não ou not é o único operador que recebe como entrada apenas um valor, e sua função é simplesmente inverter os valores  se o valor de entrada for verdadeiro, o resultado será falso e se o valor de entrada for falso, o resultado será verdadeiro.
o operador  não e ou nand é o contrário do operador e and, ou seja, resulta em verdadeiro, se ao menos um dos dois valores for falso, na verdade este é o operador e and seguido do operador não not
cada linguagem de programação tem uma forma de representar os operadores lógicos. 
algumas linguagens oferecem operadores lógicos para o nível de bit também chamado de operadores bitwise
podemos fazer operações lógicas com os bits de dois números. 
em todas as linguagens de programação existem símbolos para executarmos essas operações. 
as operações maior, menor, maior ou igual e menor ou igual na maioria das linguagens de programação 
mas os vilões dos iniciantes são os símbolos para testar igualdade e diferença.
em cada linguagem é de um jeito  em java, c, javascript por exemplo, os símbolos de igual e diferente 
fique esperto quando for aprender alguma dessas linguagens
em java não é possível testar strings textos com o operador de igualdade  pois string é uma classe e não um tipo primitivo, e para testar a igualdade entre objetos deve-se utilizar o método equals.
em algumas linguagens de programação python por exemplo é possível utilizar os operadores maior e menor para verificar a precedência alfabética de um texto em relação a outro.
se você entendeu o que são os operadores e como utilizamos eles na programação, está ótimo.
só queria te mostrar que os operadores são muito utilizados e não conhecer pelo menos o básico sobre os operadores pode comprometer o seu aprendizado de programação.
importante lembrar que do mesmo jeito que aprendemos os operadores aritméticos nas escola, para aprender os operadores relacionais e lógicos menos comuns é necessário bastante prática
o bloco de código senão é opcional. 
é comum encontrar instruções de decisão apenas com se-então sem o bloco senão.
a proposta do escolha caso é ser uma solução mais elegante para este caso. 
levando o fluxo do programa direto ao bloco de código correto igual o switch, dependendo do valor de uma variável de verificação essa é a estrutura escolha-caso.
nada melhor para aprender programação do que praticar. 
além das opções tratadas na estrutura, é possível identificar quando o valor da variável não é equivalente a nenhum valor informado como opção nos casos, ou seja, é um outrocaso
como você pôde observar, em termos de organização de código a estrutura escolha-caso é uma opção muito elegante quando se tem muitos se-então-senão para verificar a mesma variável.
facilitar a leitura do algoritmo e a manutenção do código.
também chamamos esta estrutura de repetição de loop pré-testado, pois a expressão booleana é verificada antes da primeira execução.
se inicialmente ela já resultar em falso, as instruções que estão dentro do bloco não são executadas nenhuma vez.
percebemos que é possível utilizar qualquer uma das duas estruturas para implementar loops,  porém cada uma é mais apropriada dependendo do problema.
uma vez que nesta estrutura não é necessário repetir um pedaço do código.
a decisão de qual estrutura utilizar entre as duas, sempre será tomada observando a diferença entre pré-testada e pós-testada.
aprenda muito bem os loops
as estruturas de repetição são muito utilizadas em desenvolvimento de softwares. 
entender como elas funcionam é muito importante para resolver problemas que precisam executar tarefas repetidas vezes. 
acredite, existem muitos para praticar a utilização da estrutura enquanto, 
as linguagens de programação são diferentes umas das outras,
mas no fundo a lógica de programação é a mesma quase sempre.
na linguagem java, não existe a estrutura repita até,mas existe a do while, ou seja faça enquanto. 
esta também é pós testada, mas o teste da condição não é o contrário da while do. pelo motivo óbvio faça enquanto o teste der verdadeiro
quando fazemos um algoritmo, muitas vezes já sabemos a quantidade de vezes que um loop deve executar. 
o caso mais usado deste tipo de loop na programação é quando você deve acessar todos os itens de um vetor, matriz ou lista.
uma situação muito comum para programadores  imagine que você deve enviar um e-mail para todos os clientes cadastrados no seu banco de dados... você sabe que tem uma tabela com tres mil clientes no seu banco de dados neste caso, você deve fazer um loop de um até tres mil
entendido o que é um loop pré definido, vejamos qual estrutura de repetição
embora seja possível utilizar estas estruturas de repetição para implementar um loop pré-definido, há uma estrutura criada especificamente para isto.
o que o para-faça faz é justamente implementar um contador implicitamente.
um algoritmo nao e a solucao de um problema, pois, se assim fosse, cada problema teria um
unico algoritmo. 
um algoritmo e um caminho para a solucao de um problema e, em geral, existem muitos caminhos 
que levam a uma solucao satisfatoria.
para resolver o mesmo problema pode se obter varios 
algoritmos diferentes. 
para resolver um problema no computador e necessario que seja primeiramente encontrada uma
maneira de descrever este problema de uma forma clara e precisa. 
e preciso que encontremos uma sequencia de passos que permitam que o problema possa ser resolvido
de maneira automatica e repetitiva.
esta sequencia de passos e chamada de algoritmo.
a nocao de algoritmo e central para toda a computacao.
a criacao de algoritmos para resolver os problemas e uma das maiores dificuldades dos iniciantes em
programacao em computadores 
o aprendizado da logica e essencial para a formacao de um bom programador, servindo como
base para o aprendizado de todas as linguagens de programacao, estruturadas ou nao. 
os algoritmos podem ser representados de varias formas, como por exemplo
atraves de uma lingua portugues, ingles, etc. forma utilizada nos manuais de instrucoes, nas
receitas culinarias, bulas de medicamentos, etc. 
os diagramas nassi-shneiderman, tambem conhecidos como diagramas de chapin, surgiram nos
anos setenta.
como uma maneira de ajudar nos esforcos da abordagem de programacao estruturada.
a ideia basica deste diagrama e representar as acoes de um algoritmo dentro de um unico retangulo.
subdividindo-o em retangulos menores, que representam os diferentes blocos de sequencia de acoes do
algoritmo.
os fluxogramas ou diagramas de fluxo, sao uma representacao grafica que utilizam formas
geometricas padronizadas ligadas por setas de fluxo, para indicar as diversas acoes instrucoes e
decisoes que devem ser seguidas para resolver o problema em questao. 
eles permitem visualizar os caminhos fluxos e as etapas de processamento de dados possiveis
e, dentro destas, os passos para a resolucao do problema.
o portugues estruturado, e uma forma especial de linguagem bem mais restrita que a lingua
portuguesa e com significados bem definidos para todos os termos utilizados nas instrucoes
comandos.
essa linguagem tambem e conhecida como portugol juncao de portugues com algol , pseudocodigo
ou pseudolinguagem.
o portugues estruturado na verdade e uma simplificacao extrema da lingua portuguesa, limitada a 
pouquissimas palavras e estruturas que tem significado pre-definido,  pois deve-se seguir um padrao. 
emprega uma linguagem intermediaria entre a linguagem natural e uma linguagem de programacao, 
para descrever os algoritmos. 
a sintaxe do portugues estruturado nao precisa ser seguida tao rigorosamente quanto a sintaxe
de uma linguagem de programacao, ja que o algoritmo nao sera executado como um programa.
embora o portugues estruturado seja uma linguagem bastante simplificada, ela possui todos os
elementos basicos e uma estrutura semelhante a de uma linguagem de programacao de computadores. 
sao chamadas de constantes, as informacoes dados que nao variam com o tempo, ou seja,
permanecem sempre com o mesmo conteudo, e um valor fixo invariavel. 
exemplos de constantes pode-se citar numeros, letras, palavras etc. 
o bom entendimento do conceito de variavel e fundamental para elaboracao de algoritmos e,
consequentemente de programas.
uma variavel, e um espaco da memoria do computador que reservamos para guardar informacoes dados.
como o proprio nome sugere, as variaveis, podem conter valores diferentes a cada instante de tempo,
ou seja, seu conteudo pode variar de acordo com as instrucoes do algoritmo. 
as variaveis sao referenciadas atraves de um nome identificador criado por voce durante o
desenvolvimento do algoritmo.
exemplos de nomes de variaveis produto, idade, a, x, nota um, peso, preco, etc.
o conteudo de uma variavel pode ser alterado, consultado ou apagado quantas vezes forem
necessarias durante o algoritmo.
mas, ao alterar o conteudo da variavel, a informacao anterior e
perdida, ou seja, sempre vale a ultima informacao armazenada na variavel.
uma variavel armazena apenas um conteudo de cada vez. 
uma variavel pode ser vista como uma caixa com um rotulo nome colado nela, que em um
dado momento guarda um determinado objeto.
o conteudo desta caixa nao e algo fixo, permanente.
na verdade, essa caixa pode ter seu conteudo alterado diversas vezes.
a atribuicao e uma notacao utilizada para atribuir um valor a uma variavel, ou seja, para armazenar um
determinado conteudo em uma variavel.
a operacao de atribuicao, normalmente, e representada por uma seta apontando para a esquerda, mas existem
outros simbolos para representar a atribuicao, depende da forma de representacao do algoritmo.
existem basicamente duas instrucoes principais em algoritmos e em programacao em geral que sao escrever e ler.
a instrucao escrever e utilizada quando deseja se mostrar informacoes na tela do computador, ou seja, e um comando 
de saida de dados.
para simplificar, usa-se a instrucao escrever, quando necessita se mostrar algum dado para o usuario do algoritmo 
e posteriormente do programa. 
tanto no diagrama de chapin quanto em portugues estruturado representa se a saida de dados
atraves da palavra escrever ou escreva.
ja em fluxogramas a representacao da saida de dados e feita atraves de uma forma geometrica especifica
quando queremos escrever alguma mensagem na tela letra, frase, numero etc. literalmente, devemos utilizar aspas para 
identificar o que sera escrito, pois o que estiver entre aspas no algoritmo, sera exatamente o que aparecera na tela do computador
diferente de quando queremos escrever o conteudo de uma variavel, pois neste caso nao utiliza se aspas. 
muitas vezes, ao desenvolvermos algoritmos, e comum utilizarmos expressoes matematicas para a
resolucao de calculos.
a instrucao ler e utilizada quando deseja se obter informacoes do teclado do computador, ou
seja, e um comando de entrada de dados.
para simplificar, se usa a instrucao ler, quando se necessita que o usuario do algoritmo digite algum dado 
e posteriormente do programa. 
tanto no diagrama de chapin quanto em portugues estruturado se representa a entrada de
dados atraves da palavra ler ou leia.
em fluxogramas a representacao da entrada de dados e feita atraves de uma forma geometrica especifica
para o desenvolvimento de algoritmos que possuam calculos matematicos, as expressoes aritmeticas
devem estar horizontalizadas, ou seja, linearizadas e tambem nao esquecendo de utilizar os operadores
corretamente.
as expressoes matematicas na forma horizontalizada nao sao apenas utilizadas em algoritmos,
mas tambem na maioria das linguagens de programacao. 
uma estrutura de selecao, como o proprio nome ja diz, permite que determinadas instrucoes sejam
executadas ou nao, dependendo do resultado de uma condicao teste, ou seja, o algoritmo vai ter mais de
uma saida, uma opcao que sera executada de acordo com o teste realizado. 
quando estivermos utilizando algoritmos com selecao, podemos utilizar dois tipos de estruturas
diferentes, dependendo do objetivo do algoritmo, chamadas de selecao multipla, cujos tipos sao estrutura 
aninhada e estrutura concatenada
a estrutura de selecao aninhada normalmente e utilizada quando estivermos fazendo varias
comparacoes testes sempre com a mesma variavel. 
esta estrutura e chamada de aninhada porque na sua representacao tanto em chapin quanto em portugues estruturado
fica uma selecao dentro de outra selecao. 
a estrutura de selecao concatenada normalmente e utilizada quando estivermos comparando testando variaveis diferentes,
ou seja, independentes entre si.
esta estrutura e chamada de concatenada porque na sua representacao tanto em chapin quanto em portugues estruturado as
selecoes ficam separadas uma da outra nao existe o lado falso do chapin, ou o senao do portugues.
operacoes relacionais sao as comparacoes permitidas entres valores, variaveis, expressoes e
constantes.
os operadores logicos permitem que mais de uma condicao seja testada em uma unica expressao, ou
seja, se pode fazer mais de uma comparacao teste ao mesmo tempo.
os operadores logicos ja ordenados de acordo com suas
prioridades, ou seja, se na mesma expressao tivermos o operador ou e o operador nao, por exemplo,
primeiro devemos executar o nao e depois o ou. 
existem tres estruturas basicas para a construcao de algoritmos, que sao algoritmos sequenciais, algoritmos com selecao 
e algoritmos com repeticao. 
uma estrutura de repeticao permite que uma sequencia de instrucoes comandos seja
executada varias vezes, ate que uma condicao teste seja satisfeita, ou seja, repete-se um conjunto de
instrucoes sem que seja necessario escreve las varias vezes.
as estruturas de repeticao tambem sao chamadas de lacos ou loops 
para sabermos quando utilizar uma estrutura de repeticao, basta analisarmos se uma instrucao
ou uma sequencia de instrucoes precisa ser executada varias vezes, se isto se confirmar, entao deve-se
utilizar uma estrutura de repeticao.
as estruturas de repeticao, assim como a de decisao selecao, envolvem a avaliacao de uma condicao teste.
entao as estruturas de repeticao permitem que um trecho do algoritmo conjunto de instrucoes seja repetido 
um numero determinado ou indeterminado de vezes
sem que o codigo correspondente, ou seja, as instrucoes a serem repetidas tenham que ser
escritas mais de uma vez 
existem tres tipos de estruturas de repeticao repita ate, enquanto faca e para ate faca
cada uma com suas peculiaridades e apropriada para cada problema, normalmente e possivel resolver
um mesmo problema usando qualquer uma das estruturas de repeticao, mas, na maioria das situacoes,
havera uma mais adequada. 
na estrutura repita ate as instrucoes a serem repetidas sao executadas, no minimo uma vez, ja que o
teste a condicao fica no final da repeticao
nesta estrutura, a repeticao e finalizada quando o teste for verdadeiro v , ou seja, o algoritmo fica
executando as instrucoes que estiverem dentro do laco ate que o teste seja verdadeiro
na estrutura enquanto faca as instrucoes a serem repetidas podem nao ser executadas nenhuma vez,
pois o teste fica no inicio da repeticao, entao a execucao das instrucoes que estao \"dentro\" da
repeticao depende do teste.
nesta estrutura, a repeticao e finalizada quando o teste e falso f, ou
seja, enquanto o teste for verdadeiro as instrucoes serao executadas e, quando for falso, o laco e
finalizado.
a estrutura de repeticao para ate faca e um pouco diferente das outras duas repita ate e enquanto faca, pois possui uma variavel de controle, 
ou seja, com esta estrutura e possivel executar um conjunto de instrucoes um numero determinado de vezes.
atraves da variavel de controle, se define a quantidade de repeticoes que o laco fara. 
um contador e utilizado para contar o numero de vezes que um evento uma instrucao ocorre, ou seja,
contar a quantidade de vezes que uma instrucao e executada. 
em muitos algoritmos surge a necessidade de determinarmos qual o maior ou o menor valor dentro de
um conjunto de valores e, para isto, nao existe uma estrutura especial, apenas utilizamos os
conhecimentos que ja aprendemos, como mostrado no exemplo a seguir. 
assim como vimos que e possivel ter uma selecao dentro de outra, tambem podemos ter uma
repeticao dentro de outra, dependendo do problema a ser resolvido. 
pode ser necessaria uma estrutura de repita dentro de um enquanto, por exemplo, ou vice-versa
ou um repita dentro de outro repita, enfim, as combinacoes sao inumeras. 
a seguir veremos um exemplo de uma estrutura de repeticao 
para dentro de outro para, que e bastante utilizado para leitura e escrita de matrizes, por exemplo.
podemos definir um vetor como uma variavel dividida em varios pedacos, em varias casinhas,
onde cada pedaco desses e identificado atraves de um numero, referente a posicao de uma determinada
informacao no vetor em questao. 
o numero de cada posicao do vetor e chamado de indice
vetor e um conjunto de variaveis, onde cada uma pode armazenar uma informacao
diferente, mas todas compartilham o mesmo nome.
sao associados indices a esse nome, que
representam as posicoes do vetor, permitindo assim, individualizar os elementos do conjunto. 
para ler um vetor, ou seja, para preencher um vetor com informacoes dados armazenar
informacoes em um vetor e necessaria uma estrutura de repeticao, pois um vetor possui varias
posicoes e temos que preencher uma a uma.
a estrutura de repeticao normalmente utilizada para vetores e o para ate faca.
para escrever um vetor, ou seja, para escrever o conteudo de cada posicao de um vetor, tambem
precisamos utilizar uma estrutura de repeticao, ja que os vetores possuem mais de um conteudo mais
de uma posicao.
normalmente se utiliza a estrutura para ate faca tambem para escrever o vetor. 
programacao de computadores e uma atividade que vem se desenvolvendo ha mais de quarenta
anos desde o surgimento das primeiras linguagens de programacao. 
inicialmente, se aprendia a programar se utilizando a propria linguagem como ferramenta.
a linguagem fortran, criada em mil novecentos e cinquenta e quatro, e com seu primeiro 
compilador em mil novecentos e cinquenta e sete, foi durante muito tempo utilizada com este fim,
inclusive no brasil.
nas decadas de sessenta e setenta, com o aparecimento de algumas outras linguagens, o
fluxograma, um metodo grafico que hoje esta em desuso, foi grandemente utilizado em
complemento ao anterior.
hoje em dia, depois de centenas de linguagens de programacao criadas
e de varios metodos para se representar a solucao de problemas, se aprende a programar
construindo e desenvolvendo algoritmos. 
na disciplina algoritmos, voce vai aprender os passos basicos e as tecnicas para construcao de algoritmos
e programas, utilizando dois metodos para sua representacao
se espera que com isso ao fim de um periodo de quatro meses, voce tenha
adquirido a capacidade de transformar qualquer problema de media complexidade e extensao em
um algoritmo de boa qualidade
conceitos basicos sobre construcao de algoritmos e tecer breves consideracoes sobre os dois componentes do sistema 
de computacao ou de processamento eletronico de dados o hardware e o software.
dados sao elementos brutos que podem ser processados por um computador digital para
se obter alguma conclusao ou resultado, ou seja, uma informacao. 
computador digital maquina hardware muito rapida que pode processar dados, realizando calculos e operacoes repetitivas, 
se dotadas de programacao adequada software, e que fornece resultados corretos e precisos.
informacao e o resultado do processamento dos dados pelo computador. 
uma informacao pode ser considerada como dado para outro processamento e, por isso, muitas
vezes e referenciada como dado de saida. 
hardware e um termo de origem americana que engloba todo o equipamento principal e
periferico de um computador.
o termo e utilizado tambem para equipamentos sem software.
o hardware, normalmente, e fixo e dificil de ser modificado. 
software e um outro termo de origem americana que engloba programas, documentacao, procedimentos e dados, utilizados 
em um computador para resolucao de um determinado problema
o software, ao contrario do hardware, e maleavel e por isso mais facilmente modificavel pelo programador, para adaptacao a 
novos dados, novos requisitos do problema a ser resolvido, ou novo hardware onde vai funcionar ser executado. 
programa de computador sequencia de instrucoes nao ambigua e finita em uma linguagem de programacao especifica que, quando executada, 
resolve um problema determinado. 
linguagem de maquina e a linguagem binaria composta de zeros e uns utilizada pelos computadores, para representar dados, programas e informacoes
e tediosa, dificil de se compreender e facil de gerar erros na programacao. 
linguagem assembler e uma linguagem particular para cada processador computador, que codifica as instrucoes em linguagem de maquina e 
facilita um pouco o trabalho do programador.
e tambem considerada uma linguagem de baixo nivel, mas ainda hoje e utilizada. 
linguagem de programacao de terceira geracao tambem chamada de linguagem de alto nivel, engloba todas as linguagens de programacao 
que utilizam compiladores ou interpretadores.
possuem instrucoes mais poderosas que a linguagem assembler, facilitando ainda mais o trabalho do programador. 
linguagem de programacao de quarta geracao sao linguagens nao procedurais, utilizadas para sistemas de gerenciamento de banco de dados, 
planilhas e outros aplicativos que utilizam comandos mais poderosos ainda que as linguagens de terceira geracao e, por isso, sao
ainda mais faceis de programar.
compilador e um programa utilizado para traduzir os programas escritos pelo programador nas linguagens de alto nivel programa fonte para a 
linguagem de maquina programa executavel, a fim de poder ser executado pelo computador. 
interpretador e um programa que traduz os programas escritos pelo programador para a
linguagem de maquina, 
no momento da execucao nao existindo assim o programa executavel. 
o hardware de um computador, segundo a arquitetura basica de von neumann, e
composto de tres elementos principais
a unidade central de processamento 
a memoria principal
os dispositivos de entrada e saida de dados
a mp e o elemento que armazena os programas, os dados e as informacoes resultados
durante a execucao de um programa. 
cada posicao da memoria possui um endereco e um conteudo
ao ser desligado o computador, todo o conteudo da memoria principal e perdido. 
os perifericos, ou dispositivos de entrada e saida, como sugere o nome, sao responsaveis
pela entrada de dados para ucp mp e a saida de informacoes da ucp mp. 
o conceito central da programacao e da ciencia da computacao e o conceito de
algoritmos, isto e, programar e basicamente construir algoritmos. 
e a descricao, de forma logica, dos passos a serem executados no cumprimento de
determinada tarefa. 
o algoritmo pode ser usado como uma ferramenta generica para representar a solucao de
tarefas independente do desejo de automatizar
mas em geral esta associado ao processamento eletronico de dados, onde representa o rascunho para programas software
serve como modelo para programas, pois sua linguagem e intermediaria a linguagem humana e as linguagens de programacao
sendo entao, uma boa ferramenta na validacao da logica de tarefas a serem automatizadas. 
um algoritmo e uma receita para um processo computacional e consiste de uma serie de operacoes primitivas, interconectadas
devidamente, sobre um conjunto de objetos
os objetos manipulados por essas receitas sao as variaveis.
algoritmo pode ter varios niveis de abstracoes de acordo com a necessidade de representar ou encapsular detalhes inerentes as 
linguagens de programacao. 
como qualquer modelo, um algoritmo e uma abstracao da realidade
a abstracao e o processo de identificar as propriedades relevantes do fenomeno que esta sendo modelado. 
usando o modelo abstrato, podemos nos centrar unicamente nas propriedades relevantes para nos, dependendo da finalidade da
abstracao, e ignorar as irrelevantes. 
e a forma pela qual descrevemos solucoes de problemas do nosso mundo, afim de, serem implementadas utilizando os recursos do mundo computacional.
como este possui severas limitacoes em relacao ao nosso mundo, exige que, sejam impostas algumas regras basicas na forma de solucionar os problemas, 
para que, possamos utilizar os recursos de hardware e software disponiveis.
pois, os algoritmos, apesar de servirem para representar a solucao de qualquer problema, no caso do processamento de dados
eles devem seguir as regras basicas de programacao para que sejam compativeis com as linguagens de programacao. 
um algoritmo e formalmente uma sequencia finita de passos que levam a execucao de uma tarefa.
podemos pensar em algoritmo como uma receita, uma sequencia de instrucoes que dao cabo de uma meta especifica.
estas tarefas nao podem ser redundantes nem subjetivas na sua definicao, devem ser claras e precisas.
como exemplos de algoritmos podemos citar os algoritmos das operacoes basicas adicao, multiplicacao, divisao e subtracao de numeros reais decimais
 outros exemplos seriam os manuais de aparelhos eletronicos, como um videocassete, que explicam passo a passo
como, por exemplo, gravar um evento.
de um modo informal, um algoritmo e um procedimento computacional bem definido que toma como parametro de entrada um valor ou um conjunto de valores
e que produz como saida um valor ou um conjunto de valores. 
ou seja, e uma sequencia de passos computacionais que transformam um input no output.
sob um outro ponto de vista um algoritmo e uma ferramenta que permite resolver um problema computacional especifico. 
um algoritmo e a descricao de um padrao de comportamento, expresso em termos de um repertorio bem definido e finito de acoes primitivas, as quais 
damos por certo que podem ser executadas
os algoritmos podem ser representados de diversas formas, a saber
em uma lingua portugues, ingles e utilizado nas receitas, instrucoes , etc.  
para solucao de problemas em computacao apresenta um inconveniente a ambiguidade de alguns termos.
uma linguagem de programacao pascal, cobol, c, etc. e utilizada por alguns programadores ja experientes,
porem apresenta alguns inconvenientes utiliza apenas as instrucoes existentes na linguagem especifica e e muito detalhada nas preocupacoes com a sintaxe,
desviando a atencao do programador da solucao do problema em si. 
representacoes graficas sao bastante recomendaveis ja que um desenho muitas substitui, com vantagem, mil palavras
os algoritmos sao descritos em uma linguagem chamada pseudo do codigo
este nome e uma alusao a posterior implementacao em uma linguagem de programacao, ou seja, quando formos programar em uma linguagem, por exemplo visual basic.
por isso os algoritmos sao independentes das linguagens de programacao. 
ao contrario de uma linguagem de programacao nao existe um formalismo rigido de como deve ser escrito o algoritmo
o algoritmo deve ser facil de se interpretar e facil de codificar
ou seja, ele deve ser o intermediario entre a linguagem falada e a linguagem de programacao
utilizaremos em nosso curso um pseudo do codigo que chamaremos de nosso pseudo do codigo. 
existem varias pseudo linguagens de programacao como mostra a referencia que utiliza o portugol portugues, para o estudo dos algoritmos.
um algoritmo e uma sequencia logica de acoes a serem executadas para se executar uma determinada tarefa
um programa e a formalizacao de um algoritmo em uma determinada linguagem de programacao
segundo suas regras de sintaxe e semantica, de forma a permitir que o computador possa entender a sequencia de acoes. 
conjunto de simbolos comandos, identificadores, caracteres etc, e regras de sintaxe que permitem a construcao de sentencas que descrevem de forma
precisa acoes compreensiveis e executaveis para o computador. 
uma linguagem de programacao e uma notacao formal para descricao de algoritmos que
serao executados por um computador. 
como todas as notacoes formais, uma linguagem de programacao tem dois componentes sintaxe e semantica
a sintaxe consiste em um conjunto de regras formais, que especificam a composicao de programas a partir de letras, digitos, e outros simbolos
por exemplo, regras de sintaxe podem especificar que cada parenteses aberto em uma expressao aritmetica deve corresponder a um parenteses fechado,
e que dois comandos quaisquer devem ser separados por um ponto e virgula.
as regras de semantica especificam o significado de qualquer programa, sintaticamente valido, escrito na linguagem. 
embora seja teoricamente possivel a construcao de computadores especiais, capazes de
executar programas escritos em uma linguagem de programacao qualquer
 os computadores, existentes hoje em dia sao capazes de executar somente programas em linguagem de baixo nivel,
a linguagem de maquina
atraves da traducao de programas escritos em linguagens de alto nivel para a linguagem de baixo nivel do computador. 
para isso existem tres tipos de programas tradutores montadores, interpretadores e compiladores. 
compilador efetua a traducao de todo o codigo fonte em linguagem de alto nivel para as instrucoes correspondentes em linguagem de maquina, gerando 
o codigo objeto do programa.
em seguida e necessario o uso de um outro programa que e responsavel pela juncao de diversos codigos objeto em um unico programa executavel. 
os resultados gerados pelo processamento do programa devem estar corretos, caso contrario o programa simplesmente nao tem sentido. 
clareza refere a facilidade de leitura do programa.
se um programa for escrito com clareza, devera ser possivel a outro programador seguir a logica do programa sem muito esforco, assim
como o proprio autor do programa entende-lo apos ter estado um longo periodo afastado dele. 
simplicidade a clareza e precisao de um programa sao normalmente melhoradas tornando as coisas o mais simples possivel, consistentes com os objetivos do programa.
muitas vezes torna necessario sacrificar alguma eficiencia de processamento, de forma a manter a estrutura do programa mais simples. 
eficiencia refere a velocidade de processamento e a correta utilizacao da memoria. 
um programa deve ter performance suficiente para atender as necessidade do problema e do usuario
bem como deve utilizar os recursos de memoria de forma moderada, dentro das limitacoes do problema. 
modularizacao durante a fase de projeto, a solucao do problema total vai sendo fatorada em solucoes de subproblemas, 
o que permite geralmente dividir o problema em forma natural em modulos com subfuncoes claramente delimitadas, que podem ser implementados separadamente
por diversos programadores de uma equipe
ou seja, a modularizacao consiste no particionamento do programa em modulos menores bem identificaveis e com funcoes especificas, 
de forma que o conjunto desses modulos e a interacao entre eles permite a resolucao do
problema de forma mais simples e clara. 
generalidade e interessante que um programa seja tao generico quanto possivel de forma a permitir a reutilizacao de seus componentes em outros projetos. 
utilizaremos em nosso curso uma pseudolinguagem de programacao chamada portugol, cujo objetivo e obter-se uma notacao para algoritmos a ser
utilizada na definicao, na criacao, no desenvolvimento e na documentacao de um programa, e nao criar mais uma linguagem de programacao. 
uma constante, como sugere o nome, e um identificador que armazena um valor fixo e imutavel, durante a execucao de um algoritmo ou programa
podemos associar a uma posicao de memoria que tem um conteudo fixo
este conteudo podera ser um numero, uma cadeia de caracteres ou um valor logico
uma variavel e um identificador que, como sugere o nome, possui o conteudo variavel durante a execucao de um algoritmo ou programa. 
podemos associar uma variavel a uma posicao da memoria e poderemos armazenar neste endereco qualquer valor do conjunto de valores de um tipo
basico associado a ela
uma variavel pode assumir varios valores diferentes ao longo da execucao do programa, mas, em um determinado momento, possui apenas um valor. 
unidades basicas de armazenamento das informacoes a nivel de linguagens de programacao.
os tipos de dados e variaveis utilizados dependem da finalidade dos algoritmos, mas, podemos definir alguns, pelo fato de serem largamente utilizados e
implementados na maioria das linguagens, pode ser, inteiro, real, caracter.
string, uma variavel deste tipo podera armazenar uma cadeia de caracteres de qualquer tamanho
caso seja imprescindivel para o entendimento pode acrescentar, entre parenteses, a quantidade maxima de caracteres. 
boolean, tipo especial de variavel que armazena apenas os valores v e f, onde v representa verdadeiro e falso. 
consiste na definicao dos nomes e valores das constantes e dos nomes e tipos das variaveis que serao utilizadas pelos algoritmos, previamente a sua utilizacao, incluindo
comentario, quando se fizerem necessarios. 
na maioria das linguagens de programacao, quando o computador esta executando um programa e encontra uma referencia a uma variavel ou a uma constante qualquer, se esta nao
tiver sido previamente definida, ele nao sabera o que fazer com ela.
da mesma forma, um programador que estiver implementando um algoritmo, em alguma linguagem de programacao, 
tera o seu trabalho simplificado se todas as constantes e variaveis referenciadas no algoritmo tiverem sido previamente declaradas.
as constantes sao declaradas antes das variaveis
o significado da declaracao de variaveis corresponde a criacao de locais na memoria rotulada com o nome da variavel e marcada com o tipo de valores que ela pode conter. 
para que os programas manipulem valores, estes devem ser armazenados em variaveis e para isso, devemos declarar de acordo com a sintaxe 
palavras reservadas, sao palavras que terao uso especifico no nosso pseudo do codigo e que nao deverao ser usadas como identificadores, para nao causar confusao na interpretacao.
comando simples, e uma instrucao simples, leia x.
comando composto, um grupo de comandos simples que executam alguma tarefa.
na solucao da grande maioria dos problemas e necessario que as variaveis tenham seus valores consultados ou alterados e, para isto, devemos definir um conjunto de operadores,
sendo eles
no algoritmo e preciso representar a troca de informacoes que ocorrera entre o mundo da maquina e o nosso mundo, para isso,
devemos utilizar comandos de entrada e saida, sendo que, a nivel de algoritmo esses comandos representam apenas a entrada e a saida da informacao,
independe do dispositivo utilizado
mas, sabemos que nas linguagens de programacao essa independencia nao existe, ou seja, nas linguagens de
programacao temos comandos especificos para cada tipo de unidade de entrada saida. 
para que possamos obter dados do meio exterior para uso do computador (memoria principal),
estes tem de vir atraves dos dispositivos de entrada.
da mesma forma, as informacoes que sao produzidas, tem de ser levadas ao meio externo atraves de um dispositivo de saida. 
comando leia le, do meio externo, a proxima informacao disponivel para leitura e armazena na variavel discriminada apos o comando, entre parenteses
mais tarde aprenderemos como especificar a leitura de um dado que esta armazenado em um arquivo e de que arquivo esta sendo lido o dado. 
comando imprima na tela ou na impressora o conteudo da variavel especificada apos o comando, entre parenteses
nao sera preocupacao nossa a formatacao de relatorios, mas o comando permite a impressao de texto (entre ), se for necessaria para clareza ou especificacao do que esta sendo impresso
 -as estruturas de controle introduzidas nesta unidade facilitarao a expressao de algoritmos e
permitirao que exemplos mais significativos sejam apresentados e propostos, visando o
aperfeicoamento do desenvolvimento do processo de aprendizado da construcao de algoritmos. 
o diagrama tradicional e uma forma padronizada para representar os passos logicos de
um determinado processamento. 
com o diagrama podemos definir uma sequencia de simbolos, com significado bem
definido, portanto, sua principal funcao e a de facilitar a visualizacao dos passos de um
processamento. 
alguns principios basicos abaixo mencionados, deverao ser usados desde a criacao do
primeiro algoritmo
 -ao criar as constantes e variaveis, utilizar nomes significativos e comentar, se necessario for
 -utilizar indentacao, para mostrar a estrutura logica e sequencia de comandos, quando usando o nosso pseudo do codigo. 
com o dns nao e preciso
utilizar, opcionalmente, um dicionario de dados que especifique formalmente o conteudo
de cada constante e variavel de todo algoritmo ou programa
utilizar parenteses para evitar ambiguidade nas expressoes
sequencia, grupo de comandos em que sao executados um apos o outro
selecao, tambem chamada de estrutura de decisao ou de processamento condicional, a estrutura
de selecao e utilizada quando a execucao de um comando depende de um teste anterior
a selecao pode ser simples ou composta. 
selecao simples, quando a execucao de um comando depender de uma condicao verdadeira, e nao ha comandos a executar se a condicao for falsa. 
selecao composta, quando se executa um comando se uma condicao e verdadeira, e se executa um outro comando  se a condicao e falsa. 
a estrutura de selecao permite o aninhamento, ou seja, o comando a ser executado dentro de uma selecao pode ser uma outra selecao.
outro aninhamento podera ocorrer tambem com esta ultima selecao e assim por diante.
nos casos de varios aninhamentos subsequentes, uma boa indentacao sera fundamental para o entendimento de
algoritmo quando utilizando pseudo do codigo. 
a estrutura de repeticao e utilizada quando um conjunto de comandos deve ser
executado repetidamente, enquanto uma determinada condicao permanecer verdadeira.
dependendo do resultado do teste da condicao, o conjunto de comandos podera nao
ser executado nem uma vez, ou sera executado varias vezes. 
isso se chama um laco
da mesma forma que a estrutura de selecao, ela permite o aninhamento de repeticoes, ou
seja, a existencia de uma estrutura de repeticao dentro de outra
 poderao haver tambem aninhamentos de selecoes dentro de estruturas repetitivas e vice e versa. 
dois cuidados ao criar estruturas de repeticao enquanto
inicializar a variavel que controla o laco antes do inicio do laco
inicializar a variavel que controla o laco dentro do laco, pois se isto nao for feito cairemos no que chamamos um laco infinito e de la o
nosso programa nao saira.
quando se deseja executar a serie de comandos uma vez pelo menos, pode se fazer o
teste no final.
essa variacao tem um uso bastante efetivo na validacao de dados de entrada, pelo
teclado, mas pode ser sempre substituida por um enquanto
 uma vantagem do repita e que nao e preciso inicializar a variavel de controle do laco antes de entrar no mesmo.
deve se, contudo, ter o cuidado de modificar dentro do laco para que nao caiamos em um laco infinito.
executa uma instrucao e faz um teste logico
dependendo da resposta, fica repetindo o processo ate o teste logico dar verdadeiro. 
escape do laco abandone, forca uma saida de um laco de repeticao.
o comando abandone so tem sentido dentro de um comando de repeticao 
quando o abandone e encontrado, o proximo
comando a ser executado e o primeiro comando logo apos o fim do comando de repeticao
mais interno onde aparece o abandone.
o sinalizador ou flag e um valor que, quando lido, sinaliza a saida de um laco, o fim de um
programa, o fim de uma lista de dados, ou o fim de um arquivo. 
as variaveis podem ter seus valores alterados durante a execucao do algoritmo, isto e feito
atraves de uma operacao chamada atribuicao. 
em uma atribuicao temos dois elementos fundamentais o primeiro e o elemento para o qual estaremos realizando a atribuicao e o segundo elemento e o que
nos fornece o valor a ser atribuido
o primeiro elemento e sempre uma variavel e o segundo e uma expressao 
o tipo da variavel deve ser respeitado durante uma atribuicao, ou seja, a variavel deve ser
compativel com o valor a ser atribuido.
 inicialmente o valor a ser atribuido a variavel pode
vir de outra variavel ou de uma expressao. 
quando juntamos varios operadores, operandos e funcoes temos uma expressao. 
tambem podem ser de tres tipos aritmeticas, logicas e literais 
operacoes com mesma prioridade sao executadas da esquerda para a direita
para modificar a ordem de prioridades da pre definida, utiliza parenteses.
as operacoes entre parenteses devem ser avaliadas em primeiro lugar.
quando uma variavel ou expressao aritmetica puder assumir varios
valores diferentes, e a execucao do programa for diferente dependendo do valor obtido ou
assumido por esta variavel ou expressao, poderemos utilizar a estrutura que se segue, ao inves
de varios se aninhados. 
um vetor ou agregado homogeneo, ou ainda variavel composta homogenea, e uma estrutura
de dados que contem elementos de mesmo tipo, que podem ser referenciados como um todo
 ao declararmos um vetor, estamos reservando na memoria principal do computador uma serie de
celulas para uso da variavel daquele tipo. 
o nome do vetor aponta para a base das celulas e o seu inicio da a posicao relativa do elemento referenciado ao primeiro 
nem sempre os tipos basicos sao suficientes para exprimir
estruturas de dados em algoritmos. 
por exemplo consideremos um problema em que um professor com cinco alunos deseja imprimir a nota e a media de seus alunos
nesse caso seria necessario se considerar cinco variaveis reais para contar as notas dos cinco alunos. 
 imagine que o numero de alunos da turma seja oitenta.
 so a declaracao destas variaveis tornaria impraticavel a
redacao do algoritmo.
dai a necessidade de novos tipos serem criados
 um destes tipos, o vetor, sera estudado. 
os vetores podem ser unidimensionais ou multidimensionais 
um vetor unidimensional, como uma lista de notas dos cinquenta alunos de uma turma, tem apenas um indice
se existirem porem varias turmas poderemos utilizar um vetor com dois indices
cada elemento de um vetor e tratado como se fosse uma variavel simples. 
 para referencia a um
elemento do vetor, utiliza-se o nome do vetor e a identificacao do elemento entre
colchetes
matrizes, conjunto de dados referenciados por um mesmo nome e que necessita de mais de
um indice para ter seus elementos individualizados.  
quando temos mais de uma dimensao entao utilizamos as matrizes, que de diferente no
uso e na declaracao so tem estas dimensoes a mais explicitas 
o numero de dimensoes da matriz sera igual ao numero de virgulas da declaracao
mais um
o numero de elementos e igual ao produto do numero de elementos de cada
dimensao
para referenciar um elemento da matriz sao necessarios tantos indices quantas sao as dimensoes
da matriz. 
numa matriz bidimensional o primeiro indice indica a linha e o segundo, a coluna
para matrizes com tres dimensoes, repete-se a estrutura bidimensional tantas vezes quantos sao
os elementos da terceira dimensao, numerando as  de acordo com os limites especificados na
declaracao de tipo. 
um algoritmo pode ser definido como uma sequencia finita de passos para resolver um determinado problema
sempre que desenvolvemos um algoritmo estamos estabelecendo um padrao de comportamento que devera ser seguido
para alcancar o resultado de um problema
um algoritmo quando programado num computador e constituido pelo menos das tres
partes, sendo elas, entrada, processamento e saida de dados.
na parte de entrada, sao fornecidas as informacoes necessarias para que o algoritmo possa ser executado
estas informacoes podem ser fornecidas no momento em que o programa esta sendo executado ou podem estar embutidas dentro do mesmo.
na parte do processamento sao avaliadas todas as expressoes algebricas, relacionais e logicas, assim como todas as estruturas de controle existentes no algoritmo
na parte de saida, todos os resultados do processamento sao enviados para um ou mais dispositivos de saida, como, monitor, impressora, ou ate mesmo
a propria memoria do computador.
os fluxogramas sao uma apresentacao do algoritmo em formato grafico
 cada acao ou situacao e representada por uma caixa
tomadas de decisoes sao indicadas por caixas especiais, possibilitando ao fluxo de acoes tomar caminhos distintos.
o inicio e o fim do algoritmo sao marcados com uma figura eliptica as acoes a serem executadas estao
em retangulos
sendo que as estruturas de controle condicionais estao em losangos
e indicam duas possibilidades de prosseguimento do algoritmo, uma para o caso da
expressao avaliada ser verdadeira e outra para o caso de ser falsa
qualquer tipo de informacao que deva ser transferida, processada ou armazenada
deve estar na forma de uma linguagem.
a linguagem e imprescindivel para o processo de comunicacao. 
duas pessoas que se falam o fazem atraves de uma linguagem
em comum, a linguagem natural.
da mesma forma, duas maquinas trocam informacao por uma linguagem, que neste caso mais tecnico e restrito, se chama protocolo.
do mesmo modo, um computador armazena suas instrucoes em codigo de maquina. 
estas diferentes linguagens nao podem ser traduzidas diretamente entre si, pois alem de
serem representadas de modos diferentes
para que um ser humano possa programar, armazenar e buscar informacoes num
computador
e necessario que saiba instrui-lo na sua linguagem de maquina ou numa
linguagem intermediaria, uma linguagem de programacao, que possa ser facilmente
traduzida para o computador
a linguagem natural e a maneira como expressamos nosso raciocinio e trocamos informacao
como e a expressao da cultura de uma sociedade, desenvolvida atraves das
geracoes e em diferentes situacoes
raramente constitui um sistema de regras rigidas
que possa ser implementada numa maquina ou que possa ser transcrita logicamente.
alem da linguagem falada, fazem parte da nossa comunicacao gestos e posturas, que
nao podem ser diretamente adaptados para compreensao de uma maquina
 por fim,
toda a comunicacao eficiente pressupoe um conhecimento previo comum entre os interlocutores, 
por exemplo a mesma lingua, a mesma bagagem cultural e assim por diante.
ao contrario dos seres humanos, as maquinas sao projetados para executar tarefas bem determinadas a partir de determinadas instrucoes
um computador nao e por si so uma maquina inteligente no sentido que nao
pode aprender com a propria experiencia para melhorar seu comportamento futuro
ao contrario, um computador e somente capaz de realizar estritamente as tarefas que
lhe forem delegadas e que facam parte do conjunto daquelas acoes que ele pode executar
alem do fato de o computador necessitar que lhe instruam com acoes bem especificas,
estas acoes devem ser passadas para o computador numa linguagem que ele possa
entende-las, chamada linguagem de maquina
esta linguagem e composta somente por numeros, representados de forma binaria, que, sob o ponto de vista do computador, representam as operacoes e 
os operandos que serao usados no processamento do programa
para um ser humano, a linguagem de maquina e dificilima de se compreender
 assim, existe uma linguagem representada por comandos mas que reproduz
as tarefas que serao executadas dentro do computador, a linguagem de montagem
entretanto, mesmo a linguagem de montagem e dificil de programar e os
programas feitos para um determinado processador 
por conterem instrucoes especificas deste, nao funcionarao em um processador de outro tipo
com ilustracao, abaixo e mostrado o inicio de um programa que escreve a frase
ola mundo no monitor
 na coluna da esquerda esta o endereco relativo de memoria,
na coluna do centro o programa escrito em linguagem de maquina e na coluna da
direita a representacao em caracteres ascii
. teoricamente, o programa poderia ser
escrito diretamente em linguagem de maquina, como mostrado abaixo, entretanto a
sintaxe do mesmo e muito pouco compreensivel e a probabilidade de erro para o seu
desenvolvimento seria muito grande
para facilitar a tarefa de programar um computador, foram criadas varias linguagens
de programacao
para facilitar a tarefa de programar um computador, foram criadas varias linguagens
de programacao
embora ainda seja muitas vezes complexo em comparacao com a linguagem natural, 
um programa escrito em uma linguagem de programacao e muito mais facil de ser implementado, compreendido e modificado.
as linguagens de programacao sao um meio termo entre a linguagem de maquina
e a linguagem natural.
deste modo sao classificadas de acordo com o nivel entre a
linguagem natural ou de maquina que ocupam
as linguagens muito parecidas com
linguagem de maquina sao chamadas de linguagens de baixo nivel e suas instrucoes
parecem-se muito com aquelas que serao executadas pelo processador
r. as linguagens
de alto-nivel sao as que guardam mais semelhancas com a linguagem natural.
exemplo de linguagens de baixo nivel e a linguagem de montagem
como o processador nao pode executar o codigo numa linguagem de programacao, esta deve ser traduzida em codigo de maquina antes de ser executada.
o pseudocodigo e uma maneira intermediaria entre a linguagem natural e uma linguagem de programacao de representar um algoritmo. 
. ela utiliza um conjunto restrito de palavras chave, em geral na lingua nativa do programador, que tem equivalentes nas
linguagens de programacao
alem disso, o pseudocodigo nao requer todo a rigidez
sintatica necessaria numa linguagem de programacao, permitindo que o aprendiz se
detenha na logica do algoritmos e nao no formalismo da sua representacao. 
na medida em que se obtem mais familiaridade com os algoritmos 
entao o pseudocodigo pode ser traduzido para uma linguagem de programacao
para que seja possivel armazenar e manipular dados no computador e necessario
representa los internamente de alguma forma.
nos seres humanos, representamos nossos numeros usando um sistema que chamamos de sistema decimal
 esse sistema, que se originou do fato de utilizarmos os dez dedos das
maos para realizarmos nossas contas
possui dez diferentes digitos para representar as infinitas quantidades e valores que desejamos
nos caso dos computadores digitais, a notacao que e utilizada possui apenas dois algarismos ou digitos para representar uma quantidade desejada, o zero e o um
esse sistema de representacao e chamado de sistema binario.
pelo fato de um numero precisar de muitos algarismos para ser expresso no sistema
binario
outras formas de representacao auxiliares tambem sao utilizadas nos computadores, como por exemplo a representacao pelo sistema hexadecimal que utiliza
dezesseis digitos 
a quantidade de algarismos necessaria para representar um determinado numero
varia de acordo com o sistema de representacao utilizado.
os dados em um computador devem ser armazenados de acordo com o tipo de informacao que se deseja representar e com o tipo de operacao que sera realizada com
eles. 
a representacao correta e adequada de uma informacao permite otimizar os recursos computacionais disponiveis, alem de acelerar o processamento 
a seguir sao
definidos os tipos de dados mais comuns encontrados na maioria das linguagens de
programacao e que constituem a base de como qualquer informacao sera armazenada
no mesmo.
inteiro sao os numeros pertencentes ao conjunto dos inteiros, isto e, que nao possuem parte fracionaria
podem ser positivos, nulos ou negativos.  
real sao os numeros pertencentes ao conjunto dos reais, isto e, que podem possuir parte fracionaria. 
tambem sao chamados de ponto flutuante devido a maneira como o computador os armazena. 
caractere sao os valores pertencentes ao conjunto de todos os caracteres numericos, alfabeticos e especiais
. esse conjunto tambem
e conhecido como conjunto de caracteres alfanumericos. 
dentro de um algoritmo podemos encontrar basicamente duas classes diferentes de
dados, os dados constantes e os variaveis
um dado e uma constante quando seu
valor nao se altera ao longo do tempo em que o algoritmo e executado
ou seja, permanece o mesmo desde o inicio ate o final da execucao. 
ja um dado que pode ter seu
valor alterado durante a execucao do programa e tido como uma variavel.
para que os dados sejam manipulados no computador, e necessario que estes estejam
associados a um nome, um identificador
o conteudo deste identificador sera o dado
em si e o seu nome sera usado para acessar o dado e realizar operacoes com o mesmo
uma analogia util para entender o conceito e a necessidade de utilizacao do identificador seria pensar no mesmo como uma placa de sinalizacao que indica
uma determinada regiao ou espaco na memoria do computador onde o dado desejado esta localizado
 sendo assim, toda vez que se deseja acessar uma determinada informacao utilizamos o nome dessa placa de sinalizacao e recuperamos
o conteudo que esta localizado dentro do espaco� delimitado pela mesma
ao nomearmos os identificadores dos nossos dados e conveniente usarmos palavras mnemonicas
ou seja, palavras que nos facam lembrar o carater do conteudo
armazenado
isso facilita a leitura do codigo programado e possibilita uma melhor
documentacao do mesmo
por exemplo, ao armazenarmos o nome completo, a idade e a quantidade de filhos de uma pessoa, e mais pratico e coerente usarmos os identificadores nomesobrenome,
idade e numfilhos do que usarmos nomes aleatorios como x, y e z.
como dito anteriormente, ao longo do programa o dado sera manipulado atraves do
nome do seu identificador, sendo assim
programa o dado sera manipulado atraves do
nome do seu identificador, sendo assim, o primeiro passo para utilizarmos os dados
e a nomeacao do seu identificador e a definicao do seu tipo
a definicao dos dados em algoritmos tambem e conhecida como declaracao
um identificador declarado com um determinado tipo de dados ficara restrito a armazenar valores daquele tipo especifico
na maioria dos casos, se houver uma tentativa de atribuir a um
identificador um tipo diferente daquele para o qual ele foi definido irao ocorrer erros
de compilacao, de execucao ou ate mesmo perda de dados
ao declaramos um identificador variavel, estamos reservando na memoria do computador um espaco para armazenar valores do tipo declarado para o mesmo
podemos comparar a memoria de um computador com um movel cheio de gavetas etiquetadas,
onde cada gaveta marcada pela etiqueta corresponde a um identificador variavel e o que esta guardado dentro da gaveta corresponde ao valor do mesmo.
apos realizada a declaracao de um identificador, e possivel iniciar a manipulacao
dos dados que esse identificador ira representar a partir da atribuicao de valores ao
mesmo
as expressoes aritmeticas sao aquelas em que os operadores sao aritmeticos e os operandos sao valores do tipo numerico
esses valores numericos podem
ser acessados por meio de identificadores constantes ou por meio de variaveis.
as operacoes aritmeticas fundamentais sao adicao, subtracao, multiplicacao, divisao, potenciacao, divisao inteira e o resto  
quando uma expressao aritmetica precisa ser avaliada num algoritmo, o analisador
processa a expressao dando prioridade para certos operadores.
cada operacao aritmetica em um algoritmo deve ser escrita em apenas uma unica
linha
 sendo assim, quando uma expressao matematica usual e escrita precisamos
utilizar parenteses para garantir que todas as operacoes sejam executadas na ordem
adequada
para a maioria das expressoes aritmeticas executadas em um algoritmo e possivel associar um valor definido, ou seja, o resultado da expressao propriamente dito.
ao desenvolvermos um algoritmo e bastante comum deixarmos parenteses nao
pareados nas expressoes aritmeticas
 -o que e um erro dificil de se localizar posteriormente. 
um teste pratico para evitarmos esse tipo de contratempo consiste em contar
na expressao quantos parenteses esquerdos e direitos existem,
e conferir se eles estao em mesmo numero.
um algoritmo pode ser definido como uma sequencia finita de passos para resolver um determinado problema. 
sempre que desenvolvemos um algoritmo estamos estabelecendo um padrao de comportamento que devera ser seguido para alcancar o resultado de um problema.
para o desenvolvimento de um algoritmo eficiente e necessario obedecermos algumas premissas basicas no momento de sua construcao
definir acoes simples e sem ambiguidade
organizar as acoes de forma ordenada
estabelecer as acoes dentro de uma sequencia finita de passos. 
o algoritmo um e um exemplo simples de algoritmo para troca de um pneu.
os algoritmos sao capazes de realizar tarefas como
ler e escrever dados
avaliar expressoes algebricas, relacionais e logicas
tomar decisoes com base nos resultados das expressoes avaliadas
repetir um conjunto de acoes de acordo com uma condicao
um algoritmo quando programado num computador e constituido pelo menos das tres partes, sendo elas
entrada de dados
 processamento de dados
 saida de dados
na parte de entrada, sao fornecidas as informacoes necessarias para que o algoritmo possa ser executado
estas informacoes podem ser fornecidas no momento em que o programa esta sendo executado ou podem estar embutidas dentro do mesmo.
os fluxogramas sao uma apresentacao do algoritmo em formato grafico. 
cada acao ou situacao e representada por uma caixa
 tomadas de decisoes sao indicadas por caixas especiais, possibilitando ao fluxo de acoes tomar caminhos distintos.
o inicio e o fim do algoritmo sao marcados com uma figura eliptica
as acoes a serem executadas estao em retangulos
sendo que as estruturas de controle condicionais estao em losangos e indicam duas possibilidades de prosseguimento do algoritmo
uma para o caso da expressao avaliada ser verdadeira e outra para o caso de ser falsa.
qualquer tipo de informacao que deva ser transferida, processada ou armazenada deve estar na forma de uma linguagem
a linguagem e imprescindivel para o processo de comunicacao. 
duas pessoas que se falam o fazem atraves de uma linguagem em comum, a linguagem natural.
da mesma forma, duas maquinas trocam informacao por uma linguagem, que neste caso mais tecnico e restrito, se chama protocolo.
do mesmo modo, um computador armazena suas instrucoes em codigo de maquina.
 estas diferentes linguagens nao podem ser traduzidas diretamente entre si, pois alem de serem representadas de modos diferentes tambem referem-se a coisas muito distintas
 -.para que um ser humano possa programar, armazenar e buscar informacoes num computador
e necessario que saiba instrui-lo na sua linguagem de maquina ou numa linguagem intermediaria que possa ser facilmente traduzida para o computador.
a linguagem natural e a maneira como expressamos nosso raciocinio e trocamos informacao. 
como e a expressao da cultura de uma sociedade, desenvolvida atraves das geracoes e em diferentes situacoes
raramente constitui um sistema de regras rigidas que possa ser implementada numa maquina ou que possa ser transcrita logicamente
alem da linguagem falada, fazem parte da nossa comunicacao gestos e posturas, que nao podem ser diretamente adaptados para compreensao de uma maquina.
por fim, toda a comunicacao eficiente pressupoe um conhecimento previo comum entre os interlocutores
por exemplo a mesma lingua, a mesma bagagem cultural e assim por diante. 
ao contrario dos seres humanos, as maquinas  sao projetados para executar tarefas bem determinadas a partir de determinadas instrucoes 
um computador nao e por si so uma maquina inteligente no sentido que nao pode aprender com a propria experiencia para melhorar seu comportamento futuro
ao contrario, um computador e somente capaz de realizar estritamente as tarefas que lhe forem delegadas e que facam parte do conjunto daquelas acoes que ele pode executar.
alem do fato de o computador necessitar que lhe instruam com acoes bem especificas, 
estas acoes devem ser passadas para o computador numa linguagem que ele possa entender, chamada linguagem de maquina. 
esta linguagem e composta somente por numeros, representados de forma binaria,
que, sob o ponto de vista do computador, representam as operacoes e os operandos que serao usados no processamento do programa
para um ser humano, a linguagem de maquina e dificilima de se compreender
assim, existe uma linguagem representada por comandos mas que reproduz as tarefas que serao executadas dentro do computador, a linguagem de montagem
entretanto, mesmo a linguagem de montagem e dificil de programar e os programas feitos para um determinado processador
 por conterem instrucoes especificas deste, nao funcionarao em um processador de outro tipo
com ilustracao, abaixo e mostrado o inicio de um programa que escreve a frase ola mundo no monitor
a automacao e o processo em que uma tarefa deixa de ser desempenhada pelo homem e passa a ser realizada por maquinas
sejam estes dispositivos mecanicos, eletronicos ou de natureza mista. 
a especificacao da sequencia ordenada de passos que deve ser seguida para a realizacao de uma tarefa, garantindo a sua repetibilidade, da-se o nome de algoritmo. 
serve como modelo para programas, pois sua linguagem e intermediaria a linguagem humana e as linguagens de programacao, sendo entao, uma boa ferramenta na validacao da logica de tarefas a serem automatizadas
os algoritmos, servem para representar a solucao de qualquer problema, mas no caso do processamento de dados, eles devem seguir as regras basicas de programacao para que sejam compativeis com as linguagens de programacao.
existem diversas formas de representacao de algoritmos, mas nao ha um consenso com relacao a melhor delas.  
o criterio usado para classificar hierarquicamente estas formas esta diretamente ligado ao nivel de detalhe ou, inversamente, ao grau de abstracao oferecido. 
esta forma de representacao de algoritmos e rica em detalhes, como a definicao dos tipos das variaveis usadas no algoritmo.
por assemelhar-se bastante a forma em que os programas sao escritos, encontra muita aceitacao. 
na verdade, esta representacao e suficientemente geral para permitir a traducao de um algoritmo nela representado para uma linguagem de programacao especifica seja praticamente direta.
ha diversas formas de representacao de algoritmos que diferem entre si pela quantidade de detalhes de implementacao que fornecem ou, inversamente, 
pelo grau de abstracao que possibilitam com relacao a implementacao do algoritmo em termos de uma linguagem de programacao especifica. 
dentre as principais formas de representacao de algoritmos destacam a descricao narrativa, o fluxograma convencional e o pseudocodigo
todo o trabalho realizado por um computador e baseado na manipulacao das informacoes contidas em sua memoria
 grosso modo, estas informacoes podem ser classificadas em dois tipos
as instrucoes, que comandam o funcionamento da maquina e determinam a maneira como devem ser tratados os dados.
as instrucoes sao especificas para cada modelo de computador, pois sao funcoes do tipo particular de processador utilizado em sua implementacao. 
os dados propriamente ditos, que correspondem a porcao das informacoes a serem processadas pelo computador. 
a maior parte das pessoas nao ligadas a area de informatica ignora o potencial dos computadores e imagina que eles sao capazes de tratar apenas com dados numericos. 
 na realidade, a capacidade dos mesmos se estende a outros tipos de dados. 
o objetivo deste capitulo e justamente o de classificar os dados de acordo com o tipo de informacao contida neles.
 classificacao apresentada nao se aplica a nenhuma linguagem de programacao especifica pelo contrario, ela sintetiza os padroes utilizados na maioria das linguagens. 
antes de apresentar formalmente os tipos de dados numericos, e conveniente recordar alguns conceitos basicos relacionados a teoria dos numeros e conjuntos
o conjunto dos numeros naturais e representado por n e e dado por n igual um, dois, tres, quatro, etc.
algumas correntes de matematicos teoricos convencionam que o numero zero esta contido neste conjunto
 contudo, nao convem perder tempo em tais discussoes filosoficas, uma vez que isto nao influenciara de forma alguma este estudo. 
na sequencia, encontramos o conjunto dos numeros inteiros z igual menos tres, menos dois, menos um, zero, um, doi, tres, etc.
o conjunto z contem todos os elementos de n, bem como alguns numeros que nao pertencem a n . 
 portanto, dizemos que n esta contido em z, ou entao, que z contem n.
englobando o conjunto dos numeros inteiros, existe o conjunto dos numeros fracionarios
 dado pelo universo dos numeros que podem ser expressos na forma de uma fracao, isto e, um quociente onde o numerador eo denominador sao numeros inteiros. 
por ultimo, surge o conjunto dos numeros reais, formado pela uniao do conjunto dos numeros fracionarios q com o conjunto dos numeros que nao podem ser expressos na forma de uma fracao
os numeros inteiros sao aqueles que nao possuem componentes decimais ou fracionarios, podendo ser positivos ou negativos. 
os elementos pertencentes aos conjuntos n e z, apesar de serem representaveis na
classe dos numeros reais
sao classificados como dados do tipo inteiro, por nao possuirem parte fracionaria. 
esta possibilidade e interessante por permitir uma economia do espaco de memoria, como veremos adiante. 
por sua vez, os elementos dos conjuntos q e r, por possuirem parte fracionaria, nao podem ser representados na classe inteira, pertencendo necessariamente aos tipos de dados ditos reais. 
como exemplos de numeros inteiros temos 
vinte  e quatro numero positivo, zero numero inteiro, menos doze numero inteiro negativo
os dados de tipo real sao aqueles que podem possuir componentes decimais ou fracionarios, e podem tambem ser positivos ou negativos. 
como dito anteriormente, os elementos dos conjuntos de numeros fracionarios e reais sao necessariamente representados no computador por dados do tipo real. 
o tipo de dados literal e constituido por uma sequencia de caracteres contendo letras, digitos e ou simbolos especiais.
este tipo de dados e tambem muitas vezes chamado de alfanumerico, cadeia   de caracteres, ainda, do ingles, string
usualmente, os dados literais sao representados nos algoritmos pela colecao de caracteres, delimitada em seu inicio e termino com o caractere aspas 
diz se que o dado do tipo literal possui um comprimento dado pelo numero de caracteres nele contido. 
a existencia deste tipo de dado e, de certo modo, um reflexo da maneira como os computadores funcionam.
muitas vezes, estes tipos de dados sao chamados de booleanos, devido a significativa contribuicao de boole a area da logica matematica. 
o tipo de dados logico e usado para representar dois unicos valores logicos possiveis verdadeiro e falso.
 e comum encontrar-se em outras referencias outros tipos de pares de valores logicos como sim ou nao, um ou zero, true ou false. 
nos algoritmos apresentados nesta apostila os valores logicos serao delimitados pelo caractere ponto 
os dados do tipo literal podem conter sequencias de letras, digitos ou simbolos especiais, delimitados por aspas
seu comprimento e dado pelo numero de caracteres em string
os dados do tipo logico so possuem dois valores possiveis
a todo momento durante a execucao de qualquer tipo de programa os computadores estao manipulando informacoes representadas pelos diferentes tipos de dados descritos no capitulo anterior.
para que nao se esqueca das informacoes, o computador precisa guarda las em sua memoria
devemos sempre ter em mente que um byte consegue representar duzentos e cinquenta e seis possibilidades diferentes. 
uma informacao do tipo literal nada mais e do que um conjunto de caracteres que podem ser letras, digitos ou simbolos especiais. 
a uniao de todos os caracteres existentes nos computadores resulta num conjunto com um numero de elementos menor que zentos e cinquenta e seis
deste resultado surgiu a ideia de associar a cada caractere um numero variando de zero a duzentos e cinquenta e cinco. 
no principio, cada fabricante de computador adotava uma convencao diferente para este codigo. 
mais recentemente, esta convencao foi padronizada a fim de facilitar a portabilidade de programas entre maquinas diferentes.
esta convencao e representada na forma de uma tabela de mapeamento de caracteres em numeros. 
  o padrao mais universalmente aceito e o ascii, cuja tabela e mostrada no apendice b.
retornando a questao do armazenamento de informacoes do tipo literal na memoria, 
deve se lembrar que um dado deste tipo possui um certo comprimento dado pelo numero de caracteres nele contido. 
portanto, para guardar um dado do tipo literal devemos alocar um espaco contiguo de memoria igual ao comprimento do mesmo, destinando um byte para cada caractere da informacao. 
exemplificando, a informacao do tipo literal banana possui seis caracteres e, portanto, seis bytes sao necessarios para reter a referida informacao na memoria.
 a principio, estes bytes podem estar em qualquer lugar da memoria, mas e conveniente que estejam juntos 
a primeira posicao deste conjunto de bytes e absolutamente arbitraria e sua escolha geralmente e feita automaticamente pelo compilador
na verdade, ao inves dos caracteres da literal, os codigos correspondentes aos mesmos e que sao guardados na memoria.
uma informacao do tipo logico so possui dois valores possiveis .v. ou .f.. 
assim, a principio, um unico bit seria suficiente para armazenar uma informacao deste tipo.
contudo, deve-se lembrar que a menor porcao de memoria que se pode acessar e o byte.
portanto, uma informacao do tipo logico e armazenada em um byte de memoria. 
 de certa forma, se por um lado isto pode ser como um desperdicio de memoria, por outro simplifica bastante a arquitetura de memoria dos computadores 
alem do mais, isto nao e tao relevante, uma vez que na pratica o numero de ocorrencias de dados do tipo logico e bastante inferior ao de ocorrencias de dados do tipo literal ou numerico.
o conjunto dos numeros reais  contem um numero infinito de elementos e, pelas mesmas razoes que o conjunto dos numeros inteiros, precisa ser limitado. 
para dados deste tipo julgou-se apropriado adotar quatro bytes para sua representacao interna nos computadores. 
sao muito comuns situacoes como as aplicacoes cientificas em que e necessaria uma maior precisao de calculo, intimamente ligada ao numero de casas decimais dos dados.
para este caso, em analogia com o que acontece com os dados do tipo inteiro, algumas linguagens de programacao decidiram criar dados do tipo real estendido
como visto anteriormente, informacoes correspondentes a diversos tipos de dados sao armazenadas na memoria dos computadores
para acessar individualmente cada uma destas informacoes, a principio, seria necessario saber o tipo de dado desta informacao  e a posicao inicial deste conjunto de bytes na memoria
percebe se que esta sistematica de acesso a informacoes na memoria e bastante ilegivel e dificil de se trabalhar.
 para contornar esta situacao criou se o conceito de variavel, que e uma entidade destinada a guardar uma informacao. 
basicamente, uma variavel possui tres atributos um nome, um tipo de dado associado a mesma e a informacao por ela guardada. 
toda variavel possui um nome que tem a funcao de diferencia-la das demais.
cada linguagem de programacao estabelece suas proprias regras de formacao de nomes de variaveis. adotaremos nesta apostila as seguintes regras
um nome de variavel deve necessariamente comecar com uma letra
um nome de variavel nao deve conter nenhum simbolo especial exceto a sublinhada
todas as variaveis utilizadas em algoritmos devem ser definidas antes de serem utilizadas. 
isto se faz necessario para permitir que o compilador reserve um espaco na memoria para as mesmas. 
a forma de utilizacao deste comando ficara mais clara quando da utilizacao da representacao de algoritmos em linguagem estruturada 
esta convencao e valida para a representacao de algoritmos na forma de pseudocodigo. 
em termos de fluxograma, nao e usual adotar-se qualquer forma de definicao de variaveis.
a memoria dos computadores e composta por celulas numeradas ordenadamente denominadas bytes.
cada byte e constituido por oito bits.
cada tipo de dado requer um numero diferente de bytes para armazenar a informacao representada por ele na memoria.
esta quantidade tambem pode variar em funcao do tipo de computador considerado
uma variavel e uma entidade dotada de um nome para diferenciar das demais e um tipo de dado que define o tipo de informacao que ela e capaz de guardar.
uma vez definidos, o nome e o tipo de uma variavel nao podem ser alterados no decorrer de um programa
por outro lado, a informacao util da variavel e objeto de constante modificacao durante o decorrer do programa, de acordo com o fluxo de execucao do mesmo. 
o conceito de expressao em termos computacionais esta intimamente ligado ao conceito de expressao matematica,
 onde um conjunto de variaveis e constantes numericas relacionam-se por meio de operadores aritmeticos compondo uma formula que, uma vez avaliada, resulta num valor. 
esta formula utiliza tres variaveis b e h, que contem as dimensoes do triangulo, e area, onde e guardado o valor calculado 
ha, tambem, uma constante e o operador de multiplicacao, que aparece duas vezes na expressao. 
o conceito de expressao aplicado a computacao assume uma conotacao mais ampla
uma expressao e uma combinacao de variaveis, constantes e operadores, e que, uma vez
avaliada, resulta num valor.
operadores sao elementos funcionais que atuam sobre operandos e produzem um determinado resultado.
as expressoes sao classificadas de acordo com o tipo do valor resultante de sua avaliacao. 
expressoes aritmeticas sao aquelas cujo resultado da avaliacao e do tipo numerico, seja ele inteiro ou real. 
somente o uso de operadores aritmeticos e variaveis numericas e permitido em expressoes deste tipo
a prioridade entre operadores define a ordem em que os mesmos devem ser avaliados dentro de uma mesma expressao.
este assunto sera tratado com maior profundidade numa secao posterior.
as variaveis usadas em expressoes aritmeticas podem somente ser do tipo inteiro ou
real.
se todas as variaveis que aparecem numa expressao sao do tipo inteiro, entao o valor
resultante da expressao e tambem do tipo inteiro.
  se ao menos uma das variaveis da expressao aritmetica for do tipo real, entao o valor resultante da avaliacao da expressao e necessariamente do tipo real. 
expressoes literais sao aquelas cujo resultado da avaliacao e um valor literal
 este tipo de expressao e bem menos frequente que os anteriores. 
os tipos de operadores existentes variam de uma linguagem de programacao para outra, nao havendo uma padronizacao. 
 uma expressao e uma combinacao de variaveis, constantes e operadores, que resulta num valor quando avaliada. 
operadores sao elementos funcionais que atuam sobre operandos. 
 segundo o numero de operandos sobre os quais atua, um operador pode ser classificado em unario ou binario.
segundo os tipos de dados de seus operandos e do valor resultante de sua avaliacao, os operadores podem ser classificados em aritmeticos, logicos ou literais. 
um tipo especial de operador e o relacional, que e usado na comparacao de operandos de um mesmo tipo de dado e cujo resultado da avaliacao e sempre um valor logico
operadores de maior prioridade devem ser avaliados primeiro. 
 em caso de empate, a avaliacao se faz da esquerda para a direita.
o uso de parenteses em subexpressoes forca a avaliacao das mesmas com maior prioridade. 
os diversos tipos de operadores devem ser avaliados na seguinte sequencia dentro de uma expressao complexa primeiro os aritmeticos e literais a seguir, os relacionais e, por ultimo, os logicos.  
como o proprio nome diz, instrucoes primitivas sao os comandos basicos que efetuam tarefas essenciais para a operacao dos computadores, como entrada e saida de dados  e movimentacao dos mesmos na memoria.
estes tipos de instrucao estao presentes na absoluta maioria das linguagens de programacao.
dispositivo de entrada e o meio pelo qual as informacoes sao transferidas pelo usuario ou pelos niveis secundarios de memoria ao computador. 
dispositivo de saida e o meio pelo qual as informacoes sao transferidas pelo computador ao usuario ou aos niveis secundarios de memoria
sintaxe e a forma como os comandos devem ser escritos, a fim de que possam ser entendidos pelo tradutor de programas. 
a violacao das regras sintaticas e considerada um erro sujeito a pena do nao-reconhecimento do comando por parte do tradutor
semantica e o significado, ou seja, o conjunto de acoes que serao exercidas pelo computador durante a execucao do referido comando. 
as instrucoes primitivas de saida de dados sao o meio pelo qual informacoes contidas na memoria dos computadores sao colocadas nos dispositivos de saida, para que o usuario possa visualiza las
a transformacao do fluxograma em pseudocodigo exige a disponibilidade de algumas informacoes adicionais concernentes ao tipo das variaveis utilizadas. 
como o algoritmo opera apenas com dados numericos, certamente as variaveis utilizadas serao do tipo inteiro ou real
 como se deseja calcular a media entre dois numeros quaisquer, entao as variaveis n um e n dois devem ser capazes de armazenar numeros com ou sem parte fracionaria e, portanto, e necessario que estas sejam do tipo real.
como o valor medio entre dois numeros reais e um numero que pode ou nao ter parte fracionaria, entao a variavel m tambem deve ser do tipo real.
de posse dessa informacao, pode escrever o pseudocodigo do algoritmo em questao, a partir de seu fluxograma
um algoritmo e uma sequencia de passos que resolve algum problema ou alcancar algum objetivo, como a sequencia de passos para resolver o problema de descobrir a maxima altura
e importante salientar que um algoritmo simplesmente diz o que deve ser feito.
a definição de como os passos de um algoritmo serao executados e uma implementacao do algoritmo
resumindo, algoritmo e o que deve ser feito e implementacao e o como deve ser feito.
os programas sao escritos em alguma linguagem de programacao.
uma linguagem de programacao e a maneira de conversarmos com um computador
uma estrutura de seleccao e tambem designada por estrutura de decisao
o uso de algoritmos e quase tao antigo quanto a matematica
com o passar do tempo, entretanto, ele foi bastante esquecido pela matematica
o fluxograma se resume a um unico simbolo inicial, por onde a execucao do algoritmo comeca, e um ou mais simbolos finais, que sao pontos onde a execucao do algoritmo se encerra
o diagrama foi criado por ned chapin a partir de trabalhos de nassi shneiderman, os quais resolveram substituir o fluxograma tradicional por um diagrama que apresenta uma visao hierarquica e estruturada da logica do programa
as instrucoes, que comandam o funcionamento da maquina e determinam a maneira como devem ser tratados os dados
 os dados propriamente ditos, que correspondem a porcao das informacoes a serem processadas pelo computador.
tipos inteiros, sao caracterizados como tipos inteiros, os dados numericos positivos ou negativos. 
tipos reais, sao caracterizados como tipos reais, os dados numericos positivos e negativos e numeros fracionarios. 
tipos caracteres, sao caracterizados como tipos caracteres, as sequencias contendo letras, numeros e simbolos especiais
tipos logicos, sao caracterizados como tipos logicos os dados com valor verdadeiro e falso, sendo que este tipo de dado podera representar apenas um dos dois valores. 
ele e chamado por alguns de tipo booleano, devido a contribuicao do filosofo e matematico ingles george boole na area da logica matematica.
para armazenar os dados na memoria, imagine que a memoria de um computador e um grande arquivo com varias gavetas, onde cada gaveta pode armazenar apenas um unico valor 
 se e um grande arquivo com varias gavetas, e necessario identificar com um nome a gaveta que se pretende utilizar. desta forma o valor armazenado pode ser utilizado a qualquer momento. 
 definicao de variavel tudo aquilo que e sujeito a variacoes, que e incerto, instavel ou inconstante.
todas as variaveis utilizadas em algoritmos devem ser definidas antes de serem utilizadas. isto se faz necessario para permitir que o compilador reserve um espaco na memoria para as mesmas. 
tem se como definicao de constante tudo aquilo que e fixo ou estavel. 
operadores sao elementos fundamentais que atuam sobre operandos e produzem um determinado resultado. 
por exemplo, a expressao tres mais dois  relaciona dois operandos por meio do operador mais que representa a operacao de adicao.
binarios, quando atuam sobre dois operandos. esta operacao e chamada diadica
unarios, quando atuam sobre um unico operando. esta operacao e chamada monadica. 
operandos dividem-se em aritmeticos, logicos e literais.
operadores relacionais, que permitem comparar pares de operandos de tipos de dados iguais, resultando sempre num valor logico.
os operadores aritmeticos se relacionam as operacoes aritmeticas basicas
a prioridade entre operadores define a ordem em que os mesmos devem ser avaliados dentro de uma mesma expressao. 
os operadores relacionais sao operadores binarios que devolvem os valores logicos verdadeiro e falso.
uma expressao relacional ou logica retornara falso para o valor logico falso e verdadeiro para o valor logico verdade .
o conceito de expressao em termos computacionais esta intimamente ligado ao conceito de expressao ou formula matematica, onde um conjunto de variaveis e constantes numericas relacionam se por meio de operadores aritmeticos compondo uma formula que, uma vez avaliada, resulta num valor. 
expressoes aritmeticas sao aquelas cujo resultado da avaliacao e do tipo numerico, seja ele inteiro ou real. somente o uso de operadores aritmeticos, variaveis numericas e parenteses e permitido em expressoes deste tipo
expressoes logicas sao aquelas cujo resultado da avaliacao e um valor logico verdadeiro ou falso. 
quando forem combinadas duas ou mais expressoes que utilizam operadores relacionais e logicos, os mesmos devem utilizar os parenteses para indicar a ordem de precedencia.
expressoes literais sao aquelas cujo resultado da avaliacao e um valor literal 
expressoes que apresentam apenas um unico operador podem ser avaliadas diretamente
instrucoes primitivas sao os comandos basicos que efetuam tarefas essenciais para a operacao dos computadores, como entrada e saida de dados, e movimentacao dos mesmos na memoria.
dispositivo de entrada e o meio pelo qual as informacoes sao transferidos pelo usuario ou pelos niveis secundarios de memoria ao computador.
dispositivo de saida e o meio pelo qual as informacoes  sao transferidos pelo computador ao usuario ou aos niveis secundarios de memoria. 
sintaxe e a forma como os comandos devem ser escritos, a fim de que possam ser entendidos pelo tradutor de programas
a violacao das regras sintaticas e considerada um erro sujeito a pena do nao reconhecimento por parte do tradutor
semantica e o significado, ou seja, o conjunto de acoes que serao exercidas pelo computador durante a execucao do referido comando.
os comandos de saida de dados sao o meio pelo qual informacoes contidas na memoria dos computadores sao colocadas nos dispositivos de saida, para que os usuarios possam aprecia las. 
um algoritmo e uma sequencia logica de instrucoes que devem ser seguidas para a resolucao de um problema ou para a execucao de uma tarefa.
pseudocodigo utiliza linguagem estruturada e se assemelha, na forma, a um programa escrito na linguagem de programacao pascal. portugues estruturado
descricao narrativa utiliza linguagem natural para especificar os passos para a realizacao das tarefas. nao e muito utilizada
fluxograma utiliza se de figuras geometricas para ilustrar os passos a serem seguidos na resolucao dos problemas. diagrama de blocos. e bastante utilizado
diagrama de chapin conhecido tambem como diagrama de shneiderman ou diagrama ns. apresenta a solucao do problema por meio de um diagrama de quadros com uma visao hierarquica e estruturada.
pseudocodigo, e um tipo de algoritmo que utiliza uma linguagem flexivel, intermediaria entre a linguagem natural e a linguagem de programacao
pseudocodigo significa falso codigo o nome se deve a proximidade que existe entre um algoritmo escrito em pseudocodigo e a maneira pela qual um programa e escrito em uma linguagem de programacao.
cada instrucao ou acao a ser executada deve ser representada por meio de um simbolo grafico
terminal representa o inicio e o final do fluxograma.
processamento representa a execucao de operacoes ou acoes
teclado representa a entrada de dados para as variaveis por meio do teclado.
video representa a saida de informacoes por meio do monitor de video.
decisao representa uma acao logica que resultara na escolha de uma das sequencias de instrucoes.
preparacao representa uma acao de preparacao para o processamento
conector utilizado para interligar partes do fluxograma ou para desviar o fluxo corrente para um determinado trecho do fluxograma.
conector de paginas utilizado para interligar partes do fluxograma em paginas distintas. 
seta de orientacao do fluxo.
um algoritmo e qualquer procedimento computacional bem definido que toma algum valor ou conjunto de valores como entrada e produz algum valor ou conjunto de valores como saida
algoritmo e uma sequencia finita e bem definida de passos que, quando executados, realizam uma tarefa especifica ou resolvem um problema
estrutura de dados para manipulacao das informacoes utilizadas no algoritmo. 
estrutura de controle para manipulacao das acoes.
identificacao do problema determinar o que se quer resolver ou qual objetivo a ser atingido
identificacao das entradas do sistema quais informacoes estarao disponiveis
identificacao das saidas do sistema quais informacoes deverao ser geradas/calculadas como resultado;
definir os passos a serem realizados determinar a sequencias de acoes que leve a solucao do problema
concepcao do algoritmo registrar a sequencia de comandos, utilizando uma das formas de representacao de algoritmos. 
teste da solucao execucao manual de cada passo do algoritmo, seguindo o fluxo estabelecido, para detectar possiveis erros.
a descricao de um algoritmo de forma clara e facil de ser seguida ajuda no seu desenvolvimento, depuracao e futura migracao para uma linguagem de programacao. 
o computador so conhece os valores que estao armazenados na sua
memoria.
portanto, a maioria das instrucoes esta, de certa forma, associada ao processo de armazenamento ou transformacao destes valores. 
vetores, estrutura que suporta n posicoes de um mesmo tipo de dado, cada uma com seu respectivo valor.
matrizes estrutura que suporta nxm posicoes de um mesmo tipo de dado, cada uma com seu respectivo valor.
nenhuma variavel pode ser usada sem antes ter sido declarada.
 comentarios nao sao comandos, mas sao muito importantes para a documentacao e entendimento dos algoritmos e programas de computador.
comando de atribuicao  similar ao sinal de igual das expressoes matematicas convencionais, este comando atribui a variavel da esquerda o valor da expressao da direita.
estrutura sequencial  conjunto de comandos que sao executados numa sequencia linear, de cima para baixo, na mesma ordem que aparecem
estrutura de selecao  permite a escolha de um grupo de acoes para serem executadas de acordo com a aceitacao ou nao de certas condicoes
comando se executa um bloco de comandos especifico se a condicao testada for verdadeira e um outro bloco de comandos quando a condicao for falsa. 
comando caso,  testar varias condicoes para uma mesma variavel e executa o bloco de comandos relacionado a condicao verdadeira.
estrutura de repeticao permite a repeticao de um grupo de acoes.
 teste de mesa,  consiste do acompanhamento manual linha a linha da execucao do algoritmo
 programacao estruturada e modular a resolucao do problema atraves da sua divisao em subproblemas menores e mais simples.
refinamentos sucessivos essa tecnica consiste da divisao do problema inicial em subproblemas, e estes em partes ainda menores, sucessivamente, ate que cada parte seja descrita atraves de um algoritmo claro e bem definido. 
para resolver um problema atraves dum computador e necessario encontrar em primeiro lugar uma maneira de descreve lo de uma forma clara e precisa.
um algoritmo e uma descricao, passo a passo, de uma metodologia que conduz a resolucao de um problema ou a execucao de uma tarefa.
a programacao consiste na codificacao precisa desse algoritmo, segundo uma linguagem de programacao especifica
os algoritmos sao expressos diretamente em linguagem natural
fluxograma e uma representacao grafica que emprega formas geometricas padronizadas para indicar as diversas accoes e decisoes que devem ser executadas para resolver o problema. 
nao existe consenso entre os especialistas sobre qual e a melhor maneira de representar um algoritmo. 
actualmente a maneira mais comum de representar algoritmos e atraves de uma pseudo linguagem ou pseudocodigo.
 esta forma de representacao tem a vantagem de o algoritmo seja escrito de uma forma que esta proxima de uma linguagem de programacao de computadores.
um fluxograma e uma representacao grafica de um algoritmo
programacao visual e a utilizacao de diagramas na programacao
descrevem o fluxo de um algoritmo atraves de um conjunto de figuras geometricas padronizadas ligadas por setas de fluxo.
 uma estrutura e a unidade basica da logica de programacao
numa sequencia e processado um conjunto de instrucoes em serie. 
uma estrutura de seleccao e tambem designada por estrutura de decisao
qualquer conjunto de dados fornecido a um algoritmo destes sera submetido ao mesmo conjunto de instrucoes, executadas sempre na mesma sequencia. 
um comando composto e um conjunto de zero ou mais comandos simples, como atribuicoes e instrucoes primitivas de entrada ou saida de dados, ou alguma das construcoes apresentadas neste capitulo.
na estrutura sequencial os comandos de um algoritmo sao executados numa sequencia pre estabelecida. 
 cada comando e executado somente apos o termino do comando anterior.
m termos de fluxogramas, a estrutura sequencial e caracterizada por um unico fluxo de execucao um unico caminho orientado no diagrama
 em pseudocodigos, a estrutura sequencial caracteriza se por um conjunto de comandos dispostos ordenadamente. 
 estruturas de decisao do tipo se nesta estrutura uma unica condicao  e avaliada. se o resultado dessa avaliacao for verdadeiro, entao um determinado conjunto de instrucoes e executado. caso contrario, ou seja, quando o resultado da avaliacao for falso, um comando diferente e executado. 
em termos de fluxogramas, uma construcao do tipo se pode ser encarada como uma bifurcacao onde ha dois caminhos que podem ser seguidos 
 estruturas de decisao do tipo escolha   e uma generalizacao da estrutura se, onde somente uma condicao era avaliada e dois caminhos podiam ser seguidos
 na estrutura de decisao do tipo escolha pode haver uma ou mais condicoes a serem testadas e um comando composto diferente associado a cada uma destas. 
estruturas de repeticao as estruturas de repeticao sao muitas vezes chamadas de lacos ou, tambem, de loops. 
lacos contados, quando se conhece previamente quantas vezes o comando composto no interior da construcao sera executado
lacos condicionais, quando nao se conhece de antemao o numero de vezes que o conjunto de comandos no interior do laco sera repetido, pelo fato de o mesmo estar amarrado a uma condicao sujeita a modificacao pelas instrucoes do interior do laco. 
os lacos contados sao uteis quando se conhece previamente o numero de vezes que se deseja executar um determinado conjunto de comandos.
lacos condicionais sao aqueles cujo conjunto de comandos em seu interior e executado ate que uma determinada condicao seja satisfeita
as construcoes que implementam lacos condicionais mais comuns nas linguagens de programacao modernas sao enquanto e repita.
 construcao enquanto, sua semantica e a seguinte, ao inicio da construcao enquanto a condicao e testada. 
se a condicao for verdadeira o comando composto e executado e ao seu termino retorna-se ao teste da condicao.
uma vez dentro do corpo do laco, a execucao somente abandonara o mesmo quando a condicao for falsa. o usuario deste tipo de construcao deve estar atento a necessidade de que em algum momento a condicao devera ser avaliada como falsa. caso contrario, o programa permanecera indefinidamente no interior do laco, o que e conhecido como laco infinito. 
construcao repita, o comando e executado uma vez. a seguir, a condicao e testada se ela for falsa, o comando composto e executado novamente e este processo e repetido ate que a condicao seja verdadeira, quando entao a execucao prossegue pelo comando imediatamente seguinte ao final da construcao. 
um aninhamento ou embutimento e o fato de se ter qualquer um dos tipos de construcao apresentados anteriormente dentro do conjunto de comandos de uma outra construcao.
as estruturas de controle do fluxo de execucao sao essenciais para que se possa alterar a sequencia de execucao dos comandos de um programa em funcao dos dados do mesmo. 
um comando composto e um conjunto de zero ou mais comandos simples, sejam eles instrucoes primitivas ou construcoes como as estudadas neste capitulo. 
uma estrutura sequencial e aquela em que os comandos vao sendo executados numa sequencia pre-estabelecida, um apos o outro. 
s estruturas de decisao permitem escolher qual o caminho a ser seguido num algoritmo em funcao de uma ou mais condicoes
 a construcao se utiliza apenas uma condicao, ao passo que a construcao escolha utiliza uma ou mais condicoes. 
as estruturas de repeticao sao usadas quando se deseja repetir um trecho de um algoritmo 
 quando o numero de vezes que o trecho sera repetido e conhecido diz-se que o laco e do tipo contado
 quando este numero nao e conhecido, mas e funcao de uma determinada condicao, entao tem-se os lacos condicionais
as construcoes repita e enquanto diferem uma da outra pelo fato de a primeira efetuar o teste da condicao no final da construcao e, portanto, executar o comando composto ao menos uma vez. 
 a construcao enquanto efetua o teste da condicao em seu inicio e executa o comando composto zero ou mais vezes. 
 a construcao mais interna deve estar inteiramente contida na construcao imediatamente mais externa. 
um algoritmo pode ser definido como um conjunto de regras, bem definidas, para solucao de um determinado problema
segundo o dicionario michaelis, o conceito de algoritmo e a utilizacao de regras para definir ou executar uma tarefa especifica ou para resolver um problema especifico. 
computador e uma maquina que processa informacoes de forma automatica, sob o controle de grupos de instrucoes previamente definidas, com grande eficacia.
um algoritmo nada mais e que um texto contendo comandos que devem ser executados numa determinada ordem. 
algoritmo e um conjunto de instrucoes, como uma receita de bolo, constituido de um numero finito de passos
para que os dados sejam processados, ha a necessidade de se utilizar uma linguagem de programacao, pois os computadores nao executam diretamente os algoritmos. 
 eles precisam ser transformados para uma linguagem de programacao que, posteriormente, serao traduzidos para uma linguagem de maquina.
uma das primeiras dessas linguagens de programacao foi a fortran, adequada para problemas de natureza tecnica e cientifica. 
bit, menor porcao de informacao entendivel pelo computador. sao os zeros e uns.
byte, conjunto de  bits. memorias sao medidas em bytes. cada caractere e um byte.
hardware, componentes fisicos e eletronicos do computador. e a parte fisica do computador.
software, sao programas de computador.
compilado, sao programas capazes de transformar codigos fonte em codigos objeto, ou seja, capazes de transformar programas escritos em uma linguagem de programacao mais acessivel ao homem em linguagem de maquina 
 uma pseudo linguagem e um conjunto de tecnicas e comandos construidos na lingua portuguesa com o objetivo de facilitar a programacao e o entendimento dos programas principalmente daqueles que ainda nao dominam nenhuma linguagem de programacao.
algoritmos desenvolvidos numa pseudolinguagem nao sao executados diretamente pelo computador.
elemento basico de qualquer linguagem identificador, o objetivo desse elemento e identificar, na memoria, variaveis e constantes.
nos algoritmos, cada variavel corresponde a uma posicao na memoria, cujo conteudo pode variar ao longo do tempo durante a execucao de um programa.
inteiro qualquer numero inteiro positivo, negativo ou nulo
real qualquer numero real positivo, negativo ou nulo
caractere ,qualquer conjunto de caracteres desde que entre aspas..
logico conjunto de valores falso ou verdadeiro em proposicoes logicas. 
constante, como o proprio nome sugere, e algo que nao se modifica ao longo do tempo de execucao de um programa. 
 uma constante pode ser um valor numerico, um valor logico ou uma sequencia de caracteres quaisquer que possua alguma relevancia para o problema em estudo. 
a representacao de uma constante numerica nos algoritmos e feita no sistema decimal
 constante logica e um valor logico, isto e, so pode conter valores do tipo falso ou verdadeiro
uma constante caractere pode ser qualquer sequencia de caracteres.
 toda constante do tipo caractere que aparece no algoritmo sera colocada entre aspas, para que nao seja confundida com outro item qualquer
nos algoritmos definiremos como sendo do tipo caractere qualquer constante que contenha um ou mais caracteres, desde que estejam entre aspas e nao sofram modificacoes ao longo do algoritmo.
comentario e um instrumento utilizado para facilitar o entendimento do algoritmo. e um texto, ou simplesmente uma frase, que aparece delimitado por chaves em qualquer parte do programa. nao e interpretado pelo compilador.
comando de atribuicao, este comando permite que se forneca um valor a certa variavel, onde a natureza deste valor tem que ser compativel com o tipo de variavel na qual esta sendo armazenado.
as expressoes aritmeticas nos algoritmos sao formadas com operadores e funcoes cujos operandos sao constantes e/ou variaveis do tipo numerico
os operadores aritmeticos sao a adicao, a subtracao, a multiplicacao, a divisao, a potenciacao e a radiciacao
nas expressoes logicas os operadores sao logicos ou relacionais.
os operadores logicos considerados nos algoritmos sao os conectivos de conjuncao, disjuncao e negacao.
os operadores relacionais indicam a comparacao a ser realizada entre os termos da relacao. 
entrada de dados, leia, entrar com um dado nesse momento significa digitar alguma informacao no teclado. esse dado sera armazenado em um local na memoria. isto sera efetuado por um comando escrito no algoritmo.
o comando utilizado para se entrar com dados e o leia
a saida de dados e feita para que se possa visualizar o resultado do algoritmo. deve-se imprimir na tela do computador ou na impressora o que foi solicitado pelo algoritmo. 
os algoritmos podem ser expressos em forma de fluxogramas tambem. 
 existem alguns tipos de fluxogramas, existem dois tipos o ns  e o tradicional.
a estrutura condicional permite a escolha do grupo de acoes e estruturas a ser executado quando determinadas condicoes representadas por expressoes logicas sao ou nao satisfeitas
a estrutura alternativa simples nos permite executar acoes apenas se a condicao for verdadeira. caso seja falsa, nao se executa essa estrutura.
a estrutura alternativa composta nos permite executar acoes caso a condicao seja verdadeira ou nao. 
a estrutura de repeticao enquanto  e faca permite que uma sequencia de comandos seja executada repetidamente enquanto uma determinada condicao for verdadeira.
um procedimento e um bloco de programa, contendo inicio e fim e sera identificado por um nome, atraves do qual sera referenciado em qualquer parte do programa principal. 
asterisco  variavel global quando e declarada no inicio de um programa principal, podendo ser utilizada por qualquer sub rotina subordinada 
asterisco asterisco  variavel local quando e declarada dentro de uma sub rotina e e somente valida dentro da rotina a qual esta declarada.
uma funcao sempre devolvera um resultado.
um procedimento e usado como um comando qualquer.
uma funcao sempre fara parte de um comando ou de uma expressao.
uma mesma funcao pode ser chamada em mais de um lugar no mesmo algoritmo, assim como procedimento.
o lazarus e um ambiente de desenvolvimento integrado que utiliza o free pascal como compilador. f
o compilador free pascal  e um compilador de codigo aberto de trinta e dois barra sessenta e quatro bits, usado na programacao de computadores atraves das linguagens de programacao pascal e object pascal, desde meados da decada de mil novecentos e noventa e nove.
eventos, os programas feitos no lazarus sao desenvolvidos atraves de eventos, os quais podem ser entendidos como todas as maneiras que o usuario pode interagir com os objetos, durante a utilizacao de um programa. 
onclick  ocorre quando o usuario clica sobre o objeto
onmousemove  ocorre quando o usuario movimenta o ponteiro do mouse
onkeypress  este evento e chamado quando cada tecla e pressionada, sendo executado antes da tecla que foi pressionada chegar a seu destino
onkeydown  ocorre quando o usuario pressiona uma tecla.
onenter  este evento e chamado quando o objeto recebe o foco.
onchange este evento e chamado cada vez que o conteudo de um determinado objeto e alterado
onmousedown  ocorre quando o usuario pressiona o botao do mouse.
onmouseup  ocorre quando o usuario libera o botao do mouse
propriedades determinam a maneira como os objetos de sua aplicacao funcionam, em outras palavras, representam as caracteristicas de um determinado objeto
a linguagem pascal barra object pascal permite o uso de duas estruturas para a tomada de decisao.
algoritmos  a tem por finalidade analisar o valor de uma expressao logica e, caso o mesmo seja verdadeiro, executar a instrucao correspondente caso contrario, essa estrutura condicional e abandonada e a execucao do programa passa para o comando seguinte. 
estrutura while,  nesta estrutura, os comandos internos a mesma serao executados repetidamente, enquanto a condicao permanecer verdadeira
 estrutura for, esta estrutura faz uso de uma variavel de controle, de tal forma a executar um numero determinado de repeticoes
 estrutura repeat,  e realizada apenas ao final da repeticao, o que garante que o bloco de comandos internos a essa estrutura seja executado ao menos uma vez
uma procedure e um bloco de programa, contendo inicio e fim e que e identificada por um nome, podendo ser chamada acionada a partir da unit na qual foi declarada
uma funcao sempre devolvera um resultado atraves de seu nome. 
 os algoritmos devem descrever as acoes responsaveis para que sejam alcancados determinados efeitos.
linguagem natural, este tipo de representacao pode ser util para uma abordagem inicial do problema, entretanto, devido a sua imprecisao, existe o perigo de ma interpretacao ou perda de informacoes.
sequenciamento e a execucao de uma acao propriamente dita.
selecao estrutura utilizada para selecionar a execucao da acao, de acordo com a condicao a ser testada.
repeticao estrutura utilizada para repetir uma determinada sequencia de passos sob determinadas condicoes.
sintaxe conjunto de regras que determinam quais construcoes sao corretas.
semantica descricao de como as construcoes sintaticamente corretas sao interpretadas ou executadas 
 para armazenar valores que serao utilizados posteriormente.
o nome de uma variavel faz referencia ao endereco de memoria onde essa variavel se encontra . 
 nao se pode saber o valor inicial de uma variavel, pois na memoria existem varias informacoes armazenadas, muitas delas estao sendo utilizadas pelo computador, mas podem existir espacos em que foram armazenadas informacoes anteriormente mas que nao estao mais em uso. 
e a ciencia que estuda as leis e criterios de validade que regem o pensamento e a demonstracao, ou seja, ciencia dos principios formais do pensamento.
sao passos executados ate atingir um objetivo ou solucao do problema.
regra ou norma definida para realizacao ou emprego de algo.
sequencia finita de passos que levam a execucao de uma tarefa.
tecnica de desenvolver sequencia logica de passos adaptados para a linguagem de programacao. 
sequencia finita de passos que levam a execucao de uma tarefa. 
um programa de computador e uma colecao de instrucoes que descrevem uma tarefa a ser realizada por um computador. 
os programas de computadores nada mais sao do que algoritmos escritos numa linguagem de computador
todo programa e um algoritmo, mas nem todo algoritmo e um programa.
entrada dados de entrada do algoritmo. 
processamento procedimentos utilizados para chegar ao resultado final. 
saida, dados processados. 
descricao narrativa nada mais e do que descrever, utilizando uma linguagem natural os algoritmos, as acoes a serem realizadas no tratamento dos dados de entrada para os resultados de saida na resolucao do problema proposto
diagrama de bloco e uma ferramenta usada e desenvolvida pelos profissionais que estao envolvidos diretamente com a programacao, tendo como objetivo descrever a sequencia de operacoes a serem efetuada em um processamento computacional.
saida em video,  saida de informacoes em video
decisao, acao logica que resultara na escolhade uma das sequencias de instrucoes.
pseudocodigo e uma forma generica de escrever um algoritmo, utilizando uma linguagem simples sem necessidade de conhecer a sintaxe de nenhuma linguagem de programacao.
um algoritmo e formalmente uma sequencia finita de passos que levam a execucao de uma tarefa.
os programas de computadores nada mais sao do que algoritmos escritos numa linguagem de computador  e que sao interpretados e executados por uma maquina, no caso um computador
os algoritmos sao descritos em uma linguagem chamada pseudocodigo
para escrever um algoritmo precisamos descrever a sequencia de instrucoes, de maneira simples e objetiva
algoritmo e uma sequencia logica de instrucoes que podem ser executadas.
o diagrama de blocos e uma forma padronizada e eficaz para representar os passos logicos de um determinado processamento.
existem diversos simbolos em um diagrama de bloco
variaveis e constantes sao os elementos basicos que um programa manipula
uma variavel e um espaco reservado na memoria do computador para armazenar um tipo de dado determinado. 
variaveis devem receber nomes para poderem ser referenciadas e modificadas quando necessario. 
 um programa deve conter declaracoes que especificam de que tipo sao as variaveis que ele utilizara e as vezes um valor inicial.
constante e um determinado valor fixo que nao se modifica ao longo do tempo, durante a execucao de um programa
variavel e a representacao simbolica dos elementos de um certo conjunto
 cada variavel corresponde a uma posicao de memoria, cujo conteudo pode se alterado ao longo do tempo durante a execucao de um programa
as variaveis e as constantes podem ser basicamente de quatro tipos, numericas, caracteres, alfanumericas ou logicas
as variaveis so podem armazenar valores de um mesmo tipo, de maneira que tambem sao classificadas como sendo numericas, logicas e literais.
os operadores sao meios pelo qual incrementamos, incrementamos, comparamos e avaliamos dados dentro do computador
os operadores aritmeticos sao os utilizados para obter resultados numericos.
os operadores relacionais sao utilizados para comparar string de caracteres e numeros
os operadores logicos servem para combinar resultados de expressoes, retornando se o resultado final e verdadeiro ou falso
operacoes logicas sao utilizadas quando se torna necessario tomar decisoes em um diagrama de bloco. 
num diagrama de bloco, toda decisao tera sempre como resposta o resultado verdadeiro ou falso.
s comandos de decisao ou desvio fazem parte das tecnicas de programacao que conduzem a estruturas de programas que nao sao totalmente sequenciais.
as principais estruturas de decisao sao se entao, se entao senao e caso selecione
a estrutura de decisao se if normalmente vem acompanhada de um comando, ou seja, se determinada condicao for satisfeita pelo comando se if entao execute determinado comando. 
utilizamos os comandos de repeticao quando desejamos que um determinado conjunto de instrucoes ou comandos sejam executados um numero definido ou indefinido de vezes, ou enquanto um determinado estado de coisas prevalecer ou ate que seja alcancado
o teste da condicao sera sempre realizado antes de qualquer operacao. 
campo e um espaco reservado em memoria para receber informacoes 
registro e um conjunto de campos
arquivo e um conjunto de registros 
porque voce precisa aprender programacao.
a logica de programacao e necessaria para pessoas que desejam trabalhar com desenvolvimento de sistemas e programas, ela permite definir a sequencia logica para o desenvolvimento
logica de programacao e a tecnica de encadear pensamentos para atingir determinado objetivo
sequencia logica sao passos executados ate atingir um objetivo ou solucao de um problema. 
instrucoes sao um conjunto de regras ou normas definidas para a realizacao ou emprego de algo.
um algoritmo e formalmente uma sequencia finita de passos que levam a execucao de uma tarefa.
algoritmo e uma sequencia logica de passos que levam a um determinado objetivo. 
um algoritmo e um conjunto nao ambiguo e ordenado de passos executaveis que definem um processo finito.
todo algoritmo, seja ele computacional ou nao, recebe uma entrada, processa a e gera uma saida segundo seu conjunto de passos.
os passos de um algoritmo devem ser bem definidos, objetivando a clareza e evitando ambiguidades.
um algoritmo deve chegar ao seu fim apos um numero finito de passos
um algoritmo deve ser efetivo, ou seja, suas operacoes devem ser basicas o suficiente para que possam, em principio, serem executadas de maneira exata e em um tempo finito. 
um algoritmo deve possuir zero ou mais entradas. estas sao insumos ou quantidades que sao processados pelos algoritmos durante a execucao de seus passos.
um algoritmo deve possuir uma ou mais saidas. elas representam o resultado do trabalhado realizado pelos algoritmos.
fluxograma consiste em usar formas geometricas padronizadas para descrever os passos a serem executados pelos algoritmos
os fluxogramas possuem um padrao mundial no que se refere a sua simbologia, tornando sua utilizacao independente das peculiaridades das linguagens naturais.
os fluxogramas tendem a crescer bastante quando descrevem algoritmos constituidos de muitos passos, o que dificulta tanto sua construcao como sua visualizacao. 
a linguagem que o computador e capaz de compreender tem grande influencia na elaboracao de algoritmos projetados para ele
sequencia finita de regras, raciocinios ou operacoes que, aplicada a um numero finito de dados, permite solucionar classes semelhantes de problemas.
algoritmo e uma sequencia finita de acoes executaveis que visam obter uma solucao para um determinado tipo de problema
conceito de algoritmo e frequentemente ilustrado pelo exemplo de uma receita culinaria, embora muitos algoritmos sejam mais complexos
um algoritmo nao representa, necessariamente, um programa de computador,
um algoritmo que diz ao computador os passos especificos e em que ordem eles devem ser executados
uando os procedimentos de um algoritmo envolvem o processamento de dados, a informacao e lida de uma fonte de entrada, processada e retornada sob novo valor apos processamento, o que geralmente e realizado com o auxilio de uma ou mais estrutura de dados.
para qualquer processo computacional, o algoritmo precisa estar rigorosamente definido, especificando a maneira que ele se comportara em todas as circunstancias.
a corretividade do algoritmo pode ser provada matematicamente, bem como a quantidade assintotica de tempo e espaco necessarios para a sua execucao
concepcoes alternativas para algoritmos variam em programacao funcional e programacao logica.
um algoritmo e um esquema de resolucao de um problema.
pode ser implementado com qualquer sequencia de valores ou objetos que tenham uma logica infinita, ou seja, qualquer coisa que possa fornecer uma sequencia logica
linguagens de baixo nivel sao linguagens de programacao que tratam a informacao na linguagem de maquina.
linguagens de alto nivel sao linguagens de programacao modeladas quase como a linguagem comum humana, que quando compiladas sao convertidas para linguagem de maquina.
as linguagens de programacao tratam os dados de um computador atraves do uso de algoritmos.
um algoritmo e uma estruturacao passo-a-passo de como um determinado problema deve ser resolvido de forma nao ambigua
a logica de programacao e a capacidade que todo programador precisa ter para resolver os problemas que aparecem no dia a dia. 
que o conceito de algoritmo vai muito alem da programacao.
a palavra algoritmo e derivada do nome mohammed ibn musa al khowarizmique, que foi um matematico, astrologo, astronomo e autor persa.
nao obstante os algoritmos representam um conceito central na ciencia da computacao, sua atuacao nao se limita a essa area do conhecimento.
como exemplo de algoritmos, podemos citar as instrucoes para montagem de equipamentos, para utilizacao de cosmeticos como shampoos e condicionadores, para saida de emergencia em meios de transporte, receitas culinarias, manuais de uso, entre outros.
uma sequencia finita, ordenada e nao ambigua de passos para solucionar determinado problema ou realizar uma tarefa.
todo algoritmo, seja ele computacional ou nao, recebe uma entrada, processa-a e gera uma saida segundo seu conjunto de passos.
logo, a traducao de uma para a outra se torna uma atividade bastante dispendiosa
 alem disso, linguagens naturais sao mais propensas a ambiguidades. 
muitas vezes uma palavra pode ter varios significados, dependendo do contexto no qual sao utilizadas.
 em contrapartida, e bem mais facil elaborar um algoritmo por meio de uma linguagem com a qual ja temos uma certa familiaridade, do que atraves de linguagens que nao sao utilizadas com frequencia no dia a dia. 
a vantagem de se fazer uso dos fluxogramas esta na facilidade de compreende los.
descricoes de algoritmos mediante formas graficas sao mais facilmente compreendidas do que descricoes que envolvem apenas textos
alem do mais, os fluxogramas possuem um padrao mundial no que se refere a sua simbologia, tornando sua utilizacao independente das peculiaridades das linguagens naturais.
para exemplificar o uso de fluxogramas, a um algoritmo para calcular a media final de um aluno com base em suas notas e classifica lo como aprovado ou reprovado
os fluxogramas tendem a crescer bastante quando descrevem algoritmos constituidos de muitos passos, o que dificulta tanto sua construcao como sua visualizacao.
s para sua utilizacao de acordo com cada forma geometrica, ha uma limitacao no seu poder de expressao, se comparado com a descricao narrativa.
tal linguagem, tantas vezes mencionada neste capitulo, se baseia em conceitos e em arquiteturas de hardware que determinam o funcionamento basico de um computador. 
 dentre as existentes, a mais utilizada nos computadores atuais e a arquitetura de von neumann
modelos como o mencionado anteriormente nao apenas definem a forma como os dados sao processados pelo computador, mas tambem a linguagem que eles sao capazes de compreender
a linguagem utilizada pelos computadores esta restrita a um conjunto limitado de instrucoes, cujo funcionamento depende de sua arquitetura de hardware.
as linguagens de programacao imperativas , por exemplo, foram criadas em funcao da arquitetura de von neumman
 a linguagem algoritmica, tambem chamada de pseudocodigo ou pseudo-linguagem, por sua vez, consiste no emprego de uma linguagem intermediaria entre a linguagem natural e uma linguagem de programacao
esse meio termo resulta em uma linguagem que se aproxima das construcoes de uma linguagem de programacao, sem exigir, no entanto, rigidez na definicao das regras para utilizacao de suas instrucoes
geralmente, essa forma de representacao de algoritmos e uma versao reduzida de linguagens de alto nivel como c e pascal.
as palavras em letras maiusculas correspondem a palavras reservadas que fazem parte do conjunto de regras que a linguagem algoritmica deve seguir. 
embora sejam mais flexiveis do que as linguagens de programacao em relacao ao seu uso , algumas palavras sao necessarias, pois facilitam o entendimento e aproximam o pseudocodigo de um programa de computador.
as palavras inicio e fim, por exemplo, indicam onde comeca e termina o algoritmo
ja as instrucoes leia e escreva referem-se a operacoes de entrada e saida de dados
presentes na maioria das linguagens de programacao
peracoes de atribuicao, expressoes e estruturas de controle fazem parte do nucleo das linguagens de programacao imperativas e sao, portanto, fundamentais para o aprendizado da programacao.
a principal vantagem da forma de representacao em linguagem algoritmica esta na facilidade com a qual um pseudocodigo pode ser transcrito para uma linguagem de programacao
assim como os fluxogramas, a desvantagem fica por conta da limitacao do seu poder de expressao, devido as regras impostas para a elaboracao das instrucoes. 
apesar de ser um tema mais abordado na ciencia da computacao, algoritmos estao presentes nas mais diversas areas e em varias atividades do cotidiano. 
lidamos com eles, por exemplo, quando tomamos  /  introducao a programacao banho, cozinhamos, planejamos uma rota para fugirmos do transito, consultamos um manual de montagem, enfim, sempre que nos deparamos com um conjunto logico de passos para realizarmos uma tarefa ou solucionarmos um problema, estamos em contato com algoritmos
 e por meio deles que os computadores passam a ilusao de que sao inteligentes, realizando tarefas capazes de impressionar qualquer ser humano. 
os algoritmos computacionais devem possuir zero ou mais entradas e uma ou mais saidas
as formas de representacao de algoritmos mais comuns sao a linguagem algoritmica, o fluxograma e o pseudocodigo.
 da primeira a ultima ha uma aproximacao em relacao as linguagens de programacao, ou seja, o pseudocodigo e a forma de representacao que mais se assemelha as linguagens utilizadas na programacao de computadores
 na direcao inversa, ha uma maior liberdade na elaboracao de algoritmos, aumentando, assim, a capacidade de expressa los.
assim como as linguagens naturais, as linguagens de programacao tem o objetivo de prover um meio eficaz de comunicacao.
elas sao constituidas de um conjunto de palavras especiais, que associadas a um conjunto de regras de utilizacao, determinam como os algoritmos devem ser especificados para que possam ser corretamente decodificados pelo computador.
as linguagens de programacao diferem das naturais de varias formas. 
primeiramente, apesar de ser possivel de serem utilizadas como meio de comunicacao entre pessoas, seu principal proposito e possibilitar a comunicacao entre uma pessoa e um computador
alem disso, as linguagens naturais sao mais tolerantes a erros.
um erro gramatical, por exemplo, nao impossibilita uma conversa entre duas pessoas.
a simples omissao de um ponto e virgula e capaz ate de impedir que a comunicacao seja iniciada. 
o conteudo da comunicacao por meio de uma linguagem de programacao tem um significado especial para a ciencia da computacao
. enquanto que nos expressamos nas linguagens naturais atraves de textos e da emissao de sons, nas linguagens de programacao nos expressamos atraves de programas, que nada mais sao do que algoritmos escritos em uma linguagem de programacao.
o estudo das tecnicas para elaboracao de programas consiste em um dos pilares da ciencia da computacao, conferindo uma importancia particular a disciplina de introducao a programacao. 
os computadores representam as informacoes atraves da manipulacao de dois estados. 
a representacao binaria utiliza os algarismos zero e um, chamados de digitos binarios.
 para representar o bit zero, por exemplo, normalmente utiliza-se um valor proximo a zero volts
para o bit um, utiliza um valor um pouco maior, da ordem de poucos volts.
a tarefa de programar computadores, foram criadas linguagens de programacao mais proximas as linguagens naturais.
elas sao compostas de um conjunto de palavras chave, normalmente em ingles, e simbolos que estabelecem os comandos e instrucoes que podem ser utilizados pelo programador na construcao de seus programas. 
as linguagens com essa caracteristica sao chamadas de linguagens de alto nivel, ao passo que as mais proximas da linguagem de maquina, sao denominadas de linguagens de baixo nivel
se por um lado as linguagens de programacao facilitam o trabalho dos programadores, por outro impossibilita que os programas desenvolvidos nessas linguagens sejam compreendidos pelos computadores, visto que eles sao capazes de manipular apenas codigos binarios
os tradutores podem ser classificados como montadores e compiladores
quando o processo de traducao converte um programa que se encontra no nivel de linguagem de montagem para a linguagem de maquina, o tradutor utilizado e o montador.
ja na traducao de programas em linguagem de alto nivel para a linguagem de montagem, o software responsavel e o compilador.
perceba que nao ha traducao direta da linguagem de alto nivel para a linguagem de maquina.
para que esta seja alcancada, sao necessarios varios passos intermediarios, sendo um deles a traducao para a linguagem de montagem
os interpretadores, alem de realizar a traducao de um programa para a linguagem de maquina, ainda executam suas instrucoes.
os interpretadores, alem de realizar a traducao de um programa para a linguagem de maquina, ainda executam suas instrucoes.
por nao traduzir um programa escrito em linguagem de alto nivel diretamente para linguagem de maquina, o processo de compilacao tende a ser mais rapido que o processo de interpretacao.
cada vez que um programa tiver que ser reexecutado, todo o processo de interpretacao devera ser refeito, independente de ter ocorrido modificacoes no codigo fonte do programa desde sua ultima execucao. 
a vantagem da interpretacao fica por conta da possibilidade de testar os programas ao mesmo tempo em que sao desenvolvidos. 
um paradigma de programacao esta relacionado com a forma de pensar do programador na construcao de solucoes para os problemas com os quais se depara
programar seguindo um determinado paradigma de programacao significa representar solucoes a partir de uma forma particular de raciocinar na elaboracao dos algoritmos. 
como os paradigmas mencionados sustentam a atividade de programas, eles influenciam todo o processo de desenvolvimento de software. 
paradigma imperativo representa a computacao como acoes, enunciados ou comandos que alteram o estado de um programa. 
consiste na elaboracao de programa a partir de comandos que dizem o que o computador deve fazer a cada momento
paradigma estruturado soluciona problemas a partir de sua quebra em problemas menores, de mais facil solucao, denominados de sub-rotinas ou subprogramas.
normalmente, o trabalho de cada sub-rotina consiste em receber dados como entrada, processar esses dados e retornar o resultado do processamento para o modulo de software que o executou.
este paradigma ainda defende que todo processamento pode ser realizado pelo uso de tres tipos de estruturas sequencial, condicional e de repeticao.
paradigma declarativo descreve as caracteristicas da solucao desejada sem especificar como o algoritmo em si deve agir. 
em contraste com o paradigma imperativo, que informa ao computador como as instrucoes devem ser executadas, o paradigma declarativo preocupa-se apenas em definir o que deve ser feito, deixando a cargo de outros softwares decidirem como alcancar a solucao descrita.
digma orientado a objetos enxerga o problema como uma colecao de objetos que se comunicam por meio da troca de mensagens. 
 os objetos sao estruturas de dados que possuem estado e comportamento
a criacao da linguagem c e resultado de um processo evolutivo de linguagens, iniciado com uma linguagem chamada bcpl, desenvolvida por martin richards.
a partir de meados dos anos oitenta, c comecou a ganhar popularidade e, devido a sua flexibilidade em atuar com caracteristicas de linguagens de alto e baixo nivel, foi reconhecida como uma linguagem de proposito geral, sendo utilizada na implementacao de uma grande variedade de sistemas. 
devido a importancia auferida na area da programacao de computadores, c e hoje uma das linguagens mais utilizadas em cursos de programacao do mundo inteiro. 
a organizacao da sequencia de instrucoes em um programa obedece a um conjunto de regras estabelecidas pela linguagem de programacao
um programa em c e estruturado em funcoes, que sao, basicamente, trechos de codigo que podem ser chamados varias vezes para realizar uma certa tarefa. 
em c existe uma funcao especial, denominada de main (principal), que determina o inicio e o fim da execucao de um programa.
de forma mais especifica, a execucao de um programa tem seu inicio com a execucao da primeira instrucao da funcao main e termina com a execucao da sua ultima instrucao.
a memoria principal do computador ou memoria ram e constituida por componentes eletronicos capazes de armazenar dados. 
s. cada digito binario ocupa uma porcao de memoria chamada de bit, e um conjunto de oito bits e denominado de byte. 
a memoria e dividida em celulas de memoria de um byte de tamanho, que podem ser acessadas a partir de um numero unico que as identifica de forma particular. 
esse numero e chamado de endereco e tem a mesma funcao que os enderecos de nossas casas, que e identificar de forma unica nossas residencias, a fim de possibilitar o envio e o recebimento de correspondencias
no caso do computador, as correspondencias sao os dados que serao armazenados nas celulas de memoria. 
uma variavel em programacao representa, atraves de simbolos, o conteudo de uma celula ou posicao de memoria.
em programacao, podemos enxergar a memoria como um conjunto de posicoes que possuem um endereco e uma representacao simbolica
as variaveis podem ter nomes diversos, desde simbolos comuns na matematica, como e o caso das variaveis x, y e z, ate nomes como var, endereco, cpf, etc. as regras para dar nome as variaveis serao apresentadas na proxima secao. 
os valores que as variaveis podem armazenar nao se limitam apenas a valores numericos inteiros.
os nomes que damos as variaveis, rotinas, constantes e demais componentes num programa escrito numa dada linguagem de programacao sao chamados de identificadores.
palavras que possuem significado especial nas linguagens de programacao, como e o caso dos nomes dados as estruturas de controle, tipos de variaveis, dentre outros, sao chamadas de palavras-chave.
os caracteres utilizados sao os numeros, letras maiusculas, minusculas e o caractere especial sublinha
o primeiro caractere deve ser uma letra ou o sublinha
nao sao permitidos espacos em branco
palavras reservadas nao podem ser utilizadas como identificadores
os tipos de dados ou tipo de variaveis sao representados de forma diferente em cada linguagem de programacao, algumas dando suporte a mais tipos que outras
em c ha a possibilidade da criacao, por parte do programador, de tipos particulares, denominados de tipos derivados. 
como as variaveis de tipos primitivos distintos sao representadas na memoria de formas diferentes, elas exigem uma quantidade de bytes distinta para seu armazenamento. 
uma variavel do tipo int, por exemplo, ocupa normalmente quatro bytes na memoria, ao passo que uma variavel do tipo char ocupa apenas um byte.
e importante salientar que o tipo char na linguagem c, diferentemente de outras linguagens, pode tambem armazenar numeros inteiros que requerem apenas um byte de memoria.
o que ocorre e que ha uma correspondencia entre um caractere e um numero inteiro, conforme uma tabela padrao. por exemplo, quando atribuimos a variaveis do tipo char valores como a, b e c, na verdade estamos atribuindo os valores inteiros noventa e sete, noventa e oito e noventa e nove .
os numeros inteiros que correspondem aos caracteres estao todos listados em uma tabela padrao, conhecida como tabela ascii.
short ou long se referem ao tamanho das variaveis
signed ou unsigned indicam, respectivamente, se as variaveis do tipo int poderao ser positivas e negativas ou apenas positivas
a qualificacao de tipo e realizada quando os qualificadores sao antepostos aos tipos.
uma variavel do tipo unsigned long int armazena inteiros positivos de tamanhos grandes, enquanto que uma variavel do tipo signed short int armazena inteiros positivos e negativos de tamanhos menores.
dessa forma, assuntos mais comentados tendem a aparecer para mais pessoas,mas também estão relacionados com preferências, histórico, comportamento etc
dessa forma, é essa sistematização que viabiliza todo tipo de softwares que facilitam a vida e também permitem a automação dos processos
dessa forma, o algoritmo vai crescendo e ficando mais complexo para englobar todos os cenários possíveis 
dessa forma, torna-se indispensável que haja qualidade e relevância nos conteúdos criados para as diferentes plataformas, além de considerar as estratégias de seo para executá-los
dessa forma, um algoritmo é uma descrição passo a passo de como o computador irá executar uma operação específica, como, por exemplo, uma ordenação
desta forma, as demais rotinas e o programa principal não poderão fazer uso daquelas variáveis como global, pois não visualizam a existência das mesmas
desta forma, é possível passar valores de uma rotina a outra rotina, através do uso de parâmetros que poderão ser formais ou reais
desta forma, poderá executar um determinado conjunto de instruções enquanto a condição verificada permanecer verdadeira
desta forma, qualquer modificação feita no parâmetro formal, implica em alteração no parâmetro real correspondente
desta forma, repeat irá processar um conjunto de instruções, no mínimo uma vez, até que a condição se torne verdadeira
desta forma, se todos os casos base e regras se demonstrarem calculáveis, então qualquer sistema matemático pode ser também calculado
desvantagens do modelo mvc não é aconselhável para pequenas aplicações
desvantagens do modelo mvc requer pessoal especializado
desvantagens do modelo mvc requer uma quantidade maior de tempo para analisar e modelar o sistema
determinístico ou não-determinístico - algoritmos determinísticos resolvem o problema com uma decisão exata a cada passo enquanto algoritmos não-determinísticos resolvem o problema ao deduzir os melhores passos através de estimativas sob forma de heurísticas
devemos assumir que ao declararmos um determinado vetor índice com um índice específico estamos fazendo referência a um número
devemos lembrar que quem  faz  o  programa,  raramente  testa  seus  pontos  deficientes
devemos observar que para podermos afiançar se um programa funciona com o desempenho necessário, o processo empírico é muito frágil para garantir algo
devemos usar a nossa lógica para desenvolver um software e, em computação, lógica é a base para tudo
devemos utilizar essa estrutura quando sabe-se de antemão o número de vezes que o laço deverá ser executado
deve-se observar que, caso o bloco de código nunca modificar o estado da condição, a estrutura será executada para sempre, uma situação chamada laço infinito
deve-se perceber que para um dado algoritmo pode-se ter diferentes quantidades de recursos alocados de acordo com os parâmetros passados na entrada
deve-se usar a estrutura para quando o número de repetições é controlado por uma variável controladora
deve-se usar a estrutura para quando o número de repetições é controlado por uma variável controladora, quando há inicialização e atualização, mas que sejam simples o suficiente para que sejam acomodadas na linha do para
deve-se, contudo, ter o cuidado de modificá-la dentro do laço para que não caiamos em um laço infinito
diferentemente de outras redes sociais, o twitter não usa exclusivamente o algoritmo para determinar o feed. isso se deve ao caráter cronológico que precisa ser mantido pela rede para que atenda ao objetivo de disponibilizar os acontecimentos mais recentes
diferentes algoritmos podem realizar a mesma tarefa usando um conjunto diferenciado de instruções em mais ou menos tempo, espaço ou esforço do que outros
diferentes linguagens de programação funcionam de diferentes modos
diferentes linguagens de programação podem ser agrupadas segundo o paradigma que seguem para abordar a sua sintaxe e semântica
diferentes partes de um programa podem ser escritas em diferentes linguagens
dispositivo de entrada é o meio pelo qual as informações mais especificamente os dados são transferidos pelo usuário ou pelos níveis secundários de memória ao computador
dispositivo de saída é o meio pelo qual as informações geralmente os resultados da execução de um programa são transferidos pelo computador ao usuário ou aos níveis secundários de memória
diversas linguagens relevantes hoje ainda utilizam o paradigma estruturado, embora possuam suporte para a orientação ao objeto e para outros paradigmas de programação
divisão e conquista algoritmos de divisão e conquista reduzem repetidamente o problema em sub-problemas, geralmente de forma recursiva, até que o sub-problema é pequeno o suficiente para ser resolvido
diz-se então que o procedimento ou função é recursivo
diz-se que um software é case-sensitive ou possui case sensitivity[nota 2] quando ele é capaz de analisar uma cadeia de caracteres, avaliar a existência de caixa alta e caixa baixa e comportar-se de diferentes maneiras em função disso
do mesmo modo que em um laço while, se a condição de um laço for já é falsa logo na primeira avaliação que se fizer dela, as instruções contidas em seu corpo jamais serão executadas
do ponto de vista do processador, as interrupções de hardware podem ser consideradas como condições análogas às exceções que permitem prosseguimento da execução, apesar destas exceções não serem normalmente relacionadas com o fluxo normal do programa
do while é muito parecido com o while, porém tem uma diferença crucial condição é verificada após executar o bloco de comandos
do while são repetidos enquanto a expressão lógica for verdadeira, ou seja, o ciclo de processamento termina quando a condição se tornar falsa
do while tem um comportamento muito semelhante ao while, com uma diferença crucial a condição é verificada após executar o bloco de instruções correspondente
documentar o projeto, descrevendo a especificação do código desta maneira, qualquer pessoa poderá analisar um arquivo de documentação, mesmo que este não apresente o código fonte
documentos compactados em todos os formados, mesmo representações muito grandes em json ou xml apresentam tamanho idêntico após a compressão
dois cuidados ao criar estruturas de repetição enquanto inicializar a variável que controla o laço antes do início do laço
dois cuidados ao criar estruturas de repetição enquanto inicializar a variável que controla o laço dentro do laço, pois se isto não for feito cairemos no que chamamos um laço infinito e de lá o nosso programa não sairá
dos: esta unidade possui as rotinas que envolvem a utilização do sistema operacional, na maior parte das vezes permitindo controles de baixo nível
durante a execução de uma expressão que envolve vários operadores, é necessário a existência de prioridades, caso contrário poderemos obter valores que não representam o resultado esperado
durante algum tempo contaram com mais usuários que as tradicionais linguagens de programação cobol, c, pascal e basic
durante o processo de tradução de uma publicação científica italiana sobre o projeto de babbage, ela incluiu algumas notas de tradução que constituem o primeiro programa escrito na história da humanidade. muito justamente, ada também foi eternizada com o nome de uma linguagem de computador que leva seu nome
é a descrição, de forma lógica, dos passos a serem executados no cumprimento de determinada tarefa
é a forma pela qual descrevemos soluções de problemas do nosso mundo, afim de serem implementadas utilizando os recursos do mundo computacional
é a única linguagem que um microprocessador pode entender nativamente
é apenas uma série de instruções simples que são realizadas para resolver um problema
é aquilo que popularmente chamamos de fila, embora essa nomenclatura se aplique ao mesmo conceito acadêmico, apenas com uma definição mais precisa
é baseada no princípio, em se passar sempre o menor valor do vetor para a primeira posição, depois o de segundo menor valor paraa segunda posição, e assim sucessivamente
é chamado também transformação e conquista
e como toda receita, um algoritmo também deve ser finito
é comum, em programação, decompor a lógica de programas complexos em programas menores e, depois, juntá-los para compor o programa final
é considerada de segunda geração, pois embora não seja uma linguagem nativa do microprocessador, um programador que use a linguagem assembler ainda deve compreender as características da arquitetura do microprocessador como registradores e instruções
é considerada o paradigma fundamental da programação lógica, sendo o oposto da programação procedimental, que é típica das linguagens convencionais
é considerado um padrão de projeto uma solução já testada e documentada que possa resolver um problema específico em projetos distintos
é conveniente pensar que uma definição recursiva define objetos em termos de objetos previamente definidos dessa mesma classe que está sendo definida
é criado em um mil e novecentos e quarenta e sete, na universidade de stanford eua, o transistor, usado somente a partir da década posterior
é dever do programador saber qual o tipo de variável que o problema requisita
é diferente da forma normal de programação na medida em que invoca de certa forma as facilidades de metaprogramação da linguagem
é diferente também da programação por macros, já que esta refere-se somente a busca e substituição de termos, não fazendo parte da gramática da linguagem, implementada somente na fase de pré-processamento do código
é fácil perceber que simplesmente as chaves do java foram substituídas pelas palavras begin-end em pascal, que representam o começo e o final do bloco de instruções
é forma de organização através da enumeração de dados para melhor visualização da informação
é frequentemente utilizado para especificar que uma subclasse deve fornecer uma implementação do método
é fundamental compreender que o algoritmo se justifica no resultado que ele almeja alcançar, logo, deve ter um objetivo específico
é importante construir árvores binárias com altura mínima a árvore completa possui tal propriedade
é importante desenhar, rascunhar e usar de todos os artifícios para montar a lógica que nos leve à solução ou mesmo a um raciocínio intermediário
é importante notar que o algoritmo tem de ser finito e executa instruções de forma sistemática, ou seja, ele é cego diante do que está fazendo, e os passos com os que opera são elementares
é importante notar que o algoritmo tem um fluxo que pode seguir diferentes caminhos dependendo da situação em que se encontra
é importante salientar que cada iteração se refere a apenas uma instância da ação, ou seja, cada repetição possui uma ou mais iterações
é importante salientar que um algoritmo simplesmente diz o que deve ser feito
é mais fácil fazer o teste de mesa do que elaborar o algoritmo, sendo a elaboração de uma solução algorítmica algo que exige maior capacidade do programador 
é muito frequente no desenvolvimento de algoritmos nos encontrarmos em um ponto de decisão
é muito simples adicionar novos clientes apenas incluindo seus views e controles no modelo mvc
é necessário definir algoritmos antes de serem utilizadas para permitir que o compilador reserve um espaço na memória para as mesmas
e o bloco de instruções é o conjunto de instruções que estão subjugadas ao comando se
é o menos performático dos métodos, mas também por isso, o mais simples de todos
é o principal componente dos computadores de segunda geração
e os refinamentos de cada procedimento em outros procedimentos, obteremos, ao fim do processo de criação, um algoritmo estruturado
e para reutilização de um módulo em outros algoritmos e programas, no futuro
é possível aprender algoritmos e lógica de programação mesmo sem ser um craque nas exatas
é possível distribuir a carga de processamento de aplicações desenvolvidas em diversos servidores
é possível também fazer a subtração entre dois ponteiros
é possível ter desenvolvimento em paralelo para o modelo visualizador e controle pois são independentes
é possível ter desenvolvimento em paralelo para o modelo, visualizador e controle pois são independentes no modelo mvc
é possível ter várias visões do mesmo dado como um gráfico de barras para gerenciamento e uma visão tabular para contadores
é provável que o algoritmo do google seja o mais conhecido e não é por acaso que seu segredo é muito bem guardado pela empresa
é realmente fundamental pelo menos saber ler em inglês, pois os códigos são escritos nessa língua
é relacionada com a metaprogramação, mas não envolve a geração de código fonte, pelo menos visivelmente ao programador
é relevante que a estrutura do código siga uma lógica sistemática
é sempre bom saber antes se o json é valido
é também considerada uma linguagem de baixo nível, mas ainda hoje é utilizada
é um conjunto de variáveis do mesmo tipo acessíveis com um único nome
é um conjunto de regras sintáticas e semânticas usadas para definir um programa de computador
é um programa de livre uso e distribuição, empregado no ensino de programação em várias escolas e universidades no brasil e no exterior
é um refinamento do método de inserção direta
é um símbolo que associamos a um banco de dados que é composto por um conjunto de tabelas, porque são que matrizes bidimensionais
é uma boa técnica ao se construir um procedimento, não fazer uso no mesmo, de variáveis globais e referenciar e utilizar apenas as variáveis locais e os parâmetros do procedimento
é uma estrutura que repete um bloco de código enquanto uma condição permanecer verdadeira
é uma implementação concreta de um tipo abstrato de dado tad ou um tipo de dado td básico ou primitivo
é uma sequência finita e ordenada de passos (regras), com um esquema de processamento que permite a realização de uma tarefa
é utilizado para contar o número de vezes que um evento ou uma instrução ocorre, ou seja, um contador conta a quantidade de vezes que uma instrução é executada
é utilizado uma variável para controlar o número de repetições
é, provavelmente, o primeiro algoritmo complexo e formalizado de que se tem notícia
eds eficientes são cruciais para a elaboração de algoritmos, diversas linguagens possuem ênfase nas eds, como evidenciado pela poo
efetua a tradução de linguagem de montagem  assembly  para a linguagem de máquina
eficiência refere-se à velocidade de processamento e a correta utilização da memória um programa deve ter performance suficiente para atender às necessidade do problema e do usuário
ela é composta por células que apontam para o próximo elemento da lista
ela fornece funções úteis para trabalhar com tipos primitivos
ela pode ser entendida como uma abstração que estabelece a forma de interação da entidade com o mundo exterior, através da separação dos métodos de comunicação externa dos detalhes internos da operação, permitindo que esta entidade seja modificada sem afetar as entidades externas que interagem com ela
ela possui a maior parte das rotinas e variáveis de geração de som, controle de vídeo e teclado
ela preocupa-se com os recursos necessários para a execução do algoritmo tais como o tempo de execução e o espaço de armazenamento de dados
elas são conhecidas e podem ser alteradas por todas as funções do programa
ele ajuda os estudantes na área da computação a aprimorar o raciocínio lógico e a programar, pois essa ferramenta só usa palavras do nosso idioma
ele apenas responde a requisições por informações de quem quer que seja e requisita por transformações nas informações feitas pelo controlador
ele é chamado compilador por razões históricas; nos primeiros anos da programação automática, existiam programas que percorriam bibliotecas de sub-rotinas e as reunia, ou compilava,[nota 1] as subrotinas necessárias para executar uma determinada tarefa
ele é executado por um objeto ao receber uma mensagem
ele é recomendado para os iniciantes, porem há várias outras ides utilizadas para programar, como o eclipse, por exemplo
ele é representado pelo identificador boolean
ele é utilizado principalmente em algoritmos quando a linguagem utilizada não possui nenhuma ferramenta automatizada de depuração
ele era formado por william selden e gertrude tierney da ibm howard bromberg e howard discount da rca vernon reeves e jean e. sammet da sylvania electric products
elementos de um vetor array são representados através de conjuntos de variáveis de um determinado tipo de dados 
eles ajudam a você também: usando protótipos, o compilador evita erros, não deixando que o programador use funções com os parâmetros errados e com o tipo de retorno errado, o que é uma grande ajuda
eles podem repetir passos fazer iterações ou necessitar de decisões tais como comparações ou lógica até que a tarefa seja completada
eles têm acesso somente a lista de sub-rotinas empilhadas, e não à memória da pilha de chamada em si
eles têm uma cláusula receptora que ordena em que tipo eles atuam
em  java,  por  exemplo,   usamos  a  instrução system.out.printalgo  para imprimire no c, console.write imprima isso desempenha este papel
em  plsql,  por  exemplo, os contadores de uma estrutura  de repetição para a ser vista mais adiante, também não devem ser declarados
em algoritmos, vamos nos ater apenas nos tipos numéricos, caracteres e booleanos
em algumas linguagens de programação, como o pascal e o cobol, é impensável expandir o tamanho de um vetor, pois essas linguagens tratam os vetores em posições contíguas de memória, o que impede eventuais expansões
em algumas linguagens esse tipo strings em java são objetos que contém uma cadeia de caracteres
em algumas linguagens, entretanto, a indentação é obrigatória python, occam e haskell, por exemplo, utilizam a mudança de indentação para definir a hierarquia dentre blocos de código
em alguns casos é mais apropriado definir as variáveis como parte das interfaces
em alguns contextos, como em programação lisp, o termo lista pode se referir especificamente à lista encadeada em vez de um array
em alguns contextos, o termo modelagem orientada ao objeto moo é preferível ao termo poo
em alguns sistemas computacionais concorrentes, a comunicação entre os componentes é escondida do programador, enquanto em outros a comunicação deve ser lida explicitamente
em alguns sistemas o quadro de pilha possui um campo que contém o valor anterior do registrador ponteiro de quadro, isto é, o valor desse registrador enquanto o quadro anterior estava em execução
em ambas as linguagens a aritmética de ponteiros é quase irrestrita adicionar ou subtrair de um ponteiro o movimenta tendo como unidade o tamanho do tipo de dados para o qual ele aponta
em ambas ocorre a tradução do código fonte para código de máquina
em assembler o chip faz exatamente aquilo que lhe é comandado, mesmo que não faça sentido algum
em assembler para corrigir erros de digitação é tão fácil ou complicado como qualquer outra linguagem
em assembler todas as características de proteção devem ser programadas por você
em assembly acessos via ponteiros são feitos com comandos especialmente designados
em assembly instruções nunca iniciam na coluna um
em assembly uma aplicação muito especial para os ponteiros é acessar os próprios registradores
em boas práticas de programação em csharp é necessário colocar espaços dos dois lados dos operadores aritméticos
em boas práticas de programação em csharp é necessário colocar nas funções, que imprimem alguma mensagem, como último caractere de impressão, um comando de fim de linha
em boas práticas de programação em csharp é necessário colocar sempre o default no comando switch para chamar a atenção em casos excepcionais
em boas práticas de programação em csharp é necessário colocar sempre uma linha em branco entre a declaração de variáveis e os comandos seguintes
em boas práticas de programação em csharp é necessário colocar um espaço após cada vírgula ou ponto e vírgula na estrutura for
em boas práticas de programação em csharp é necessário começar o nome dos identificadores com letra maiúscula, e, da mesma forma, cada palavra das variáveis com nomes compostos
em boas práticas de programação em csharp é necessário começar todo programa com um comentário descrevendo a finalidade do mesmo
em boas práticas de programação em csharp é necessário consultar as tabelas de precedência dos operadores aritméticos e, em caso de dúvida
em boas práticas de programação em csharp é necessário controlar as repetições com valores inteiros
em boas práticas de programação em csharp é necessário declarar as variáveis sempre no início das funções
em boas práticas de programação em csharp é necessário declarar cada variável em uma linha para facilitar a escrita de comentários
em boas práticas de programação em csharp é necessário digitar as chaves, parênteses e colchetes abrindo e fechando antes de digitar os comando ou expressões entre eles
em boas práticas de programação em csharp é necessário escolher nomes significativos para as variáveis
em boas práticas de programação em csharp é necessário escrever os operadores unários sempre próximos das variáveis sem espaços
em boas práticas de programação em csharp é necessário escrever os programas de maneira bem simples e direta
em boas práticas de programação em csharp é necessário escrever parênteses, ainda que redundantes, para facilitar o entendimento de expressões aritméticas
em boas práticas de programação em csharp é necessário escrever sempre chaves nos comandos de controle ifelse, while, for etc, mesmo que não seja obrigatório
em boas práticas de programação em csharp é necessário escrever um comando por linha
em boas práticas de programação em csharp é necessário estabelecer um critério de espaços nos recuos
em boas práticas de programação em csharp é necessário evitar alterar as variáveis de controle do laço for, dentro do corpo do laço
em boas práticas de programação em csharp é necessário evitar muitos níveis de indentação, pois estes tornam os programas difíceis de serem entendidos
em boas práticas de programação em csharp é necessário explicitar os valores dos flags nas entradas de dados que os contêm
em boas práticas de programação em csharp é necessário fazer indentação no corpo de uma estrutura
em boas práticas de programação em csharp é necessário fazer pequenos programas para testar os comandos da linguagem
em boas práticas de programação em csharp é necessário identar o corpo de todos os comandos if else
em boas práticas de programação em csharp é necessário imprimir mensagens de erro em expressões que tenham restrições de valores
em boas práticas de programação em csharp é necessário indentar todos os níveis com o mesmo espaçamento
em boas práticas de programação em csharp é necessário inicializar as variáveis ao declará-las, sempre que possível
em boas práticas de programação em csharp é necessário inicializar contadores, somatórios ou produtórios
em boas práticas de programação em csharp é necessário ler documentos a respeito da versão da linguagem csharp ou a que estiver usando
em boas práticas de programação em csharp é necessário ler e estude cada mensagem de erro emitida pelo compilador
em boas práticas de programação em csharp é necessário quebrar um comando longo em comandos menores e mais simples
em boas práticas de programação em csharp é necessário recuar o corpo de uma função endentação, fazendo com que a mesma fique mais legível
em boas práticas de programação em csharp é necessário separar os comandos longos em várias linhas, quebrando-as em pontos que façam sentido
em boas práticas de programação em csharp é necessário solicitar ao usuário os valores a serem digitados, com mensagens adequadas
em boas práticas de programação em csharp é necessário terminar toda função com return
em boas práticas de programação em csharp é necessário testar os programas exaustivamente
em boas práticas de programação em csharp é necessário usar o valor absoluto da diferença entre dois números reais
em boas práticas de programação em csharp é necessário usar um pseudocódigo para bolar um programa
em c e c mais mais, ponteiros são variáveis que armazenam endereços e podem ser nulas
em c mais mais a declaração de constantes simbólicas é efetuada através do modificador const
em c mais mais esse tipo de instrução não existe, contudo, através do comando goto
em c mais mais, uma variável deve estar associada a um dos tipos de dados primitivos ou a uma classe definida pelo programador, sendo neste caso denominada um objeto
em c, ponteiros de tipos diferentes possuem seus próprios valores nulos, isto é, um ponteiro nulo do tipo char é diferente de um ponteiro nulo do tipo int
em caso contrário, irá para berlim. todavia, podemos inserir novas variáveis
em ciência da computação, estrutura de controle ou fluxo de controle refere-se à ordem em que instruções, expressões e chamadas de função são executadas ou avaliadas em programas de computador sob programação imperativa ou funcional
em ciência da computação, um algoritmo é uma sequência finita de ações executáveis que visam obter uma solução para um determinado tipo de problema
em cobol a seção de configuração fornece informações sobre o sistema no qual o programa está escrito e executado
em cobol as declarações são significativas em cobol declarações fazem parte do processamento
em cobol as seções são a subdivisão da lógica lógica do programa uma seção é uma coleção de números
em cobol as sentenças são a combinação de um ou mais comandos
em cobol capítulo articulação é usada para descrever os dados nomes que são recebidas de um programa externo
em cobol computador de origem é um sistema utilizado para compilar o programa
em cobol controle de arquivo fornece informações sobre conjuntos de dados externos
em cobol insumo seção fornece informações sobre os arquivos que serão usados no programa 
em cobol objeto computador  é o sistema utilizado para executar o programa
em cobol os pontos são a subdivisão de uma seção ou divisão
em cobol personagens são os mais baixos da hierarquia e não pode ser divisível
em cobol seção de arquivo é usado para definir a estrutura do registro do arquivo
em cobol seção local-storage working-storage é semelhante à secção
em cobol seção working-storage é usado para declarar variáveis temporárias e estruturas de arquivos que são usados no programa
em cobol, o espaço existente é obrigatoriamente estabelecido
em computação um vetor array ou arranjo é o nome de uma matriz unidimensional considerada a mais simples das estruturas de dados
em computação, podemos definir um algoritmo como sendo uma forma genérica de se representar procedimentos computacionais que, quando executados, levam à solução de uma classe de problemas de natureza semelhante
em determinado momento de nossa aplicação gostaríamos de ter o controle sobre a construção dos objetos da nossa classe
em diversas linguagens de programação a pilha de chamada possui uma área limitada de memória, geralmente determinada no início do programa
em do while há uma bloco de comandos e logo depois uma verificação assim caso a variável condicional for alterada dentro do bloco de comandos, isso afetará a validação da condição
em dois mil e onze, uma situação não explicada fez com que o livro the making of a fly, de peter lawrence, alcançasse o valor de um vírgula sete bilhão de dólares na amazon e, em seguida, subisse para quase vinte e três vírgula sete bilhões de dólares mais frete. a empresa, que usa algoritmo para precificação, não conseguiu explicar a anormalidade
em encapsulamento nível de classe é quando determinamos o acesso de uma classe inteira que pode ser public ou package-private
em encapsulamento nível de membro é quando determinamos o acesso de atributos ou métodos de uma classe que podem ser public, private, protected ou package-private
em geral a eficiência ou complexidade de um algoritmo é função do tamanho do problema
em geral, na ocorrência de uma exceção, o estado do programa é gravado em um local pré-definido e a sua execução é direcionada para uma rotina de tratamento
em geral, pelo menos no processo de desenvolvimento de um algoritmo, fazemos alguns testes, habitualmente com um conjunto finito e bem determinado de itens
em geral, pelo menos no processo de desenvolvimento de um algoritmo, fazemos alguns testes, habitualmente com um conjunto finito e bem determinado de itens, capazes de permitir a realização de testes que nos permitam descobrir erros grosseiros
em geral, um programa em uma linguagem imperativa deixa de ser uma expressão e passa a ser um comando
em go as interfaces declaram um conjunto de métodos
em go embora seja possível aplicar a maioria dos conceitos de orientação a objetos, muitos dos conceitos conhecidos ou estão diferentes ou inexistem
em go, não existe classes, porém tem structs tipos definidos pelos usuários
em golang a natureza e o estilo dos comentários determina a qualidade da documentação que godoc produzirá
em golang cada pacote deve ter um pacote comentário, um bloco comentado que precede a cláusula do pacote
em golang comentários não precisam de formatação extra
em golang para converter o array de bytes para um map, você pode utilizar a função unmarshal do pacote json
em golang se o pacote é simples, o comentário pacote pode ser breve
em golang usamos a função readfile do pacote ioutil para carregar e ler o arquivo
em java a classe deve estar em um arquivo fonte source file e deve ir com um par de chaves são nessas chaves que serão colocados os métodos
em java cada classe class é colocada em um arquivo source esses arquivos representam partes de uma aplicação ou toda a aplicação no caso de programas muito pequenos
em java os operadores lógicos são simbolizados como e comercial, exclamação igual, entre outros
em java, costumamos utilizar o termo atributo, que é nada além do que uma variável que está dentro de uma classe
em java, por exemplo, usamos a instrução system.out.print algo para imprimir e no c sharpe, console.writeimprima isso desempenha este papel
em java, procuramos sempre trabalhar orientado a objeto, portanto essa nosso servlet será também um objeto de uma classe java
em laços while e do-while, uma instrução continue desvia o fluxo de execução para a condição
em linguagem c, a instrução varia levemente, printf, mas há necessidade de envio de um caractere especial solicitando o salto de linha \n.
em linguagem c, ao contrário de outras linguagens, não existe um tipo de dados string nativo
em linguagem c, contudo, o problema não é resolvido tão facilmente
em linguagens baseadas em classe eles são definidos na classe
em linguagens com tipos de dados fracos, tais como php e vbscript, a conversão não se faz necessária, sendo realizada implicitamente pelo compilador ou interpretador
em linguagens lógicas de programação, os programas consistem em instruções lógicas e o programa é executado procurando provas das instruções
em linguagens orientadas a objetos um iterador, mesmo que implícito, é frequentemente utilizado como meio de travessia
em linguagens puramente imperativas, como assembly, é muito fácil o programador criar códigos de difícil leitura, pois esse tipo de linguagem possui o que se chama de saltos jumps em sua estrutura
em linguagens que aceitam a técnica, outros tipos de aninhamento também são geralmente aceitos, como o aninhamento de constantes e tipos de dado
em linguagens tipadas, apenas informações do mesmo tipo serão armazenadas nas variáveis, ou seja, não é possível armazenar um caractere em um inteiro ou vice-versa
em lisp a função zerop testa se o argumento é zero
em lisp cond é uma condicional segindo cond vêm pares de funções
em lisp defun serve para definir uma função após a definição o sistema retorna o nome da função
em lisp interpretador é implementado usando estruturas de listas encadeadas
em lisp listas também podem ser avaliadas para valores
em lisp se existir dependência entre as definições de constantes é necessario usar let
em matemática, problemas de programação linear são problemas de otimização nos quais a função objetivo e as restrições são todas lineares
em muitas variáveis criadas, somente através de seu nome nem sempre é possível saber que informação ela irá armazenar ou para que ela servirá, por isso, não deixe de comentá-la nesses casos
em muitos contextos, pode-se assumir que programação estruturada é sinônimo de programação sem goto sem pulos, sem redirecionamentos arbitrários do ponteiro da sequência de instruções em execução
em nível de linguagem de máquina, as instruções de estruturas de controle geralmente funcionam ao alterar o contador de programa
em nosso dia a dia utilizamos algoritmos para realizar nossas atividades
em nosso dia a dia utilizamos algoritmos para realizar nossas atividades, definindo a sequência de atividades que devemos fazer para atingir um objetivo
em outras estruturas de dados, como listas encadeadas, ponteiros são usados como referências para intercalar cada elemento da estrutura com seus vizinhos
em outras linguagens, como o basic, essa expansão é possível, mas deve ser cuidadosamente utilizada, pois se a extensão do vetor passar de certos limites e violar o espaço de memória disponível, só restará ao sistema operacional suspender a execução do programa gerando um erro de execução
em outras palavras, carregada essa matriz, poderíamos apresentar seus dados usando dois índices totalmente diferentes
em outras palavras, isso também mostra como os algoritmos e a lógica de programação é mais simples do que parece
em outras palavras, o que se deseja efetivamente é avaliar o desempenho do algoritmo independentemente de sua implementação, em função apenas das instruções executadas
em particular, a programação restritiva e a programação lógica descrevem propriedades da solução desejada, não especificando como o algoritmo em si deve agir
em pascal existem estruturas que nos permitem agrupar várias informações dentro de uma mesma variável estas estruturas são chamadas de vetores e matrizes
em pascal temos write algo a imprimir ou writeln algo a imprimir
em pascal, os tipos registro devem ser declarados ou atribuídos antes das definições das variáveis, pois é muito comum ocorrer a necessidade de se declarar uma variável com o tipo de registro atribuído
em pascal, write/writeln, como em java
em pl/sql, por exemplo, os contadores de uma estrutura de repetição para a ser vista mais adiante, também não devem ser declarados
em poo, programas de computadores são projetados por meio da composição de objetos que interagem com outros
em português estruturado, por conseguinte, é opcional declarar ou não uma variável antes de usá-la
em programação orientada a objetos, chama-se instância de uma classe, um objeto cujo comportamento e estado são definidos pela classe
em programação, a utilização de interfaces permite a composição de componentes de um software sem que a sua implementação seja conhecida
em qualquer tipo de aninhamento é necessário que a construção interna esteja completamente embutida na construção externa
"em recursividade, uma função chama a si mesma 
repetidamente, até atingir uma condição de parada"
em requisições web é necessario definir no header o formato a ser recebido
em resposta cada view tem a oportunidade de modificar se
em se tratando de algoritmos, entretanto, poderemos definir nossos procedimentos e funções em qualquer parte do algoritmo principal ou depois dele, adotando os formatos que se seguem e as normas de documentação
em seguida, esse código escrito numa linguagem de programação o programa deve ser transformado num programa executável num computador, portanto esse programa deverá ser compilado processo de validação da sintaxe utilizada e linkeditado processo de montagem do programa executável
em sequência, surgem os minicomputadores e derivados, até chegarmos aos microcomputadores e seus derivados, como o notebook
em sistemas com alocação explícita de memória, é possível tornar um ponteiro inválido ao desalocar a região de memória apontada por ele
em sistemas que não utilizam o conceito de exceções as rotinas devem retornar algum código de erro especial
em termos simples, um endereço de memória, ou índice numérico, é definido para cada unidade de memória no sistema, no qual a unidade é tipicamente um byte ou uma word, o que em termos práticos transforma toda a memória em um grande vetor
em todas as linguagens de programação dispomos de um conjunto de instruções para leituras nos mais diversos dispositivos, que resultam em entradas de dados
em todos os vetores tem o primeiro elemento na posição zero
em um algoritmo, as variáveis, tipos e constantes declaradas logo após o identificador do algoritmo, são acessíveis e visíveis dentro de qualquer procedimento que esteja sendo usado pelo algoritmo
em um computador digital existem diversos tipos diferentes de software, em camadas, com finalidades e complexidades diferentes
em um json é possivel representar mais de um objeto complexo
em um laço do-while, por outro lado, a condição somente é avaliada depois que suas instruções são executadas pela primeira vez, assim, mesmo que a condição desse laço seja falsa antes de ele iniciar, suas instruções serão executadas pelo menos uma vez
em um laço for, ela desvia o fluxo de execução para a iteração e, em seguida, a condição é lida novamente
em um laço while, a condição é testada antes da primeira execução das instruções que compõem seu corpo
em um mil e novecentos e cinquenta e nove, surge o cobol, com uma série de melhorias na entrada e saída de dados
em um mil e novecentos e quarenta e cinco, os primeiros computadores e suas salas lembravam mais ambientes de filmes de terror com suas válvulas, programação como os fios e outros apetrechos – do que a moderna computação
em um mil e novecentos e quarenta e sete, pelo húngaro john von neumann, com base em seus estudos feitos sobre o eniac, surge a definição do esquema básico de funcionamento dos computadores atuais
em um mil e novecentos e sessenta e sete, surge o simula sessenta e sete, que introduz os conceitos de orientação a objetos, que muitos anos depois se tornaria o padrão a ser seguido por quase todas as linguagens de programação
em um mil e novecentos e setenta e três, surge a linguagem c, aproveitando a linguagem bcpl, criada por dennis ritchie, da at&t
em um mil e novecentos e trinta e sete, o norte-americano howard aiken cria o primeiro computador eletromecânico, denominado mark i
em um registro poderemos utilizar uma estrutura que agrupe várias informações, que podem ser de tipos de dados diferentes
em uma árvore binária toda folha está no último ou penúltimo nível
em uma classe java são colocados os métodos methods
em uma linguagem funcional pura, como haskell, todas as funções não têm efeitos colaterais e as alterações de estado, são representadas apenas como funções que transformam o estado, que é explicitamente representado como um objeto de primeira classe no programa
em várias linguagens, ponteiros possuem a restrição adicional de apontar para objetos de um tipo específico de dado
em vez de forçá lo a manter a alocação de memória ou usar uma biblioteca de terceiros para isso a plataforma Java fornece gerenciamento de memória fora do padrão
em c, a implementação de um procedimento é uma função do tipo void
em c, cadeias de caracteres são tipos compostos, enquanto em dialetos modernos de basic e em javascript esse tipo é nativo da linguagem
em ciência da computação um algoritmo é uma sequência finita de ações executáveis que visam obter uma solução para um determinado tipo de problema
em ciência da computação a análise de algoritmos tem como função determinar os recursos necessários para executar um dado algoritmo
em ciência da computação tipos de variáveis ou dados é uma combinação de valores e de operações que uma variável pode executar, o que pode variar conforme o sistema operacional e a linguagem de computador
em ciência da computação, boolean é um tipo de dado primitivo que possui dois valores, que podem ser considerados como zero ou um, falso ou verdadeiro 
em ciência da computação, mais especificamente no contexto da programação, uma sub-rotina consiste em uma porção de código que resolve um problema muito específico, parte de um problema maior 
em ciência da computação, um algoritmo é uma sequência finita de ações executáveis que visam obter uma solução para um determinado tipo de problema
em ciência da computação, uma lista ou sequência é uma estrutura de dados abstrata que implementa uma coleção ordenada de valores, onde o mesmo valor pode ocorrer mais de uma vez
em ciência da computação, uma pilha de chamada ou pilha de execução é uma pilha que armazena informações sobre as sub-rotinas ativas num programa de computador
em ciência da computação, indentação recuo, neologismo derivado da palavra em inglês indentation[1][2] é um termo aplicado ao código fonte de um programa para ressaltar ou definir a estrutura do algoritmo
em informática, o conceito expande-se para uma estrutura de dados dinâmica, em oposição aos vetores, que são estruturas de dados estáticas
em linguagens de alto nível, detalhes da pilha de chamada são geralmente escondidos do programador
em linguagens de programação orientada a objetos, listas normalmente são fornecidas como instâncias ou subclasses de uma classe lista genérica
em linguagens híbridas, o compilador tem o papel de converter o código fonte em um código chamado de byte code, que é uma linguagem de baixo nível
em ocaml, a programação genérica é implementada através de polimorfismo
em orientação a objetos, uma função ou função membro é uma sub-rotina ou procedimento ou função associada a um objeto, e que possui acesso aos seus dados, as variáveis membro
em programação de computadores, um arranjo em inglês array é uma estrutura de dados que armazena uma coleção de elementos de tal forma que cada um dos elementos possa ser identificado por, pelo menos, um índice ou uma chave
em programação orientada a objetos, os programadores podem abstrair um programa como uma coleção de objetos que interagem entre si, enquanto em programação funcional os programadores abstraem o programa como uma sequência de funções executadas de modo empilhado
em programação, um ponteiro ou apontador é um tipo de dado de uma linguagem de programação cujo valor se refere diretamente a um outro valor alocado em outra área da memória, através de seu endereço
em programação, uma subrotina aninhada ou função aninhada é uma subrotina encapsulada noutra
embora a linguagem c também seja tipada, ela o é de maneira fraca, isto é,se você tentar fazer uma operação como somar um caractere a um número, ela tentará solucionar isso para você, se isso for de interesse
embora a montagem seja um processo simples, é tedioso e passível de erros quando feito manualmente
embora algumas  linguagens  permitam,  se atenham ao uso  de apenas caracteres válidos na língua  inglesa
embora algumas linguagens permitam, atenha-se ao uso de apenas caracteres válidos na língua inglesa! toda variável é composta de um caractere alfabético, seguido de caracteres alfabéticos ou números
embora as linguagens funcionais puras não sejam imperativas, elas geralmente fornecem uma facilidade para descrever o efeito de uma função como uma série de etapas
embora bastante útil, esse método traz em seu bojo vários problemas
embora haja essa distinção entre linguagens interpretadas e compiladas, as coisas nem sempre são tão simples
embora o fortran tenha sido a primeira linguagem de terceira geração a ser usada, a primeira linguagem criada não foi esta
embora seja teoricamente possível a construção de computadores especiais, capazes de executar programas escritos em uma linguagem de programação qualquer, os computadores, existentes hoje em dia são capazes de executar somente programas em linguagem de baixo nível, a linguagem de máquina
embora seja um comando poderoso, o uso de gotos é considerado, em geral, má prática, havendo quem o defenda em algumas situações
embora você não perceba, utiliza algoritmos de forma intuitiva e automática diariamente quando executa tarefas comuns 
empacote os dados com suas operações naturais/intrínsecas
encapsulament é a técnica que faz com que detalhes internos do funcionamento dos métodos de uma classe permaneçam ocultos para os objetos
encapsulamento dos dados é um mecanismo utilizado para reunir os dados e os métodos numa estrutura que pode esconder a implementação do objeto, ou seja, ele impede o acesso aos dados por um meio diferente dos serviços propostos
encapsulamento é um conceito de programação orientada a objetos que liga os dados e funções que manipulam os dados e que mantem ambos seguros de interferência externa e má utilização
encapsulamento é um princípio, utilizando quando se está desenvolvendo a estrutura geral de um programa, no qual cada componente de um programa deve encapsula
encapsulamento incentiva o desacoplamento
encapsular atributos também auxilia a garantir que o estado e o comportamento de um objeto se mantenha coeso 
encapsular é fundamental para que seu sistema seja suscetível a mudanças não precisaremos mudar uma regra de negócio em vários lugares, mas sim em apenas um único lugar, já que essa regra está encapsulada
encontrar um nome para um novo padrão é considerada uma etapa difícil já que o nome deve proporcionar a ideia para a qual o padrão foi criado
enfim,   a  grande  regra  das  linguagens   de  programação  e  da  lógica  de programação é que a única certeza é que nada é certo
enfim, a grande regra das linguagens de programação e da lógica de programação é que a única certeza é que nada é certo
engenharia de software é uma área da computação voltada à especificação, desenvolvimento, manutenção e criação de software, com a aplicação de tecnologias e práticas de gerência de projetos e outras disciplinas, visando organização, produtividade e qualidade
enquanto a herança se refere às classes e a sua hierarquia, o polimorfismo diz respeito aos métodos dos objetos
enquanto a instrução break é utilizada para encerrar um laço, a instrução continue serve para iniciar uma nova repetição em que todas as instruções tenham sido executadas
enquanto a pe fia-se em estruturas de controle de alto níve, concepções top-down e refinamento por passos, a poo se baseia no conceito de objetos que possuem atributos e métodos 
enquanto algumas entidades como a fsf argumentam que um arquivo intermediário não é um código fonte real e não conta como código fonte outras acham conveniente tratar cada arquivo intermediário como código fonte para a próxima etapa
enquanto faça esta estrutura repete uma seqüência de comandos enquanto uma determinada condição especificada através de uma expressão lógica for satisfeita
então é chegado o momento de nos determos mais na importante questão conceitual do desempenho algorítmico
então, conhecendo como cada plataforma funciona, junto com outros critérios, é possível elencar qual delas tende a contribuir mais com a presença online da marca
entendemos  saída,  como  o  conjunto  de  instruções  que  permitem   a comunicação com o usuário ou a escrita de dados ou de quaisquer outras informações emtela  saída  principal,papel  impressora  ou  em  disco gravação
entendemos saída, como o conjunto de instruções que permitem a comunicação com o usuário ou a escrita de dados ou de quaisquer outras informações em tela saída principal, papel impressora ou em disco gravação
entity - declara uma entidade do tipo relacional, como uma tabela, porém é uma classe java
entrada e saída é um termo utilizado quase que exclusivamente no ramo da computação, indicando entrada de dados por meio de algum código ou programa
entre as diversas interfaces deste pacote existe a interface connection
entre as diversas vantagens do padrão mvc estão a possibilidade de reescrita da gui ou do controller sem alterar o nosso modelo
entre as técnicas usadas estão a substituição de expressões que podem ser avaliadas durante o tempo de compilação pelos seus valores calculados, eliminação de subexpressões redundantes, desmembramento de laços, substituição de operações multiplicação por shifts, entre outras
entre linguagens que utilizam o modelo de troca de mensagens, erlang é possivelmente a mais utilizada pela indústria atualmente
entretanto, a maioria dos algoritmos são desenvolvidos para programas de computador, para isto, existe uma grande variedade de linguagens de programação, cada uma com características específicas que podem facilitar a implementação de determinados algoritmos ou atender a propósitos mais gerais
entretanto, algumas linguagens suportam alocação dinâmica de memória para variáveis locais na pilha de chamada, de forma que o tamanho do quadro duma sub-rotina não seja fixo, variando de acordo com a chamada
entretanto, ambos os métodos de instância e de classe são resolvidos dinamicamente e não há métodos estáticos
entretanto, métodos estáticos não podem ser sobrescritos
entretanto, num projeto, o trabalho de desenvolvimento de algoritmos e programas poderá ter de ser todo refeito se houver problemas nas três primeiras fases, mostrando assim a importância do trabalho do analista de sistemas
eram caríssimas, portanto incentivaram o uso da compactação dos dados
erros de compilação : erros de digitação e de uso da sintaxe da linguagem
erros de execução : erro na lógica do programa algoritmo
erros de link-edição : erro no uso de bibliotecas de sub-programas necessárias ao programa principal
escalonador de trabalho entre threads distintas
escolha nomes de variáveis que sejam significativos, isto é, que traduzam o tipo de informação a ser armazenada na variável 
esconder cada decisão de projeto a interface com cada módulo é definida de forma a revelar o mínimo possível sobre o seu funcionamento interno 
esconder ou regular uma parte de um programa, mantendo o restante código alheio às questões internas resolvidas dentro dessa função
escrever o programa na linguagem de programação escolhida
escrever testes com junit permite que o programador perca menos tempo depurando seu código
esforço computacional necessário para alcançar qualquer nó da árvore é proporcional à altura da árvore 
especificamente para este tipo de vetor, que envolve um conjunto de caracteres, é estabelecida uma expressão que a caracteriza facilmente, sendo está expressão importante na área de informática string ou simplesmente cadeia de caracteres
especificamente, a gramática estendida eleva um elemento não variável ou uma construção implícita na gramática base para uma variável ou constante, permitindo a utilização do código genéric
espera-se que com isso ao fim de um período de quatro meses, você tenha adquirido a capacidade de transformar qualquer problema de média complexidade e extensão em um algoritmo de boa qualidade
espera-se que operações envolvendo tipos primitivos sejam as construções mais rápidas da linguagem
essa  situação  decorre  de  muitas  origens,  por  exemplo,a  linguagem  bcpl origem do c não obrigava a declaração de uma variável,  antes de usá-la
essa abordagem é essencial para a implementação de modelos de re-chamada callback, muito utilizados atualmente em bibliotecas de rotinas para manipulação de interfaces gráficas
essa abordagem facilita muito nosso trabalho por não precisarmos entender o protocolo de cada banco
essa abordagem para manipulação de memória é chamada de gerenciamento implícito de memória porque não exige a gravação de qualquer código de manipulação de memória
essa condição deve ser uma expressão booleana e, enquanto ela for verdadeira, esta estrutura continuará executando as instruções contidas no seu corpo
essa divisão de preocupações ajuda na separação de tarefas e torna as mais específicas
essa estrutura de dados também é conhecida como variável indexada, vetor para arranjos unidimensionais e matriz para arranjos bidimensionais
essa estrutura permite acesso aleatório qualquer elemento do vetor pode ser alcançado diretamente, sem passar pelos elementos anteriores o décimo elemento, por exemplo, pode ser alcançado sem que seja necessário passar antes pelo primeiro, segundo, etc, nono elementos
essa palavra deriva de al-khwarizmi, matemático persa do século ix, a quem se atribui a construção dos primeiros processos para realização de operações aritméticas, o que explica o porquê do nome de um matemático ter sido associado a um processo repetitivo que leva à solução de problemas complexos
essa separação de camadas ajuda na redução de acoplamento e promove o aumento de coesão nas classes do projeto
essa situação decorre de muitas origens, por exemplo, a linguagem bcpl origem do c não obrigava a declaração de uma variável, antes de usá-la
essa situação pode ser comparada a uma simples contagem
essa situação varia de linguagem para linguagem de programação e mesmo entre autores de algoritmos
essa técnica de programação é denominada programação modular
essa técnica é uma forma de encapsulamento, e é útil para dividir tarefas procedimentais em subtarefas que fazem sentido somente localmente
essa variação tem um uso bastante efetivo na validação de dados de entrada, pelo teclado, mas pode ser sempre substituída por um enquanto
essas palavras tem significado especial e não podem ser usadas como identificadores em um programa
essas seriam os principais componentes da primeira geração de computadores, algum tempo mais tarde
essas soluções padrões tem o nome de design patterns
esse código fonte é depois traduzido para código de máquina, que é executado pelo microprocessador
esse comando é utilizado quando não há necessidade de inicializar ou atualizar variáveis contadoras, quando as etapas de inicialização ou atualização requerem muitas instruções e quando as informações necessárias para avaliar a condição não dependem de uma variável contadora ou são obtidas durante a execução do bloco
esse conjunto de interfaces fica dentro do pacote java ponto sql e nos referiremos a ele como jdbc
esse dado é atribuído a variável e o computador dá continuidade ao algoritmo
esse é outro tipo de abstração que simplifica o código externo à hierarquia de classes e permite uma forte separação de interesses
esse é um processo algorítmico, na medida em que se trata de um processo repetitivo que, ao ser concluído, permite a obtenção do resultado procurado
esse método é baseado em passar sempre o menor valor do vetor para a primeira posição ou o maior, dependendo da ordem requerida
esse ponteiro indica a instância associada ao método sendo invocado, sendo essencial para fornecer contexto a execução
esse tipo de ponteiro é perigoso e sutil, pois um região desalocada de memória pode conter a mesma informação que possuía antes de ser desalocada, mas também pode ser realocada e sobreescrita com informação fora do escopo antigo
esse tipo de situação jamais ocorrerá em java, pois em java o símbolo fecha a chave impede essa ocorrência
esse uso de ponteiros nulos pode ser comparado ao uso de valores nulos em bancos de dados relacionais e aos valores nothing e maybe em mónadas da programação funcional
esses módulos trazem vantagens adicionais para testes, pois testa-se um módulo ou seja, uma parte do programa de cada vez, independentemente
esta área é utilizada para se fazer a identificação do programa com um nome
esta área é utilizada para validar o uso de qualquer tipo de identificador que não seja predefinido, estando subdividida em sete sub-áreas: uses, label, const, type, var, procedure e function
está associado a ela além da condição também chamada expressão de controle ou condição de parada o bloco de código verifica-se a condição, e caso seja verdadeira, o bloco é executado
esta categoria inclui algoritmos de busca e backtracking
esta estrutura caracteriza-se por efetuar um teste lógico no final de um looping, sendo parecida com a estrutura whiledo
esta estrutura de repetição se caracteriza por efetuar um teste lógico no início de um loop, verificando se é permitido executar o trecho de instruções abaixo dela
esta instrução irá efetuar a execução de um conjunto de instruções pelo menos uma vez antes de verificar a validade da condição estabelecida
esta operação matemática será realizada pelo model assim que ele receber um pedido do controller
esta programação dita que o programador deve modelar um dado problema através de assertivas acerca dos objetos do universo de discurso, ou seja, definindo o relacionamento lógico existente entre a cabeça e o corpo da cláusula, e nunca descrevendo como seus procedimentos funcionam
esta proteção consiste em se usar modificadores de acesso mais restritivos sobre os atributos definidos na classe
esta raiz pode ser simplesmente um apontador para uma lista ou um apontador para uma primeira célula vazia
esta representação gráfica do algoritmo é chamada de fluxograma
esta resposta pode ser síncrona quando o cliente aguarda a resposta do servidor para executar qualquer outra instrução ou assíncrona envolvendo paralelismo de atividades
esta linguagem de programação de primeira geração não tinha distinção entre código fonte e código de máquina
estas estruturas de dados são ajeitadas nas situações em que o acesso aos dados seja realizado de forma aleatória e imprevisível
estas linguagens fazem o computador assimilar cada comando e função de um algoritmo, depois executar cada função
estas são aquelas que só têm validade dentro do bloco no qual são declaradas
estas seguem, rigorosamente, postulados matemáticos relacionados às matrizes
este comando cria a variável nomecliente como um vetor de char com capacidade de armazenamento de sessenta e um caracteres
este conjunto de estruturas de dados e de controlo constituem formalmente um algoritmo para a resolução de problemas
este conjunto de palavras que formam linhas de comandos deverá estar dentro da padronização da linguagem escolhida, obedecendo critérios de execução
este nome vem do fato de que, neste tipo de chamada, não se passa para a função os valores das variáveis
este paradigma de programação se destaca pela simplicidade, uma vez que todo ser humano, ao se programar, o faz imperativamente, baseado na ideia de ações e estados, quase como um programa de computador
este subcomitê desenvolveu as especificações da linguagem cobol
este termo é utilizado para construir uma estrutura de repetição que executa, repetidamente, uma única instrução ou um bloco delas enquanto uma expressão booleana for verdadeira
este tipo de chamada de função é denominado chamada por valor
este tipo de chamada de função tem o nome de chamada por referência
este tipo de dado também e chamado de tipo boleano
este tipo de estrutura é também chamado de matriz unidimensional um vetor é representado por seu nome, tamanho e seu tipo
este tipo de rotina embutida é conhecido pelo nome de unidade do inglês, unit
estes aspectos dos algoritmos são alvo da análise de algoritmos
estes cinco passos são colectivamente conhecidos como engenharia de software
estes foram os dois primeiros paradigmas dominantes na programação de computadores
estes parâmetros serão passados de duas formas: por valor e por referência
estes são declarados como sendo as entradas de uma função
estrutura de dados é o fruto do processo sistemático que fez nascer os algoritmos 
estrutura de repetição nada mais é que laços de repetições
estrutura de repetição realiza o incremento de um contator de forma implícita
estrutura de seleção ou de decisão é uma estrutura utilizada na programação para direcionar o código e tomar decisões baseadas no resultado lógico de expressões ou em inputs que um usuário dê para o programa
estrutura de seleção expressão condicional ou ainda construção condicional é, na ciência da computação, uma estrutura de desvio do fluxo de controle presente em linguagens de programação que realiza diferentes computações ou ações dependendo se a seleção ou condição é verdadeira ou falsa, em que a expressão é processada e transformada em um valor booleano 
estruturalmente a linguagem java começa com pacotes
estruturas de controle lógico estão disponíveis em cobol que faz com que seja mais fácil de ler e modificar
estruturas de dados e algoritmos estão intimamente ligados
estruturas de dados não primitivas ou complexas representam estruturas de informação em conjuntos formados por estruturas de dados primitivas logicamente relacionados
estruturas de dados primitivas esta secção apresenta em conjunto de exemplos simples representativos de tipos de estruturas de dados primitivos tipo booleano ou binário, tipo numérico inteiros e reais e tipo alfanumérico para o tratamento de cadeias de caracteres e consequente tratamento de texto
estruturas de dados primitivas são diretamente manipuladas em linguagem máquina binária
estruturas de decisão: onde, a partir de um teste lógico, determinado trecho de código é executado, ou não
estruturas de iteração: onde, a partir de um teste lógico, determinado trecho de código é repetido por um número finito de vezes
estruturas de repetição são formas e estruturas organizadas de fazer com que um computador consiga tomar decisões ou executar diversas vezes uma instrução até que um limite pré-estabelecido seja atingido
estruturas de repetição são formas e estruturas organizadas de fazer com que um computador consiga tomar decisões ou executar diversas vezes uma instrução até que um limite pré-estabelecido seja atingido, ou uma condição seja satisfeita, ou o usuário intervenha
estruturas de repetição são muito comuns as situações em que se deseja repetir um determinado trecho de um programa um certo número de vezes 
estruturas de repetição são recursos da linguagem de programação que permitem que um conjunto de instruções sejam executadas repetidas vezes
estruturas de sequência: onde uma tarefa é executada após a outra, linearmente
estruturas lineares são estruturas em que cada elemento pode ter um único predecessor pilhas, arranjos, filas e listas
estruturas não lineares apresentam cada elemento podendo ter mais de um predecessor ou sucessor grafos e as árvores
exato ou aproximado enquanto alguns algoritmos encontram uma resposta exata, algoritmos de aproximação procuram uma resposta próxima a verdadeira solução, seja através de estratégia determinística ou aleatória
execução sequencial de procedimentos
exemplos clássicos são algoritmos de busca, de ordenação, de análise numérica, de teoria de grafos, de manipulação de cadeias de texto, de geometria computacional, de análise combinatória, de aprendizagem de máquina, de criptografia, de compressão de dados e de interpretação de texto
existe ainda o tipo char, utilizado da mesma forma que o tipo string, porém com uma pequena diferença: é usado para strings de apenas um caracter
existe o visualg, um aplicativo simples, em português, que vai testar todos os seus algoritmos e conhecimentos de lógica de programação
existe um pilha de chamada para cada thread sendo executada, ainda que mais pilhas possam ser criadas para o tratamento de sinais ou para multitarefa cooperativa
existe uma técnica denominada teste de mesa que permite a simulação do processo de interpretação de um algoritmo utilizando apenas um papel e uma caneta
existem algoritmos para pesquisa e ordenação para as mais variadas estruturas de dados
existem algoritmos que já fazem parte de conselhos de empresas
existem alguns softwares disponíveis que efetuam a interpretação de algoritmos representados em pseudocódigos ou em fluxogramas
existem annotations com vários pair values valores diferentes que são separados por vírgula, que contenham apenas um valor ou simplesmente nenhum valor
existem as estruturas de repetição, que permitem que você execute estas tarefas de forma mais simplificada
existem atualmente mais de 60 anotações
existem casos em que um procedimento ou função chama a si próprio
existem diversas formas de escrever um algoritmo, podendo ser citadas o pseudocódigo ou português estruturado, fluxograma, com linguagem de programação, como java e c, dentre outros
existem diversas formas de escrever um algoritmo, podendo ser citadas o pseudocódigo ou português estruturado, fluxograma, diagrama de chapin e descrição narrativa
existem diversas técnicas que ajudam no desenvolvimento de algoritmos facilitando seu entendimento para as pessoas
existem dois tipos de estruturas dentro do universo das estruturas de dados estruturas lineares e não lineares
existem duas formas de ler o valor de um atributo de um objeto json
existem limites inferiores naturais como o tamanho da entrada 
existem linguagens que são compiladas e as que são interpretadas
existem muitos compiladores mainframe utilitários disponíveis para compilar um programa em cobol
existem muitos emuladores grátis mainframe está disponível para windows que pode ser usado para escrever e aprender cobol
existem situações onde é necessário repetir um determinado trecho de um programa um certo número de vezes
existem também estruturas de dados que trabalham com dados heterogêneos, como as listas que apresentam todos os seus elementos de tipos diferentes basicamente
existem três níveis de visibilidade pública onde as funções de todas as classes podem acessar os dados ou os métodos de uma classe definida com o nível público de visibilidade